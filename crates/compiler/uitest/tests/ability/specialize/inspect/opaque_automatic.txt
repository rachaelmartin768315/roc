# +emit:mono
app "test" provides [main] to "./platform"

Op := {}

main =
    dbg (@Op {})
    1

# -emit:mono
procedure Inspect.248 (Inspect.249):
    let Inspect.313 : Str = "<opaque>";
    let Inspect.312 : Str = CallByName Inspect.59 Inspect.249 Inspect.313;
    ret Inspect.312;

procedure Inspect.30 (Inspect.143):
    ret Inspect.143;

procedure Inspect.33 (Inspect.148):
    let Inspect.301 : Str = CallByName Inspect.5 Inspect.148;
    let Inspect.300 : Str = CallByName Inspect.60 Inspect.301;
    ret Inspect.300;

procedure Inspect.35 (Inspect.297):
    let Inspect.307 : Str = "";
    ret Inspect.307;

procedure Inspect.44 (Inspect.295):
    let Inspect.310 : {} = Struct {};
    let Inspect.309 : {} = CallByName Inspect.30 Inspect.310;
    ret Inspect.309;

procedure Inspect.5 (Inspect.146):
    let Inspect.308 : {} = CallByName Inspect.44 Inspect.146;
    let Inspect.305 : {} = Struct {};
    let Inspect.304 : Str = CallByName Inspect.35 Inspect.305;
    let Inspect.303 : Str = CallByName Inspect.248 Inspect.304;
    ret Inspect.303;

procedure Inspect.59 (Inspect.296, Inspect.292):
    let Inspect.315 : Str = CallByName Str.3 Inspect.296 Inspect.292;
    dec Inspect.292;
    ret Inspect.315;

procedure Inspect.60 (Inspect.298):
    ret Inspect.298;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.232 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.232;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.2 : Str = CallByName Inspect.33 Test.4;
    dbg Test.2;
    dec Test.2;
    let Test.3 : I64 = 1i64;
    ret Test.3;
