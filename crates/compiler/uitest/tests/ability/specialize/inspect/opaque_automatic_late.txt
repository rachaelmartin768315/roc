# +emit:mono
app "test" provides [main] to "./platform"

Op := {}

late = \a ->
    dbg a
    1

main =
    late (@Op {})

# -emit:mono
procedure Inspect.253 (Inspect.254):
    let Inspect.321 : Str = "<opaque>";
    let Inspect.320 : Str = CallByName Inspect.61 Inspect.254 Inspect.321;
    ret Inspect.320;

procedure Inspect.30 (Inspect.148):
    ret Inspect.148;

procedure Inspect.34 (Inspect.153):
    let Inspect.309 : Str = CallByName Inspect.5 Inspect.153;
    let Inspect.308 : Str = CallByName Inspect.62 Inspect.309;
    ret Inspect.308;

procedure Inspect.36 (Inspect.305):
    let Inspect.315 : Str = "";
    ret Inspect.315;

procedure Inspect.45 (Inspect.303):
    let Inspect.318 : {} = Struct {};
    let Inspect.317 : {} = CallByName Inspect.30 Inspect.318;
    ret Inspect.317;

procedure Inspect.5 (Inspect.151):
    let Inspect.316 : {} = CallByName Inspect.45 Inspect.151;
    let Inspect.313 : {} = Struct {};
    let Inspect.312 : Str = CallByName Inspect.36 Inspect.313;
    let Inspect.311 : Str = CallByName Inspect.253 Inspect.312;
    ret Inspect.311;

procedure Inspect.61 (Inspect.304, Inspect.300):
    let Inspect.323 : Str = CallByName Str.3 Inspect.304 Inspect.300;
    dec Inspect.300;
    ret Inspect.323;

procedure Inspect.62 (Inspect.306):
    ret Inspect.306;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.292 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.292;

procedure Test.2 (Test.3):
    let Test.4 : Str = CallByName Inspect.34 Test.3;
    dbg Test.4;
    dec Test.4;
    let Test.7 : I64 = 1i64;
    ret Test.7;

procedure Test.0 ():
    let Test.6 : {} = Struct {};
    let Test.5 : I64 = CallByName Test.2 Test.6;
    ret Test.5;
