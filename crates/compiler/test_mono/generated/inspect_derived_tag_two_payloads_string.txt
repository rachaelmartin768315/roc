procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Str, Str} = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.4 (#Derived.5, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.5;
        ret #Derived_gen.3;
    in
    let #Derived.2 : Str = StructAtIndex 0 #Derived.1;
    let #Derived.3 : Str = StructAtIndex 1 #Derived.1;
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Inspect.44 #Derived.2;
    let #Derived_gen.10 : Str = CallByName Inspect.44 #Derived.3;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9, #Derived_gen.10];
    let #Derived_gen.6 : [C Str, C Str List Str] = CallByName Inspect.40 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure Inspect.203 (Inspect.204, #Attr.12):
    let Inspect.346 : Str = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Inspect.345 : Str = CallByName Inspect.61 Inspect.204 Inspect.346;
    ret Inspect.345;

procedure Inspect.205 (Inspect.206, #Attr.12):
    let Inspect.340 : List Str = UnionAtIndex (Id 1) (Index 1) #Attr.12;
    let Inspect.339 : Str = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Inspect.338 : Str = "(";
    let Inspect.337 : Str = CallByName Inspect.61 Inspect.206 Inspect.338;
    let Inspect.325 : Str = CallByName Inspect.61 Inspect.337 Inspect.339;
    let Inspect.321 : Str = CallByName Inspect.207 Inspect.325 Inspect.340;
    let Inspect.322 : Str = ")";
    let Inspect.320 : Str = CallByName Inspect.61 Inspect.321 Inspect.322;
    ret Inspect.320;

procedure Inspect.207 (Inspect.208, Inspect.202):
    let Inspect.329 : {} = Struct {};
    let Inspect.328 : Str = CallByName List.18 Inspect.202 Inspect.208 Inspect.329;
    ret Inspect.328;

procedure Inspect.209 (Inspect.210, Inspect.211):
    let Inspect.336 : Str = " ";
    let Inspect.331 : Str = CallByName Inspect.61 Inspect.210 Inspect.336;
    let Inspect.330 : Str = CallByName Inspect.212 Inspect.331 Inspect.211;
    ret Inspect.330;

procedure Inspect.212 (Inspect.213, Inspect.211):
    let Inspect.334 : Str = CallByName Inspect.31 Inspect.211 Inspect.213;
    ret Inspect.334;

procedure Inspect.249 (Inspect.250, Inspect.248):
    let Inspect.355 : Str = "\"";
    let Inspect.354 : Str = CallByName Inspect.61 Inspect.250 Inspect.355;
    let Inspect.352 : Str = CallByName Inspect.61 Inspect.354 Inspect.248;
    let Inspect.353 : Str = "\"";
    let Inspect.351 : Str = CallByName Inspect.61 Inspect.352 Inspect.353;
    ret Inspect.351;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.305, Inspect.149):
    let Inspect.315 : U8 = GetTagId Inspect.305;
    switch Inspect.315:
        case 0:
            let Inspect.314 : Str = CallByName Inspect.203 Inspect.149 Inspect.305;
            ret Inspect.314;
    
        default:
            let Inspect.314 : Str = CallByName Inspect.205 Inspect.149 Inspect.305;
            ret Inspect.314;
    

procedure Inspect.31 (Inspect.305, Inspect.149):
    let Inspect.335 : Str = CallByName Inspect.249 Inspect.149 Inspect.305;
    ret Inspect.335;

procedure Inspect.35 (Inspect.300):
    ret Inspect.300;

procedure Inspect.36 (Inspect.304):
    let Inspect.311 : Str = "";
    ret Inspect.311;

procedure Inspect.40 (Inspect.201, Inspect.202):
    inc Inspect.202;
    let Inspect.341 : Int1 = CallByName List.1 Inspect.202;
    if Inspect.341 then
        dec Inspect.202;
        let Inspect.343 : [C Str, C Str List Str] = TagId(0) Inspect.201;
        let Inspect.342 : [C Str, C Str List Str] = CallByName Inspect.30 Inspect.343;
        ret Inspect.342;
    else
        let Inspect.317 : [C Str, C Str List Str] = TagId(1) Inspect.201 Inspect.202;
        let Inspect.316 : [C Str, C Str List Str] = CallByName Inspect.30 Inspect.317;
        ret Inspect.316;

procedure Inspect.44 (Inspect.248):
    let Inspect.356 : Str = CallByName Inspect.30 Inspect.248;
    ret Inspect.356;

procedure Inspect.5 (Inspect.150):
    let Inspect.312 : {Str, Str} = CallByName #Derived.0 Inspect.150;
    let Inspect.309 : {} = Struct {};
    let Inspect.308 : Str = CallByName Inspect.36 Inspect.309;
    let Inspect.307 : Str = CallByName #Derived.4 Inspect.308 Inspect.312;
    ret Inspect.307;

procedure Inspect.61 (Inspect.303, Inspect.298):
    let Inspect.324 : Str = CallByName Str.3 Inspect.303 Inspect.298;
    dec Inspect.298;
    ret Inspect.324;

procedure List.1 (List.102):
    let List.566 : U64 = CallByName List.6 List.102;
    dec List.102;
    let List.567 : U64 = 0i64;
    let List.565 : Int1 = CallByName Bool.11 List.566 List.567;
    ret List.565;

procedure List.18 (List.154, List.155, List.156):
    let List.554 : U64 = 0i64;
    let List.555 : U64 = CallByName List.6 List.154;
    let List.553 : Str = CallByName List.88 List.154 List.155 List.156 List.554 List.555;
    ret List.553;

procedure List.6 (#Attr.2):
    let List.564 : U64 = lowlevel ListLen #Attr.2;
    ret List.564;

procedure List.66 (#Attr.2, #Attr.3):
    let List.563 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.563;

procedure List.88 (#Derived_gen.19, #Derived_gen.20, #Derived_gen.21, #Derived_gen.22, #Derived_gen.23):
    joinpoint List.556 List.157 List.158 List.159 List.160 List.161:
        let List.558 : Int1 = CallByName Num.22 List.160 List.161;
        if List.558 then
            let List.562 : Str = CallByName List.66 List.157 List.160;
            inc List.562;
            let List.162 : Str = CallByName Inspect.209 List.158 List.562;
            let List.561 : U64 = 1i64;
            let List.560 : U64 = CallByName Num.51 List.160 List.561;
            jump List.556 List.157 List.162 List.159 List.560 List.161;
        else
            dec List.157;
            ret List.158;
    in
    jump List.556 #Derived_gen.19 #Derived_gen.20 #Derived_gen.21 #Derived_gen.22 #Derived_gen.23;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.292 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.292;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.291;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.292 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.292;

procedure Test.0 ():
    let Test.6 : Str = "foo";
    let Test.5 : Str = "foo";
    let Test.1 : {Str, Str} = Struct {Test.5, Test.6};
    let Test.4 : Str = CallByName Inspect.5 Test.1;
    let Test.3 : Str = CallByName Inspect.35 Test.4;
    ret Test.3;
