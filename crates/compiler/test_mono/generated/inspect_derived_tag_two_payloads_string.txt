procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Str, Str} = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.4 (#Derived.5, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.5;
        ret #Derived_gen.3;
    in
    let #Derived.2 : Str = StructAtIndex 0 #Derived.1;
    let #Derived.3 : Str = StructAtIndex 1 #Derived.1;
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Inspect.47 #Derived.2;
    let #Derived_gen.10 : Str = CallByName Inspect.47 #Derived.3;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9, #Derived_gen.10];
    let #Derived_gen.6 : [C Str, C Str List Str] = CallByName Inspect.43 #Derived_gen.7 #Derived_gen.8;
    dec #Derived_gen.8;
    dec #Derived_gen.7;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure Inspect.201 (Inspect.202, #Attr.12):
    let Inspect.334 : Str = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Inspect.333 : Str = CallByName Inspect.63 Inspect.202 Inspect.334;
    dec Inspect.334;
    ret Inspect.333;

procedure Inspect.203 (Inspect.204, #Attr.12):
    let Inspect.328 : List Str = UnionAtIndex (Id 1) (Index 1) #Attr.12;
    let Inspect.327 : Str = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Inspect.326 : Str = "(";
    let Inspect.325 : Str = CallByName Inspect.63 Inspect.204 Inspect.326;
    dec Inspect.326;
    let Inspect.205 : Str = CallByName Inspect.63 Inspect.325 Inspect.327;
    dec Inspect.327;
    let Inspect.317 : {} = Struct {};
    let Inspect.206 : Str = CallByName List.18 Inspect.328 Inspect.205 Inspect.317;
    dec Inspect.328;
    let Inspect.314 : Str = ")";
    let Inspect.313 : Str = CallByName Inspect.63 Inspect.206 Inspect.314;
    dec Inspect.314;
    ret Inspect.313;

procedure Inspect.207 (Inspect.208, Inspect.209):
    let Inspect.324 : Str = " ";
    let Inspect.319 : Str = CallByName Inspect.63 Inspect.208 Inspect.324;
    dec Inspect.324;
    let Inspect.318 : Str = CallByName Inspect.210 Inspect.319 Inspect.209;
    ret Inspect.318;

procedure Inspect.210 (Inspect.211, Inspect.209):
    let Inspect.322 : Str = CallByName Inspect.31 Inspect.209 Inspect.211;
    ret Inspect.322;

procedure Inspect.244 (Inspect.245, Inspect.243):
    let Inspect.342 : Str = "\"";
    let Inspect.341 : Str = CallByName Inspect.63 Inspect.245 Inspect.342;
    dec Inspect.342;
    let Inspect.339 : Str = CallByName Inspect.63 Inspect.341 Inspect.243;
    let Inspect.340 : Str = "\"";
    let Inspect.338 : Str = CallByName Inspect.63 Inspect.339 Inspect.340;
    dec Inspect.340;
    ret Inspect.338;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.297, Inspect.149):
    let Inspect.309 : U8 = GetTagId Inspect.297;
    switch Inspect.309:
        case 0:
            let Inspect.308 : Str = CallByName Inspect.201 Inspect.149 Inspect.297;
            ret Inspect.308;
    
        default:
            let Inspect.308 : Str = CallByName Inspect.203 Inspect.149 Inspect.297;
            ret Inspect.308;
    

procedure Inspect.31 (Inspect.297, Inspect.149):
    let Inspect.323 : Str = CallByName Inspect.244 Inspect.149 Inspect.297;
    ret Inspect.323;

procedure Inspect.33 (Inspect.152):
    let Inspect.299 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.298 : Str = CallByName Inspect.64 Inspect.299;
    ret Inspect.298;

procedure Inspect.39 (Inspect.295):
    let Inspect.305 : Str = "";
    ret Inspect.305;

procedure Inspect.43 (Inspect.199, Inspect.200):
    let Inspect.329 : Int1 = CallByName List.1 Inspect.200;
    if Inspect.329 then
        inc Inspect.199;
        let Inspect.331 : [C Str, C Str List Str] = TagId(0) Inspect.199;
        let Inspect.330 : [C Str, C Str List Str] = CallByName Inspect.30 Inspect.331;
        ret Inspect.330;
    else
        inc Inspect.200;
        inc Inspect.199;
        let Inspect.311 : [C Str, C Str List Str] = TagId(1) Inspect.199 Inspect.200;
        let Inspect.310 : [C Str, C Str List Str] = CallByName Inspect.30 Inspect.311;
        ret Inspect.310;

procedure Inspect.47 (Inspect.243):
    let Inspect.343 : Str = CallByName Inspect.30 Inspect.243;
    ret Inspect.343;

procedure Inspect.5 (Inspect.150):
    let Inspect.306 : {Str, Str} = CallByName #Derived.0 Inspect.150;
    let Inspect.303 : {} = Struct {};
    let Inspect.302 : Str = CallByName Inspect.39 Inspect.303;
    let Inspect.301 : Str = CallByName #Derived.4 Inspect.302 Inspect.306;
    ret Inspect.301;

procedure Inspect.63 (Inspect.294, Inspect.290):
    let Inspect.316 : Str = CallByName Str.3 Inspect.294 Inspect.290;
    ret Inspect.316;

procedure Inspect.64 (Inspect.296):
    ret Inspect.296;

procedure List.1 (List.118):
    let List.678 : U64 = CallByName List.6 List.118;
    let List.679 : U64 = 0i64;
    let List.677 : Int1 = CallByName Bool.11 List.678 List.679;
    ret List.677;

procedure List.100 (#Derived_gen.13, #Derived_gen.14, #Derived_gen.15, #Derived_gen.16, #Derived_gen.17):
    joinpoint List.668 List.174 List.175 List.176 List.177 List.178:
        let List.670 : Int1 = CallByName Num.22 List.177 List.178;
        if List.670 then
            let List.674 : Str = CallByName List.66 List.174 List.177;
            inc List.674;
            let List.179 : Str = CallByName Inspect.207 List.175 List.674;
            dec List.674;
            let List.673 : U64 = 1i64;
            let List.672 : U64 = CallByName Num.51 List.177 List.673;
            jump List.668 List.174 List.179 List.176 List.672 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.13;
    jump List.668 #Derived_gen.13 #Derived_gen.14 #Derived_gen.15 #Derived_gen.16 #Derived_gen.17;

procedure List.18 (List.171, List.172, List.173):
    let List.666 : U64 = 0i64;
    let List.667 : U64 = CallByName List.6 List.171;
    let List.665 : Str = CallByName List.100 List.171 List.172 List.173 List.666 List.667;
    ret List.665;

procedure List.6 (#Attr.2):
    let List.676 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.676;

procedure List.66 (#Attr.2, #Attr.3):
    let List.675 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.675;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.246 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.246;

procedure Test.0 ():
    let Test.5 : Str = "foo";
    let Test.4 : Str = "foo";
    let Test.1 : {Str, Str} = Struct {Test.4, Test.5};
    let Test.3 : Str = CallByName Inspect.33 Test.1;
    ret Test.3;
