procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Str, Str} = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.4 (#Derived.5, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.5;
        ret #Derived_gen.3;
    in
    let #Derived.2 : Str = StructAtIndex 0 #Derived.1;
    let #Derived.3 : Str = StructAtIndex 1 #Derived.1;
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Inspect.43 #Derived.2;
    let #Derived_gen.10 : Str = CallByName Inspect.43 #Derived.3;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9, #Derived_gen.10];
    let #Derived_gen.6 : [C Str, C Str List Str] = CallByName Inspect.39 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure Inspect.200 (Inspect.201, #Attr.12):
    let Inspect.342 : Str = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Inspect.341 : Str = CallByName Inspect.59 Inspect.201 Inspect.342;
    ret Inspect.341;

procedure Inspect.202 (Inspect.203, #Attr.12):
    let Inspect.336 : List Str = UnionAtIndex (Id 1) (Index 1) #Attr.12;
    let Inspect.335 : Str = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Inspect.334 : Str = "(";
    let Inspect.333 : Str = CallByName Inspect.59 Inspect.203 Inspect.334;
    let Inspect.321 : Str = CallByName Inspect.59 Inspect.333 Inspect.335;
    let Inspect.317 : Str = CallByName Inspect.204 Inspect.321 Inspect.336;
    let Inspect.318 : Str = ")";
    let Inspect.316 : Str = CallByName Inspect.59 Inspect.317 Inspect.318;
    ret Inspect.316;

procedure Inspect.204 (Inspect.205, Inspect.199):
    let Inspect.325 : {} = Struct {};
    let Inspect.324 : Str = CallByName List.18 Inspect.199 Inspect.205 Inspect.325;
    ret Inspect.324;

procedure Inspect.206 (Inspect.207, Inspect.208):
    let Inspect.332 : Str = " ";
    let Inspect.327 : Str = CallByName Inspect.59 Inspect.207 Inspect.332;
    let Inspect.326 : Str = CallByName Inspect.209 Inspect.327 Inspect.208;
    ret Inspect.326;

procedure Inspect.209 (Inspect.210, Inspect.208):
    let Inspect.330 : Str = CallByName Inspect.31 Inspect.208 Inspect.210;
    ret Inspect.330;

procedure Inspect.246 (Inspect.247, Inspect.245):
    let Inspect.351 : Str = "\"";
    let Inspect.350 : Str = CallByName Inspect.59 Inspect.247 Inspect.351;
    let Inspect.348 : Str = CallByName Inspect.59 Inspect.350 Inspect.245;
    let Inspect.349 : Str = "\"";
    let Inspect.347 : Str = CallByName Inspect.59 Inspect.348 Inspect.349;
    ret Inspect.347;

procedure Inspect.30 (Inspect.143):
    ret Inspect.143;

procedure Inspect.30 (Inspect.143):
    ret Inspect.143;

procedure Inspect.30 (Inspect.143):
    ret Inspect.143;

procedure Inspect.31 (Inspect.299, Inspect.145):
    let Inspect.311 : U8 = GetTagId Inspect.299;
    switch Inspect.311:
        case 0:
            let Inspect.310 : Str = CallByName Inspect.200 Inspect.145 Inspect.299;
            ret Inspect.310;
    
        default:
            let Inspect.310 : Str = CallByName Inspect.202 Inspect.145 Inspect.299;
            ret Inspect.310;
    

procedure Inspect.31 (Inspect.299, Inspect.145):
    let Inspect.331 : Str = CallByName Inspect.246 Inspect.145 Inspect.299;
    ret Inspect.331;

procedure Inspect.33 (Inspect.148):
    let Inspect.301 : Str = CallByName Inspect.5 Inspect.148;
    let Inspect.300 : Str = CallByName Inspect.60 Inspect.301;
    ret Inspect.300;

procedure Inspect.35 (Inspect.297):
    let Inspect.307 : Str = "";
    ret Inspect.307;

procedure Inspect.39 (Inspect.198, Inspect.199):
    inc Inspect.199;
    let Inspect.337 : Int1 = CallByName List.1 Inspect.199;
    if Inspect.337 then
        dec Inspect.199;
        let Inspect.339 : [C Str, C Str List Str] = TagId(0) Inspect.198;
        let Inspect.338 : [C Str, C Str List Str] = CallByName Inspect.30 Inspect.339;
        ret Inspect.338;
    else
        let Inspect.313 : [C Str, C Str List Str] = TagId(1) Inspect.198 Inspect.199;
        let Inspect.312 : [C Str, C Str List Str] = CallByName Inspect.30 Inspect.313;
        ret Inspect.312;

procedure Inspect.43 (Inspect.245):
    let Inspect.352 : Str = CallByName Inspect.30 Inspect.245;
    ret Inspect.352;

procedure Inspect.5 (Inspect.146):
    let Inspect.308 : {Str, Str} = CallByName #Derived.0 Inspect.146;
    let Inspect.305 : {} = Struct {};
    let Inspect.304 : Str = CallByName Inspect.35 Inspect.305;
    let Inspect.303 : Str = CallByName #Derived.4 Inspect.304 Inspect.308;
    ret Inspect.303;

procedure Inspect.59 (Inspect.296, Inspect.292):
    let Inspect.320 : Str = CallByName Str.3 Inspect.296 Inspect.292;
    dec Inspect.292;
    ret Inspect.320;

procedure Inspect.60 (Inspect.298):
    ret Inspect.298;

procedure List.1 (List.106):
    let List.585 : U64 = CallByName List.6 List.106;
    dec List.106;
    let List.586 : U64 = 0i64;
    let List.584 : Int1 = CallByName Bool.11 List.585 List.586;
    ret List.584;

procedure List.18 (List.159, List.160, List.161):
    let List.573 : U64 = 0i64;
    let List.574 : U64 = CallByName List.6 List.159;
    let List.572 : Str = CallByName List.91 List.159 List.160 List.161 List.573 List.574;
    ret List.572;

procedure List.6 (#Attr.2):
    let List.583 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.583;

procedure List.66 (#Attr.2, #Attr.3):
    let List.582 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.582;

procedure List.91 (#Derived_gen.13, #Derived_gen.14, #Derived_gen.15, #Derived_gen.16, #Derived_gen.17):
    joinpoint List.575 List.162 List.163 List.164 List.165 List.166:
        let List.577 : Int1 = CallByName Num.22 List.165 List.166;
        if List.577 then
            let List.581 : Str = CallByName List.66 List.162 List.165;
            inc List.581;
            let List.167 : Str = CallByName Inspect.206 List.163 List.581;
            let List.580 : U64 = 1i64;
            let List.579 : U64 = CallByName Num.51 List.165 List.580;
            jump List.575 List.162 List.167 List.164 List.579 List.166;
        else
            dec List.162;
            ret List.163;
    in
    jump List.575 #Derived_gen.13 #Derived_gen.14 #Derived_gen.15 #Derived_gen.16 #Derived_gen.17;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.280 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.280;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.279 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.279;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.232 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.232;

procedure Test.0 ():
    let Test.5 : Str = "foo";
    let Test.4 : Str = "foo";
    let Test.1 : {Str, Str} = Struct {Test.4, Test.5};
    let Test.3 : Str = CallByName Inspect.33 Test.1;
    ret Test.3;
