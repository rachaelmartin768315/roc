procedure List.6 (#Attr.2):
<<<<<<< HEAD
<<<<<<< HEAD
    let List.284 : U64 = lowlevel ListLen #Attr.2;
    ret List.284;

procedure List.6 (#Attr.2):
    let List.285 : U64 = lowlevel ListLen #Attr.2;
    ret List.285;
=======
<<<<<<< HEAD:crates/compiler/test_mono/generated/list_len.txt
    let List.259 : U64 = lowlevel ListLen #Attr.2;
    ret List.259;

procedure List.6 (#Attr.2):
    let List.260 : U64 = lowlevel ListLen #Attr.2;
    ret List.260;
=======
    let List.213 : U64 = lowlevel ListLen #Attr.2;
    ret List.213;

procedure List.6 (#Attr.2):
    let List.214 : U64 = lowlevel ListLen #Attr.2;
    ret List.214;
>>>>>>> a5fc399f4 (Rename multimorphic tests to capture niche):compiler/test_mono/generated/list_len.txt
>>>>>>> 25bb3751b (Rename multimorphic tests to capture niche)
=======
    let List.238 : U64 = lowlevel ListLen #Attr.2;
    ret List.238;

procedure List.6 (#Attr.2):
    let List.239 : U64 = lowlevel ListLen #Attr.2;
    ret List.239;
>>>>>>> 61fcac491 (Fix mono tests)

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.188 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.188;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.2 : List Float64 = Array [1f64];
    let Test.4 : U64 = CallByName List.6 Test.1;
    dec Test.1;
    let Test.5 : U64 = CallByName List.6 Test.2;
    dec Test.2;
    let Test.3 : U64 = CallByName Num.19 Test.4 Test.5;
    ret Test.3;
