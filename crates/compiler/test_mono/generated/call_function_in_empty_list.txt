procedure List.18 (List.167, List.168, List.169):
    let List.630 : U64 = 0i64;
    let List.631 : U64 = CallByName List.6 List.167;
    let List.629 : List {} = CallByName List.96 List.167 List.168 List.169 List.630 List.631;
    ret List.629;

procedure List.279 (List.280, List.281, List.277):
    let List.643 : {} = CallByName Test.2 List.281;
    let List.642 : List {} = CallByName List.71 List.280 List.643;
    ret List.642;

procedure List.5 (List.276, List.277):
    let List.278 : U64 = CallByName List.6 List.276;
    let List.627 : List {} = CallByName List.68 List.278;
    let List.626 : List {} = CallByName List.18 List.276 List.627 List.277;
    ret List.626;

procedure List.6 (#Attr.2):
    let List.640 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.640;

procedure List.66 (#Attr.2, #Attr.3):
    let List.639 : [] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.639;

procedure List.68 (#Attr.2):
    let List.645 : List {} = lowlevel ListWithCapacity #Attr.2;
    ret List.645;

procedure List.71 (#Attr.2, #Attr.3):
    let List.644 : List {} = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.644;

procedure List.96 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.632 List.170 List.171 List.172 List.173 List.174:
        let List.634 : Int1 = CallByName Num.22 List.173 List.174;
        if List.634 then
            let List.638 : [] = CallByName List.66 List.170 List.173;
            let List.175 : List {} = CallByName List.279 List.171 List.638 List.172;
            let List.637 : U64 = 1i64;
            let List.636 : U64 = CallByName Num.51 List.173 List.637;
            jump List.632 List.170 List.175 List.172 List.636 List.174;
        else
            dec List.170;
            ret List.171;
    in
    inc #Derived_gen.0;
    jump List.632 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.2 (Test.3):
    let Test.7 : {} = Struct {};
    let Test.8 : Str = "a Lambda Set is empty. Most likely there is a type error in your program.";
    Crash Test.8

procedure Test.0 ():
    let Test.1 : List [] = Array [];
    let Test.5 : {} = Struct {};
    let Test.4 : List {} = CallByName List.5 Test.1 Test.5;
    dec Test.1;
    ret Test.4;
