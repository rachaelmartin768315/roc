procedure List.9 (#Attr.2):
    let List.158 : U64 = 0i64;
    let List.159 : U64 = lowlevel ListLen #Attr.2;
    let List.154 : Int1 = lowlevel NotEq List.158 List.159;
    if List.154 then
        let List.157 : U64 = 0i64;
        let List.156 : I64 = lowlevel ListGetUnsafe #Attr.2 List.157;
        let List.155 : [C Int1, C I64] = Ok List.156;
        ret List.155;
    else
        let List.153 : Int1 = true;
        let List.152 : [C Int1, C I64] = Err List.153;
        ret List.152;

procedure Str.27 (#Attr.2):
    let #Attr.3 : {I64, U8} = lowlevel StrToNum #Attr.2;
    let Str.70 : U8 = StructAtIndex 1 #Attr.3;
    let Str.71 : U8 = 0i64;
    let Str.67 : Int1 = lowlevel NumGt Str.70 Str.71;
    if Str.67 then
        let Str.69 : Int1 = false;
        let Str.68 : [C Int1, C I64] = Err Str.69;
        ret Str.68;
    else
        let Str.66 : I64 = StructAtIndex 0 #Attr.3;
        let Str.65 : [C Int1, C I64] = Ok Str.66;
        ret Str.65;

procedure Test.0 ():
    let Test.4 : Int1 = true;
    if Test.4 then
        let Test.6 : List I64 = Array [];
        let Test.5 : [C Int1, C I64] = CallByName List.9 Test.6;
        dec Test.6;
        ret Test.5;
    else
        let Test.3 : Str = "";
        let Test.2 : [C Int1, C I64] = CallByName Str.27 Test.3;
        dec Test.3;
        ret Test.2;
