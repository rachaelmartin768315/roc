procedure Dict.1 (Dict.515):
    let Dict.518 : List {[], []} = Array [];
    let Dict.525 : U64 = 0i64;
    let Dict.526 : U64 = 8i64;
    let Dict.519 : List U64 = CallByName List.11 Dict.525 Dict.526;
    let Dict.522 : I8 = CallByName Dict.34;
    let Dict.523 : U64 = 8i64;
    let Dict.520 : List I8 = CallByName List.11 Dict.522 Dict.523;
    let Dict.521 : U64 = 0i64;
    let Dict.517 : {List {[], []}, List U64, List I8, U64} = Struct {Dict.518, Dict.519, Dict.520, Dict.521};
    ret Dict.517;

procedure Dict.34 ():
    let Dict.524 : I8 = -128i64;
    ret Dict.524;

procedure Dict.4 (Dict.504):
    let Dict.85 : U64 = StructAtIndex 3 Dict.504;
    let #Derived_gen.2 : List {[], []} = StructAtIndex 0 Dict.504;
    dec #Derived_gen.2;
    let #Derived_gen.1 : List U64 = StructAtIndex 1 Dict.504;
    dec #Derived_gen.1;
    let #Derived_gen.0 : List I8 = StructAtIndex 2 Dict.504;
    dec #Derived_gen.0;
    ret Dict.85;

procedure List.11 (List.115, List.116):
    let List.495 : List I8 = CallByName List.68 List.116;
    let List.494 : List I8 = CallByName List.82 List.115 List.116 List.495;
    ret List.494;

procedure List.11 (List.115, List.116):
    let List.507 : List U64 = CallByName List.68 List.116;
    let List.506 : List U64 = CallByName List.82 List.115 List.116 List.507;
    ret List.506;

procedure List.68 (#Attr.2):
    let List.505 : List I8 = lowlevel ListWithCapacity #Attr.2;
    ret List.505;

procedure List.68 (#Attr.2):
    let List.517 : List U64 = lowlevel ListWithCapacity #Attr.2;
    ret List.517;

procedure List.71 (#Attr.2, #Attr.3):
    let List.502 : List I8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.502;

procedure List.71 (#Attr.2, #Attr.3):
    let List.514 : List U64 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.514;

procedure List.82 (List.518, List.519, List.520):
    joinpoint List.496 List.117 List.118 List.119:
        let List.504 : U64 = 0i64;
        let List.498 : Int1 = CallByName Num.24 List.118 List.504;
        if List.498 then
            let List.503 : U64 = 1i64;
            let List.500 : U64 = CallByName Num.20 List.118 List.503;
            let List.501 : List I8 = CallByName List.71 List.119 List.117;
            jump List.496 List.117 List.500 List.501;
        else
            ret List.119;
    in
    jump List.496 List.518 List.519 List.520;

procedure List.82 (List.526, List.527, List.528):
    joinpoint List.508 List.117 List.118 List.119:
        let List.516 : U64 = 0i64;
        let List.510 : Int1 = CallByName Num.24 List.118 List.516;
        if List.510 then
            let List.515 : U64 = 1i64;
            let List.512 : U64 = CallByName Num.20 List.118 List.515;
            let List.513 : List U64 = CallByName List.71 List.119 List.117;
            jump List.508 List.117 List.512 List.513;
        else
            ret List.119;
    in
    jump List.508 List.526 List.527 List.528;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.279 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.279;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.281 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.0 ():
    let Test.3 : {} = Struct {};
    let Test.2 : {List {[], []}, List U64, List I8, U64} = CallByName Dict.1 Test.3;
    let Test.1 : U64 = CallByName Dict.4 Test.2;
    ret Test.1;
