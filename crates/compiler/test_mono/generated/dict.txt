procedure Dict.1 (Dict.556):
    let Dict.565 : List {[], []} = Array [];
    let Dict.572 : U64 = 0i64;
    let Dict.573 : U64 = 8i64;
    let Dict.566 : List U64 = CallByName List.11 Dict.572 Dict.573;
    let Dict.569 : I8 = CallByName Dict.39;
    let Dict.570 : U64 = 8i64;
    let Dict.567 : List I8 = CallByName List.11 Dict.569 Dict.570;
    let Dict.568 : U64 = 0i64;
    let Dict.564 : {List {[], []}, List U64, List I8, U64} = Struct {Dict.565, Dict.566, Dict.567, Dict.568};
    ret Dict.564;

procedure Dict.39 ():
    let Dict.571 : I8 = -128i64;
    ret Dict.571;

procedure Dict.4 (Dict.562):
    let Dict.100 : U64 = StructAtIndex 3 Dict.562;
    let #Derived_gen.8 : List {[], []} = StructAtIndex 0 Dict.562;
    dec #Derived_gen.8;
    let #Derived_gen.7 : List U64 = StructAtIndex 1 Dict.562;
    dec #Derived_gen.7;
    let #Derived_gen.6 : List I8 = StructAtIndex 2 Dict.562;
    dec #Derived_gen.6;
    ret Dict.100;

procedure List.11 (List.121, List.122):
    let List.522 : List I8 = CallByName List.68 List.122;
    let List.521 : List I8 = CallByName List.83 List.121 List.122 List.522;
    ret List.521;

procedure List.11 (List.121, List.122):
    let List.534 : List U64 = CallByName List.68 List.122;
    let List.533 : List U64 = CallByName List.83 List.121 List.122 List.534;
    ret List.533;

procedure List.68 (#Attr.2):
    let List.532 : List I8 = lowlevel ListWithCapacity #Attr.2;
    ret List.532;

procedure List.68 (#Attr.2):
    let List.544 : List U64 = lowlevel ListWithCapacity #Attr.2;
    ret List.544;

procedure List.71 (#Attr.2, #Attr.3):
    let List.529 : List I8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.529;

procedure List.71 (#Attr.2, #Attr.3):
    let List.541 : List U64 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.541;

procedure List.83 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2):
    joinpoint List.535 List.123 List.124 List.125:
        let List.543 : U64 = 0i64;
        let List.537 : Int1 = CallByName Num.24 List.124 List.543;
        if List.537 then
            let List.542 : U64 = 1i64;
            let List.539 : U64 = CallByName Num.20 List.124 List.542;
            let List.540 : List U64 = CallByName List.71 List.125 List.123;
            jump List.535 List.123 List.539 List.540;
        else
            ret List.125;
    in
    jump List.535 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2;

procedure List.83 (#Derived_gen.3, #Derived_gen.4, #Derived_gen.5):
    joinpoint List.523 List.123 List.124 List.125:
        let List.531 : U64 = 0i64;
        let List.525 : Int1 = CallByName Num.24 List.124 List.531;
        if List.525 then
            let List.530 : U64 = 1i64;
            let List.527 : U64 = CallByName Num.20 List.124 List.530;
            let List.528 : List I8 = CallByName List.71 List.125 List.123;
            jump List.523 List.123 List.527 List.528;
        else
            ret List.125;
    in
    jump List.523 #Derived_gen.3 #Derived_gen.4 #Derived_gen.5;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.293;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.295 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.295;

procedure Test.0 ():
    let Test.3 : {} = Struct {};
    let Test.2 : {List {[], []}, List U64, List I8, U64} = CallByName Dict.1 Test.3;
    let Test.1 : U64 = CallByName Dict.4 Test.2;
    ret Test.1;
