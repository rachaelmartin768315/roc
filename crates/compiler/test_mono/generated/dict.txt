procedure Dict.1 (Dict.556):
    let Dict.565 : List {[], []} = Array [];
    let Dict.572 : U64 = 0i64;
    let Dict.573 : U64 = 8i64;
    let Dict.566 : List U64 = CallByName List.11 Dict.572 Dict.573;
    let Dict.569 : I8 = CallByName Dict.39;
    let Dict.570 : U64 = 8i64;
    let Dict.567 : List I8 = CallByName List.11 Dict.569 Dict.570;
    let Dict.568 : U64 = 0i64;
    let Dict.564 : {List {[], []}, List U64, List I8, U64} = Struct {Dict.565, Dict.566, Dict.567, Dict.568};
    ret Dict.564;

procedure Dict.39 ():
    let Dict.571 : I8 = -128i64;
    ret Dict.571;

procedure Dict.4 (Dict.562):
    let Dict.100 : U64 = StructAtIndex 3 Dict.562;
    let #Derived_gen.8 : List {[], []} = StructAtIndex 0 Dict.562;
    dec #Derived_gen.8;
    let #Derived_gen.7 : List U64 = StructAtIndex 1 Dict.562;
    dec #Derived_gen.7;
    let #Derived_gen.6 : List I8 = StructAtIndex 2 Dict.562;
    dec #Derived_gen.6;
    ret Dict.100;

procedure List.11 (List.124, List.125):
    let List.535 : List I8 = CallByName List.68 List.125;
    let List.534 : List I8 = CallByName List.84 List.124 List.125 List.535;
    ret List.534;

procedure List.11 (List.124, List.125):
    let List.547 : List U64 = CallByName List.68 List.125;
    let List.546 : List U64 = CallByName List.84 List.124 List.125 List.547;
    ret List.546;

procedure List.68 (#Attr.2):
    let List.545 : List I8 = lowlevel ListWithCapacity #Attr.2;
    ret List.545;

procedure List.68 (#Attr.2):
    let List.557 : List U64 = lowlevel ListWithCapacity #Attr.2;
    ret List.557;

procedure List.71 (#Attr.2, #Attr.3):
    let List.542 : List I8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.542;

procedure List.71 (#Attr.2, #Attr.3):
    let List.554 : List U64 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.554;

procedure List.84 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2):
    joinpoint List.536 List.126 List.127 List.128:
        let List.544 : U64 = 0i64;
        let List.538 : Int1 = CallByName Num.24 List.127 List.544;
        if List.538 then
            let List.543 : U64 = 1i64;
            let List.540 : U64 = CallByName Num.20 List.127 List.543;
            let List.541 : List I8 = CallByName List.71 List.128 List.126;
            jump List.536 List.126 List.540 List.541;
        else
            ret List.128;
    in
    jump List.536 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2;

procedure List.84 (#Derived_gen.3, #Derived_gen.4, #Derived_gen.5):
    joinpoint List.548 List.126 List.127 List.128:
        let List.556 : U64 = 0i64;
        let List.550 : Int1 = CallByName Num.24 List.127 List.556;
        if List.550 then
            let List.555 : U64 = 1i64;
            let List.552 : U64 = CallByName Num.20 List.127 List.555;
            let List.553 : List U64 = CallByName List.71 List.128 List.126;
            jump List.548 List.126 List.552 List.553;
        else
            ret List.128;
    in
    jump List.548 #Derived_gen.3 #Derived_gen.4 #Derived_gen.5;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.293;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.295 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.295;

procedure Test.0 ():
    let Test.3 : {} = Struct {};
    let Test.2 : {List {[], []}, List U64, List I8, U64} = CallByName Dict.1 Test.3;
    let Test.1 : U64 = CallByName Dict.4 Test.2;
    ret Test.1;
