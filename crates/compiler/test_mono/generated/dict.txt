procedure Dict.1 (Dict.556):
    let Dict.565 : List {[], []} = Array [];
    let Dict.572 : U64 = 0i64;
    let Dict.573 : U64 = 8i64;
    let Dict.566 : List U64 = CallByName List.11 Dict.572 Dict.573;
    let Dict.569 : I8 = CallByName Dict.39;
    let Dict.570 : U64 = 8i64;
    let Dict.567 : List I8 = CallByName List.11 Dict.569 Dict.570;
    let Dict.568 : U64 = 0i64;
    let Dict.564 : {List {[], []}, List U64, List I8, U64} = Struct {Dict.565, Dict.566, Dict.567, Dict.568};
    ret Dict.564;

procedure Dict.39 ():
    let Dict.571 : I8 = -128i64;
    ret Dict.571;

procedure Dict.4 (Dict.562):
    let Dict.100 : U64 = StructAtIndex 3 Dict.562;
    let #Derived_gen.8 : List {[], []} = StructAtIndex 0 Dict.562;
    dec #Derived_gen.8;
    let #Derived_gen.7 : List U64 = StructAtIndex 1 Dict.562;
    dec #Derived_gen.7;
    let #Derived_gen.6 : List I8 = StructAtIndex 2 Dict.562;
    dec #Derived_gen.6;
    ret Dict.100;

procedure List.11 (List.123, List.124):
    let List.527 : List I8 = CallByName List.68 List.124;
    let List.526 : List I8 = CallByName List.83 List.123 List.124 List.527;
    ret List.526;

procedure List.11 (List.123, List.124):
    let List.540 : List U64 = CallByName List.68 List.124;
    let List.539 : List U64 = CallByName List.83 List.123 List.124 List.540;
    ret List.539;

procedure List.68 (#Attr.2):
    let List.538 : List I8 = lowlevel ListWithCapacity #Attr.2;
    ret List.538;

procedure List.68 (#Attr.2):
    let List.549 : List U64 = lowlevel ListWithCapacity #Attr.2;
    ret List.549;

procedure List.71 (#Attr.2, #Attr.3):
    let List.534 : List I8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.534;

procedure List.71 (#Attr.2, #Attr.3):
    let List.547 : List U64 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.547;

procedure List.83 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2):
    joinpoint List.528 List.125 List.126 List.127:
        let List.537 : U64 = 0i64;
        let List.530 : Int1 = CallByName Num.24 List.126 List.537;
        if List.530 then
            let List.532 : U64 = CallByName List.97 List.126;
            let List.533 : List I8 = CallByName List.71 List.127 List.125;
            jump List.528 List.125 List.532 List.533;
        else
            ret List.127;
    in
    jump List.528 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2;

procedure List.83 (#Derived_gen.3, #Derived_gen.4, #Derived_gen.5):
    joinpoint List.541 List.125 List.126 List.127:
        let List.548 : U64 = 0i64;
        let List.543 : Int1 = CallByName Num.24 List.126 List.548;
        if List.543 then
            let List.545 : U64 = CallByName List.97 List.126;
            let List.546 : List U64 = CallByName List.71 List.127 List.125;
            jump List.541 List.125 List.545 List.546;
        else
            ret List.127;
    in
    jump List.541 #Derived_gen.3 #Derived_gen.4 #Derived_gen.5;

procedure List.97 (List.464):
    let List.536 : U64 = 1i64;
    let List.535 : U64 = CallByName Num.75 List.464 List.536;
    ret List.535;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.294 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.75 (#Attr.2, #Attr.3):
    let Num.292 : U64 = lowlevel NumSubWrap #Attr.2 #Attr.3;
    ret Num.292;

procedure Test.0 ():
    let Test.3 : {} = Struct {};
    let Test.2 : {List {[], []}, List U64, List I8, U64} = CallByName Dict.1 Test.3;
    let Test.1 : U64 = CallByName Dict.4 Test.2;
    ret Test.1;
