procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Str, Str} = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.4 (#Derived.5, #Derived.6, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.5 #Derived_gen.4 #Derived.6;
        ret #Derived_gen.3;
    in
    let #Derived.2 : Str = StructAtIndex 0 #Derived.1;
    inc #Derived.2;
    let #Derived.3 : Str = StructAtIndex 1 #Derived.1;
    inc #Derived.3;
    dec #Derived.1;
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Json.24 #Derived.2;
    let #Derived_gen.10 : Str = CallByName Json.24 #Derived.3;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9, #Derived_gen.10];
    let #Derived_gen.6 : {Str, List Str} = CallByName Json.28 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.4 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Json.207 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.122 : List U8 = CallByName Json.165 Encode.99 Encode.101 Encode.107;
    ret Encode.122;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {Str, Str} = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.995 : [C , C [], C , C , C , C ] = TagId(2) ;
    ret Json.995;

procedure Json.165 (Json.166, Json.1015, Json.164):
    let Json.1024 : I64 = 34i64;
    let Json.1023 : U8 = CallByName Num.127 Json.1024;
    let Json.1021 : List U8 = CallByName List.4 Json.166 Json.1023;
    let Json.1022 : List U8 = CallByName Str.12 Json.164;
    let Json.1018 : List U8 = CallByName List.8 Json.1021 Json.1022;
    let Json.1020 : I64 = 34i64;
    let Json.1019 : U8 = CallByName Num.127 Json.1020;
    let Json.1017 : List U8 = CallByName List.4 Json.1018 Json.1019;
    ret Json.1017;

procedure Json.207 (Json.208, Json.972, #Attr.12):
    let Json.206 : List Str = StructAtIndex 1 #Attr.12;
    inc Json.206;
    let Json.205 : Str = StructAtIndex 0 #Attr.12;
    inc Json.205;
    dec #Attr.12;
    let Json.1012 : I64 = 123i64;
    let Json.1011 : U8 = CallByName Num.127 Json.1012;
    let Json.1008 : List U8 = CallByName List.4 Json.208 Json.1011;
    let Json.1010 : I64 = 34i64;
    let Json.1009 : U8 = CallByName Num.127 Json.1010;
    let Json.1006 : List U8 = CallByName List.4 Json.1008 Json.1009;
    let Json.1007 : List U8 = CallByName Str.12 Json.205;
    let Json.1003 : List U8 = CallByName List.8 Json.1006 Json.1007;
    let Json.1005 : I64 = 34i64;
    let Json.1004 : U8 = CallByName Num.127 Json.1005;
    let Json.1000 : List U8 = CallByName List.4 Json.1003 Json.1004;
    let Json.1002 : I64 = 58i64;
    let Json.1001 : U8 = CallByName Num.127 Json.1002;
    let Json.997 : List U8 = CallByName List.4 Json.1000 Json.1001;
    let Json.999 : I64 = 91i64;
    let Json.998 : U8 = CallByName Num.127 Json.999;
    let Json.210 : List U8 = CallByName List.4 Json.997 Json.998;
    let Json.996 : U64 = CallByName List.6 Json.206;
    let Json.982 : {List U8, U64} = Struct {Json.210, Json.996};
    let Json.983 : {} = Struct {};
    let Json.981 : {List U8, U64} = CallByName List.18 Json.206 Json.982 Json.983;
    let Json.212 : List U8 = StructAtIndex 0 Json.981;
    inc Json.212;
    dec Json.981;
    let Json.980 : I64 = 93i64;
    let Json.979 : U8 = CallByName Num.127 Json.980;
    let Json.976 : List U8 = CallByName List.4 Json.212 Json.979;
    let Json.978 : I64 = 125i64;
    let Json.977 : U8 = CallByName Num.127 Json.978;
    let Json.975 : List U8 = CallByName List.4 Json.976 Json.977;
    ret Json.975;

procedure Json.209 (Json.974, Json.215):
    let Json.213 : List U8 = StructAtIndex 0 Json.974;
    inc Json.213;
    let Json.214 : U64 = StructAtIndex 1 Json.974;
    dec Json.974;
    let Json.993 : [C , C [], C , C , C , C ] = CallByName Json.1;
    let Json.216 : List U8 = CallByName Encode.24 Json.213 Json.215 Json.993;
    joinpoint Json.988 Json.217:
        let Json.986 : U64 = 1i64;
        let Json.985 : U64 = CallByName Num.20 Json.214 Json.986;
        let Json.984 : {List U8, U64} = Struct {Json.217, Json.985};
        ret Json.984;
    in
    let Json.992 : U64 = 1i64;
    let Json.989 : Int1 = CallByName Num.24 Json.214 Json.992;
    if Json.989 then
        let Json.991 : I64 = 44i64;
        let Json.990 : U8 = CallByName Num.127 Json.991;
        let Json.987 : List U8 = CallByName List.4 Json.216 Json.990;
        jump Json.988 Json.987;
    else
        jump Json.988 Json.216;

procedure Json.24 (Json.164):
    let Json.1025 : Str = CallByName Encode.23 Json.164;
    ret Json.1025;

procedure Json.28 (Json.205, Json.206):
    let Json.971 : {Str, List Str} = Struct {Json.205, Json.206};
    let Json.970 : {Str, List Str} = CallByName Encode.23 Json.971;
    ret Json.970;

procedure List.139 (List.140, List.141, List.138):
    let List.547 : {List U8, U64} = CallByName Json.209 List.140 List.141;
    ret List.547;

procedure List.18 (List.136, List.137, List.138):
    let List.528 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.528;

procedure List.4 (List.107, List.108):
    let List.527 : U64 = 1i64;
    let List.526 : List U8 = CallByName List.70 List.107 List.527;
    let List.525 : List U8 = CallByName List.71 List.526 List.108;
    ret List.525;

procedure List.6 (#Attr.2):
    let List.494 : U64 = lowlevel ListLen #Attr.2;
    ret List.494;

procedure List.6 (#Attr.2):
    let List.548 : U64 = lowlevel ListLen #Attr.2;
    ret List.548;

procedure List.66 (#Attr.2, #Attr.3):
    let List.544 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.544;

procedure List.70 (#Attr.2, #Attr.3):
    let List.500 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.500;

procedure List.71 (#Attr.2, #Attr.3):
    let List.498 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.498;

procedure List.8 (#Attr.2, #Attr.3):
    let List.550 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.550;

procedure List.80 (List.560, List.561, List.562, List.563, List.564):
    joinpoint List.534 List.433 List.434 List.435 List.436 List.437:
        let List.536 : Int1 = CallByName Num.22 List.436 List.437;
        if List.536 then
            let List.543 : Str = CallByName List.66 List.433 List.436;
            let List.537 : {List U8, U64} = CallByName List.139 List.434 List.543 List.435;
            let List.540 : U64 = 1i64;
            let List.539 : U64 = CallByName Num.19 List.436 List.540;
            jump List.534 List.433 List.537 List.435 List.539 List.437;
        else
            dec List.433;
            ret List.434;
    in
    jump List.534 List.560 List.561 List.562 List.563 List.564;

procedure List.92 (List.430, List.431, List.432):
    let List.532 : U64 = 0i64;
    let List.533 : U64 = CallByName List.6 List.430;
    let List.531 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.532 List.533;
    ret List.531;

procedure Num.127 (#Attr.2):
    let Num.284 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.284;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.287 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.287;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.288 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.286;

procedure Str.12 (#Attr.2):
    let Str.313 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.313;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.307 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.307;

procedure Str.9 (Str.79):
    let Str.305 : U64 = 0i64;
    let Str.306 : U64 = CallByName List.6 Str.79;
    let Str.80 : {U64, Str, Int1, U8} = CallByName Str.48 Str.79 Str.305 Str.306;
    let Str.302 : Int1 = StructAtIndex 2 Str.80;
    if Str.302 then
        let Str.304 : Str = StructAtIndex 1 Str.80;
        inc Str.304;
        dec Str.80;
        let Str.303 : [C {U64, U8}, C Str] = TagId(1) Str.304;
        ret Str.303;
    else
        let Str.300 : U8 = StructAtIndex 3 Str.80;
        let Str.301 : U64 = StructAtIndex 0 Str.80;
        dec Str.80;
        let Str.299 : {U64, U8} = Struct {Str.301, Str.300};
        let Str.298 : [C {U64, U8}, C Str] = TagId(0) Str.299;
        ret Str.298;

procedure Test.0 ():
    let Test.13 : Str = "foo";
    let Test.12 : Str = "foo";
    let Test.1 : {Str, Str} = Struct {Test.12, Test.13};
    let Test.11 : [C , C [], C , C , C , C ] = CallByName Json.1;
    let Test.10 : List U8 = CallByName Encode.26 Test.1 Test.11;
    let Test.2 : [C {U64, U8}, C Str] = CallByName Str.9 Test.10;
    let Test.7 : U8 = 1i64;
    let Test.8 : U8 = GetTagId Test.2;
    let Test.9 : Int1 = lowlevel Eq Test.7 Test.8;
    if Test.9 then
        let Test.4 : Str = UnionAtIndex (Id 1) (Index 0) Test.2;
        inc Test.4;
        dec Test.2;
        ret Test.4;
    else
        dec Test.2;
        let Test.6 : Str = "<bad>";
        ret Test.6;
