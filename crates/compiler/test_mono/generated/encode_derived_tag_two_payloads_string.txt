procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Str, Str} = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.4 (#Derived.5, #Derived.6, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.5 #Derived_gen.4 #Derived.6;
        ret #Derived_gen.3;
    in
    let #Derived.2 : Str = StructAtIndex 0 #Derived.1;
    let #Derived.3 : Str = StructAtIndex 1 #Derived.1;
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Json.24 #Derived.2;
    let #Derived_gen.10 : Str = CallByName Json.24 #Derived.3;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9, #Derived_gen.10];
    let #Derived_gen.6 : {Str, List Str} = CallByName Json.31 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.4 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Json.263 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.122 : List U8 = CallByName Json.181 Encode.99 Encode.101 Encode.107;
    ret Encode.122;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {Str, Str} = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.1171 : [C , C [], C , C , C , C ] = TagId(2) ;
    ret Json.1171;

procedure Json.181 (Json.182, Json.1215, Json.180):
    let Json.1218 : List U8 = CallByName Json.25 Json.180;
    let Json.1217 : List U8 = CallByName List.8 Json.182 Json.1218;
    ret Json.1217;

procedure Json.188 (Json.1266, Json.191):
    let Json.189 : U64 = StructAtIndex 0 Json.1266;
    let Json.190 : Int1 = StructAtIndex 1 Json.1266;
    switch Json.191:
        case 34:
            let Json.1269 : Int1 = false;
            let Json.1268 : {U64, Int1} = Struct {Json.189, Json.1269};
            let Json.1267 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1268;
            ret Json.1267;
    
        case 92:
            let Json.1272 : Int1 = false;
            let Json.1271 : {U64, Int1} = Struct {Json.189, Json.1272};
            let Json.1270 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1271;
            ret Json.1270;
    
        case 47:
            let Json.1275 : Int1 = false;
            let Json.1274 : {U64, Int1} = Struct {Json.189, Json.1275};
            let Json.1273 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1274;
            ret Json.1273;
    
        case 8:
            let Json.1278 : Int1 = false;
            let Json.1277 : {U64, Int1} = Struct {Json.189, Json.1278};
            let Json.1276 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1277;
            ret Json.1276;
    
        case 12:
            let Json.1281 : Int1 = false;
            let Json.1280 : {U64, Int1} = Struct {Json.189, Json.1281};
            let Json.1279 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1280;
            ret Json.1279;
    
        case 10:
            let Json.1284 : Int1 = false;
            let Json.1283 : {U64, Int1} = Struct {Json.189, Json.1284};
            let Json.1282 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1283;
            ret Json.1282;
    
        case 13:
            let Json.1287 : Int1 = false;
            let Json.1286 : {U64, Int1} = Struct {Json.189, Json.1287};
            let Json.1285 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1286;
            ret Json.1285;
    
        case 9:
            let Json.1290 : Int1 = false;
            let Json.1289 : {U64, Int1} = Struct {Json.189, Json.1290};
            let Json.1288 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1289;
            ret Json.1288;
    
        default:
            let Json.1294 : U64 = 1i64;
            let Json.1293 : U64 = CallByName Num.19 Json.189 Json.1294;
            let Json.1292 : {U64, Int1} = Struct {Json.1293, Json.190};
            let Json.1291 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) Json.1292;
            ret Json.1291;
    

procedure Json.214 (Json.215, Json.216):
    let Json.1237 : List U8 = CallByName Json.26 Json.216;
    let Json.1236 : List U8 = CallByName List.8 Json.215 Json.1237;
    ret Json.1236;

procedure Json.24 (Json.180):
    let Json.1297 : Str = CallByName Encode.23 Json.180;
    ret Json.1297;

procedure Json.25 (Json.183):
    let Json.184 : List U8 = CallByName Str.12 Json.183;
    let Json.1295 : U64 = 0i64;
    let Json.1296 : Int1 = true;
    let Json.185 : {U64, Int1} = Struct {Json.1295, Json.1296};
    let Json.1265 : {} = Struct {};
    inc Json.184;
    let Json.186 : {U64, Int1} = CallByName List.26 Json.184 Json.185 Json.1265;
    let Json.1219 : Int1 = StructAtIndex 1 Json.186;
    let Json.1263 : Int1 = true;
    let Json.1264 : Int1 = lowlevel Eq Json.1263 Json.1219;
    if Json.1264 then
        let Json.1229 : U64 = CallByName List.6 Json.184;
        let Json.1230 : U64 = 2i64;
        let Json.1228 : U64 = CallByName Num.19 Json.1229 Json.1230;
        let Json.1225 : List U8 = CallByName List.68 Json.1228;
        let Json.1227 : U8 = 34i64;
        let Json.1226 : List U8 = Array [Json.1227];
        let Json.1224 : List U8 = CallByName List.8 Json.1225 Json.1226;
        let Json.1221 : List U8 = CallByName List.8 Json.1224 Json.184;
        let Json.1223 : U8 = 34i64;
        let Json.1222 : List U8 = Array [Json.1223];
        let Json.1220 : List U8 = CallByName List.8 Json.1221 Json.1222;
        ret Json.1220;
    else
        inc Json.184;
        let Json.1262 : U64 = StructAtIndex 0 Json.186;
        let Json.1261 : {List U8, List U8} = CallByName List.52 Json.184 Json.1262;
        let Json.210 : List U8 = StructAtIndex 0 Json.1261;
        let Json.212 : List U8 = StructAtIndex 1 Json.1261;
        let Json.1259 : U64 = CallByName List.6 Json.184;
        dec Json.184;
        let Json.1260 : U64 = 120i64;
        let Json.1257 : U64 = CallByName Num.21 Json.1259 Json.1260;
        let Json.1258 : U64 = 100i64;
        let Json.1256 : U64 = CallByName Num.94 Json.1257 Json.1258;
        let Json.1253 : List U8 = CallByName List.68 Json.1256;
        let Json.1255 : U8 = 34i64;
        let Json.1254 : List U8 = Array [Json.1255];
        let Json.1252 : List U8 = CallByName List.8 Json.1253 Json.1254;
        let Json.213 : List U8 = CallByName List.8 Json.1252 Json.210;
        let Json.1235 : {} = Struct {};
        let Json.1232 : List U8 = CallByName List.18 Json.212 Json.213 Json.1235;
        let Json.1234 : U8 = 34i64;
        let Json.1233 : List U8 = Array [Json.1234];
        let Json.1231 : List U8 = CallByName List.8 Json.1232 Json.1233;
        ret Json.1231;

procedure Json.26 (Json.217):
    switch Json.217:
        case 34:
            let Json.1238 : List U8 = Array [92i64, 34i64];
            ret Json.1238;
    
        case 92:
            let Json.1239 : List U8 = Array [92i64, 92i64];
            ret Json.1239;
    
        case 47:
            let Json.1240 : List U8 = Array [92i64, 47i64];
            ret Json.1240;
    
        case 8:
            let Json.1242 : U8 = 98i64;
            let Json.1241 : List U8 = Array [92i64, Json.1242];
            ret Json.1241;
    
        case 12:
            let Json.1244 : U8 = 102i64;
            let Json.1243 : List U8 = Array [92i64, Json.1244];
            ret Json.1243;
    
        case 10:
            let Json.1246 : U8 = 110i64;
            let Json.1245 : List U8 = Array [92i64, Json.1246];
            ret Json.1245;
    
        case 13:
            let Json.1248 : U8 = 114i64;
            let Json.1247 : List U8 = Array [92i64, Json.1248];
            ret Json.1247;
    
        case 9:
            let Json.1250 : U8 = 114i64;
            let Json.1249 : List U8 = Array [92i64, Json.1250];
            ret Json.1249;
    
        default:
            let Json.1251 : List U8 = Array [Json.217];
            ret Json.1251;
    

procedure Json.263 (Json.264, Json.1174, #Attr.12):
    let Json.262 : List Str = StructAtIndex 1 #Attr.12;
    let Json.261 : Str = StructAtIndex 0 #Attr.12;
    let Json.1212 : I64 = 123i64;
    let Json.1211 : U8 = CallByName Num.127 Json.1212;
    let Json.1208 : List U8 = CallByName List.4 Json.264 Json.1211;
    let Json.1210 : I64 = 34i64;
    let Json.1209 : U8 = CallByName Num.127 Json.1210;
    let Json.1206 : List U8 = CallByName List.4 Json.1208 Json.1209;
    let Json.1207 : List U8 = CallByName Str.12 Json.261;
    let Json.1203 : List U8 = CallByName List.8 Json.1206 Json.1207;
    let Json.1205 : I64 = 34i64;
    let Json.1204 : U8 = CallByName Num.127 Json.1205;
    let Json.1200 : List U8 = CallByName List.4 Json.1203 Json.1204;
    let Json.1202 : I64 = 58i64;
    let Json.1201 : U8 = CallByName Num.127 Json.1202;
    let Json.1197 : List U8 = CallByName List.4 Json.1200 Json.1201;
    let Json.1199 : I64 = 91i64;
    let Json.1198 : U8 = CallByName Num.127 Json.1199;
    let Json.267 : List U8 = CallByName List.4 Json.1197 Json.1198;
    let Json.1196 : U64 = CallByName List.6 Json.262;
    let Json.1184 : {List U8, U64} = Struct {Json.267, Json.1196};
    let Json.1183 : {List U8, U64} = CallByName List.18 Json.262 Json.1184 Json.1174;
    let Json.269 : List U8 = StructAtIndex 0 Json.1183;
    let Json.1182 : I64 = 93i64;
    let Json.1181 : U8 = CallByName Num.127 Json.1182;
    let Json.1178 : List U8 = CallByName List.4 Json.269 Json.1181;
    let Json.1180 : I64 = 125i64;
    let Json.1179 : U8 = CallByName Num.127 Json.1180;
    let Json.1177 : List U8 = CallByName List.4 Json.1178 Json.1179;
    ret Json.1177;

procedure Json.266 (Json.1176, Json.272, Json.265):
    let Json.270 : List U8 = StructAtIndex 0 Json.1176;
    let Json.271 : U64 = StructAtIndex 1 Json.1176;
    let Json.273 : List U8 = CallByName Encode.24 Json.270 Json.272 Json.265;
    joinpoint Json.1190 Json.274:
        let Json.1188 : U64 = 1i64;
        let Json.1187 : U64 = CallByName Num.20 Json.271 Json.1188;
        let Json.1186 : {List U8, U64} = Struct {Json.274, Json.1187};
        ret Json.1186;
    in
    let Json.1194 : U64 = 1i64;
    let Json.1191 : Int1 = CallByName Num.24 Json.271 Json.1194;
    if Json.1191 then
        let Json.1193 : I64 = 44i64;
        let Json.1192 : U8 = CallByName Num.127 Json.1193;
        let Json.1189 : List U8 = CallByName List.4 Json.273 Json.1192;
        jump Json.1190 Json.1189;
    else
        jump Json.1190 Json.273;

procedure Json.31 (Json.261, Json.262):
    let Json.1173 : {Str, List Str} = Struct {Json.261, Json.262};
    let Json.1172 : {Str, List Str} = CallByName Encode.23 Json.1173;
    ret Json.1172;

procedure List.145 (List.146, List.147, List.144):
    let List.568 : {List U8, U64} = CallByName Json.266 List.146 List.147 List.144;
    ret List.568;

procedure List.145 (List.146, List.147, List.144):
    let List.588 : List U8 = CallByName Json.214 List.146 List.147;
    ret List.588;

procedure List.18 (List.142, List.143, List.144):
    let List.549 : {List U8, U64} = CallByName List.93 List.142 List.143 List.144;
    ret List.549;

procedure List.18 (List.142, List.143, List.144):
    let List.569 : List U8 = CallByName List.93 List.142 List.143 List.144;
    ret List.569;

procedure List.26 (List.159, List.160, List.161):
    let List.619 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.93 List.159 List.160 List.161;
    let List.622 : U8 = 1i64;
    let List.623 : U8 = GetTagId List.619;
    let List.624 : Int1 = lowlevel Eq List.622 List.623;
    if List.624 then
        let List.162 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.619;
        ret List.162;
    else
        let List.163 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.619;
        ret List.163;

procedure List.4 (List.113, List.114):
    let List.548 : U64 = 1i64;
    let List.547 : List U8 = CallByName List.70 List.113 List.548;
    let List.546 : List U8 = CallByName List.71 List.547 List.114;
    ret List.546;

procedure List.49 (List.376, List.377):
    let List.611 : U64 = StructAtIndex 0 List.377;
    let List.612 : U64 = 0i64;
    let List.609 : Int1 = CallByName Bool.11 List.611 List.612;
    if List.609 then
        dec List.376;
        let List.610 : List U8 = Array [];
        ret List.610;
    else
        let List.606 : U64 = StructAtIndex 1 List.377;
        let List.607 : U64 = StructAtIndex 0 List.377;
        let List.605 : List U8 = CallByName List.72 List.376 List.606 List.607;
        ret List.605;

procedure List.52 (List.391, List.392):
    let List.393 : U64 = CallByName List.6 List.391;
    joinpoint List.617 List.394:
        let List.615 : U64 = 0i64;
        let List.614 : {U64, U64} = Struct {List.394, List.615};
        inc List.391;
        let List.395 : List U8 = CallByName List.49 List.391 List.614;
        let List.613 : U64 = CallByName Num.20 List.393 List.394;
        let List.604 : {U64, U64} = Struct {List.613, List.394};
        let List.396 : List U8 = CallByName List.49 List.391 List.604;
        let List.603 : {List U8, List U8} = Struct {List.395, List.396};
        ret List.603;
    in
    let List.618 : Int1 = CallByName Num.24 List.393 List.392;
    if List.618 then
        jump List.617 List.392;
    else
        jump List.617 List.393;

procedure List.6 (#Attr.2):
    let List.589 : U64 = lowlevel ListLen #Attr.2;
    ret List.589;

procedure List.6 (#Attr.2):
    let List.591 : U64 = lowlevel ListLen #Attr.2;
    ret List.591;

procedure List.66 (#Attr.2, #Attr.3):
    let List.565 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.565;

procedure List.66 (#Attr.2, #Attr.3):
    let List.585 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.585;

procedure List.68 (#Attr.2):
    let List.602 : List U8 = lowlevel ListWithCapacity #Attr.2;
    ret List.602;

procedure List.70 (#Attr.2, #Attr.3):
    let List.527 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.527;

procedure List.71 (#Attr.2, #Attr.3):
    let List.525 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.525;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.608 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.608;

procedure List.8 (#Attr.2, #Attr.3):
    let List.600 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.600;

procedure List.80 (List.649, List.650, List.651, List.652, List.653):
    joinpoint List.555 List.439 List.440 List.441 List.442 List.443:
        let List.557 : Int1 = CallByName Num.22 List.442 List.443;
        if List.557 then
            let List.564 : Str = CallByName List.66 List.439 List.442;
            inc List.564;
            let List.558 : {List U8, U64} = CallByName List.145 List.440 List.564 List.441;
            let List.561 : U64 = 1i64;
            let List.560 : U64 = CallByName Num.19 List.442 List.561;
            jump List.555 List.439 List.558 List.441 List.560 List.443;
        else
            dec List.439;
            ret List.440;
    in
    jump List.555 List.649 List.650 List.651 List.652 List.653;

procedure List.80 (List.666, List.667, List.668, List.669, List.670):
    joinpoint List.575 List.439 List.440 List.441 List.442 List.443:
        let List.577 : Int1 = CallByName Num.22 List.442 List.443;
        if List.577 then
            let List.584 : U8 = CallByName List.66 List.439 List.442;
            let List.578 : List U8 = CallByName List.145 List.440 List.584 List.441;
            let List.581 : U64 = 1i64;
            let List.580 : U64 = CallByName Num.19 List.442 List.581;
            jump List.575 List.439 List.578 List.441 List.580 List.443;
        else
            dec List.439;
            ret List.440;
    in
    jump List.575 List.666 List.667 List.668 List.669 List.670;

procedure List.80 (List.693, List.694, List.695, List.696, List.697):
    joinpoint List.628 List.439 List.440 List.441 List.442 List.443:
        let List.630 : Int1 = CallByName Num.22 List.442 List.443;
        if List.630 then
            let List.639 : U8 = CallByName List.66 List.439 List.442;
            let List.631 : [C {U64, Int1}, C {U64, Int1}] = CallByName Json.188 List.440 List.639;
            let List.636 : U8 = 1i64;
            let List.637 : U8 = GetTagId List.631;
            let List.638 : Int1 = lowlevel Eq List.636 List.637;
            if List.638 then
                let List.444 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.631;
                let List.634 : U64 = 1i64;
                let List.633 : U64 = CallByName Num.19 List.442 List.634;
                jump List.628 List.439 List.444 List.441 List.633 List.443;
            else
                dec List.439;
                let List.445 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.631;
                let List.635 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) List.445;
                ret List.635;
        else
            dec List.439;
            let List.629 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) List.440;
            ret List.629;
    in
    jump List.628 List.693 List.694 List.695 List.696 List.697;

procedure List.93 (List.436, List.437, List.438):
    let List.553 : U64 = 0i64;
    let List.554 : U64 = CallByName List.6 List.436;
    let List.552 : {List U8, U64} = CallByName List.80 List.436 List.437 List.438 List.553 List.554;
    ret List.552;

procedure List.93 (List.436, List.437, List.438):
    let List.573 : U64 = 0i64;
    let List.574 : U64 = CallByName List.6 List.436;
    let List.572 : List U8 = CallByName List.80 List.436 List.437 List.438 List.573 List.574;
    ret List.572;

procedure List.93 (List.436, List.437, List.438):
    let List.626 : U64 = 0i64;
    let List.627 : U64 = CallByName List.6 List.436;
    let List.625 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.80 List.436 List.437 List.438 List.626 List.627;
    ret List.625;

procedure Num.127 (#Attr.2):
    let Num.288 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.288;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.297 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.297;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.301 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.301;

procedure Num.21 (#Attr.2, #Attr.3):
    let Num.294 : U64 = lowlevel NumMul #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.300 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.300;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.302 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.302;

procedure Num.94 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumDivCeilUnchecked #Attr.2 #Attr.3;
    ret Num.293;

procedure Str.12 (#Attr.2):
    let Str.313 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.313;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.307 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.307;

procedure Str.9 (Str.79):
    let Str.305 : U64 = 0i64;
    let Str.306 : U64 = CallByName List.6 Str.79;
    let Str.80 : {U64, Str, Int1, U8} = CallByName Str.48 Str.79 Str.305 Str.306;
    let Str.302 : Int1 = StructAtIndex 2 Str.80;
    if Str.302 then
        let Str.304 : Str = StructAtIndex 1 Str.80;
        let Str.303 : [C {U64, U8}, C Str] = TagId(1) Str.304;
        ret Str.303;
    else
        let Str.300 : U8 = StructAtIndex 3 Str.80;
        let Str.301 : U64 = StructAtIndex 0 Str.80;
        let #Derived_gen.15 : Str = StructAtIndex 1 Str.80;
        dec #Derived_gen.15;
        let Str.299 : {U64, U8} = Struct {Str.301, Str.300};
        let Str.298 : [C {U64, U8}, C Str] = TagId(0) Str.299;
        ret Str.298;

procedure Test.0 ():
    let Test.13 : Str = "foo";
    let Test.12 : Str = "foo";
    let Test.1 : {Str, Str} = Struct {Test.12, Test.13};
    let Test.11 : [C , C [], C , C , C , C ] = CallByName Json.1;
    let Test.10 : List U8 = CallByName Encode.26 Test.1 Test.11;
    let Test.2 : [C {U64, U8}, C Str] = CallByName Str.9 Test.10;
    let Test.7 : U8 = 1i64;
    let Test.8 : U8 = GetTagId Test.2;
    let Test.9 : Int1 = lowlevel Eq Test.7 Test.8;
    if Test.9 then
        let Test.4 : Str = UnionAtIndex (Id 1) (Index 0) Test.2;
        ret Test.4;
    else
        dec Test.2;
        let Test.6 : Str = "<bad>";
        ret Test.6;
