procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Str, Str} = CallByName Encode.22 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.4 (#Derived.5, #Derived.6, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.5 #Derived_gen.4 #Derived.6;
        ret #Derived_gen.3;
    in
    let #Derived.2 : Str = StructAtIndex 0 #Derived.1;
    inc #Derived.2;
    let #Derived.3 : Str = StructAtIndex 1 #Derived.1;
    inc #Derived.3;
    dec #Derived.1;
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Json.18 #Derived.2;
    let #Derived_gen.10 : Str = CallByName Json.18 #Derived.3;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9, #Derived_gen.10];
    let #Derived_gen.6 : {Str, List Str} = CallByName Json.21 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.4 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.129 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.117 : List U8 = CallByName Json.99 Encode.94 Encode.96 Encode.102;
    ret Encode.117;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : {Str, Str} = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.425 : {} = Struct {};
    ret Json.425;

procedure Json.129 (Json.130, Json.428, #Attr.12):
    let Json.128 : List Str = StructAtIndex 1 #Attr.12;
    inc Json.128;
    let Json.127 : Str = StructAtIndex 0 #Attr.12;
    inc Json.127;
    dec #Attr.12;
    let Json.466 : I64 = 123i64;
    let Json.465 : U8 = CallByName Num.127 Json.466;
    let Json.462 : List U8 = CallByName List.4 Json.130 Json.465;
    let Json.464 : I64 = 34i64;
    let Json.463 : U8 = CallByName Num.127 Json.464;
    let Json.460 : List U8 = CallByName List.4 Json.462 Json.463;
    let Json.461 : List U8 = CallByName Str.12 Json.127;
    let Json.457 : List U8 = CallByName List.8 Json.460 Json.461;
    let Json.459 : I64 = 34i64;
    let Json.458 : U8 = CallByName Num.127 Json.459;
    let Json.454 : List U8 = CallByName List.4 Json.457 Json.458;
    let Json.456 : I64 = 58i64;
    let Json.455 : U8 = CallByName Num.127 Json.456;
    let Json.451 : List U8 = CallByName List.4 Json.454 Json.455;
    let Json.453 : I64 = 91i64;
    let Json.452 : U8 = CallByName Num.127 Json.453;
    let Json.132 : List U8 = CallByName List.4 Json.451 Json.452;
    let Json.450 : U64 = CallByName List.6 Json.128;
    let Json.438 : {List U8, U64} = Struct {Json.132, Json.450};
    let Json.439 : {} = Struct {};
    let Json.437 : {List U8, U64} = CallByName List.18 Json.128 Json.438 Json.439;
    dec Json.128;
    let Json.134 : List U8 = StructAtIndex 0 Json.437;
    inc Json.134;
    dec Json.437;
    let Json.436 : I64 = 93i64;
    let Json.435 : U8 = CallByName Num.127 Json.436;
    let Json.432 : List U8 = CallByName List.4 Json.134 Json.435;
    let Json.434 : I64 = 125i64;
    let Json.433 : U8 = CallByName Num.127 Json.434;
    let Json.431 : List U8 = CallByName List.4 Json.432 Json.433;
    ret Json.431;

procedure Json.131 (Json.430, Json.137):
    let Json.135 : List U8 = StructAtIndex 0 Json.430;
    inc Json.135;
    let Json.136 : U64 = StructAtIndex 1 Json.430;
    dec Json.430;
    let Json.449 : {} = Struct {};
    let Json.138 : List U8 = CallByName Encode.23 Json.135 Json.137 Json.449;
    joinpoint Json.444 Json.139:
        let Json.442 : U64 = 1i64;
        let Json.441 : U64 = CallByName Num.20 Json.136 Json.442;
        let Json.440 : {List U8, U64} = Struct {Json.139, Json.441};
        ret Json.440;
    in
    let Json.448 : U64 = 1i64;
    let Json.445 : Int1 = CallByName Num.24 Json.136 Json.448;
    if Json.445 then
        let Json.447 : I64 = 44i64;
        let Json.446 : U8 = CallByName Num.127 Json.447;
        let Json.443 : List U8 = CallByName List.4 Json.138 Json.446;
        jump Json.444 Json.443;
    else
        jump Json.444 Json.138;

procedure Json.18 (Json.98):
    let Json.479 : Str = CallByName Encode.22 Json.98;
    ret Json.479;

procedure Json.21 (Json.127, Json.128):
    let Json.427 : {Str, List Str} = Struct {Json.127, Json.128};
    let Json.426 : {Str, List Str} = CallByName Encode.22 Json.427;
    ret Json.426;

procedure Json.99 (Json.100, Json.469, Json.98):
    let Json.478 : I64 = 34i64;
    let Json.477 : U8 = CallByName Num.127 Json.478;
    let Json.475 : List U8 = CallByName List.4 Json.100 Json.477;
    let Json.476 : List U8 = CallByName Str.12 Json.98;
    let Json.472 : List U8 = CallByName List.8 Json.475 Json.476;
    let Json.474 : I64 = 34i64;
    let Json.473 : U8 = CallByName Num.127 Json.474;
    let Json.471 : List U8 = CallByName List.4 Json.472 Json.473;
    ret Json.471;

procedure List.139 (List.140, List.141, List.138):
    let List.547 : {List U8, U64} = CallByName Json.131 List.140 List.141;
    ret List.547;

procedure List.18 (List.136, List.137, List.138):
    let List.528 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.528;

procedure List.4 (List.107, List.108):
    let List.527 : U64 = 1i64;
    let List.526 : List U8 = CallByName List.70 List.107 List.527;
    let List.525 : List U8 = CallByName List.71 List.526 List.108;
    ret List.525;

procedure List.6 (#Attr.2):
    let List.494 : U64 = lowlevel ListLen #Attr.2;
    ret List.494;

procedure List.6 (#Attr.2):
    let List.548 : U64 = lowlevel ListLen #Attr.2;
    ret List.548;

procedure List.66 (#Attr.2, #Attr.3):
    let List.544 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.544;

procedure List.70 (#Attr.2, #Attr.3):
    let List.500 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.500;

procedure List.71 (#Attr.2, #Attr.3):
    let List.498 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.498;

procedure List.8 (#Attr.2, #Attr.3):
    let List.550 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.550;

procedure List.80 (List.560, List.561, List.562, List.563, List.564):
    joinpoint List.534 List.433 List.434 List.435 List.436 List.437:
        let List.536 : Int1 = CallByName Num.22 List.436 List.437;
        if List.536 then
            let List.543 : Str = CallByName List.66 List.433 List.436;
            let List.537 : {List U8, U64} = CallByName List.139 List.434 List.543 List.435;
            let List.540 : U64 = 1i64;
            let List.539 : U64 = CallByName Num.19 List.436 List.540;
            jump List.534 List.433 List.537 List.435 List.539 List.437;
        else
            ret List.434;
    in
    jump List.534 List.560 List.561 List.562 List.563 List.564;

procedure List.92 (List.430, List.431, List.432):
    let List.532 : U64 = 0i64;
    let List.533 : U64 = CallByName List.6 List.430;
    let List.531 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.532 List.533;
    ret List.531;

procedure Num.127 (#Attr.2):
    let Num.284 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.284;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.287 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.287;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.288 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.286;

procedure Str.12 (#Attr.2):
    let Str.280 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.280;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.274 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.274;

procedure Str.9 (Str.76):
    let Str.272 : U64 = 0i64;
    let Str.273 : U64 = CallByName List.6 Str.76;
    let Str.77 : {U64, Str, Int1, U8} = CallByName Str.48 Str.76 Str.272 Str.273;
    let Str.269 : Int1 = StructAtIndex 2 Str.77;
    if Str.269 then
        let Str.271 : Str = StructAtIndex 1 Str.77;
        inc Str.271;
        dec Str.77;
        let Str.270 : [C {U64, U8}, C Str] = TagId(1) Str.271;
        ret Str.270;
    else
        let Str.267 : U8 = StructAtIndex 3 Str.77;
        let Str.268 : U64 = StructAtIndex 0 Str.77;
        dec Str.77;
        let Str.266 : {U64, U8} = Struct {Str.268, Str.267};
        let Str.265 : [C {U64, U8}, C Str] = TagId(0) Str.266;
        ret Str.265;

procedure Test.0 ():
    let Test.13 : Str = "foo";
    let Test.12 : Str = "foo";
    let Test.1 : {Str, Str} = Struct {Test.12, Test.13};
    let Test.11 : {} = CallByName Json.1;
    let Test.10 : List U8 = CallByName Encode.25 Test.1 Test.11;
    let Test.2 : [C {U64, U8}, C Str] = CallByName Str.9 Test.10;
    let Test.7 : U8 = 1i64;
    let Test.8 : U8 = GetTagId Test.2;
    let Test.9 : Int1 = lowlevel Eq Test.7 Test.8;
    if Test.9 then
        let Test.4 : Str = UnionAtIndex (Id 1) (Index 0) Test.2;
        inc Test.4;
        dec Test.2;
        ret Test.4;
    else
        dec Test.2;
        let Test.6 : Str = "<bad>";
        ret Test.6;
