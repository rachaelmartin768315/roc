procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Str, Str} = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.4 (#Derived.5, #Derived.6, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.5 #Derived_gen.4 #Derived.6;
        ret #Derived_gen.3;
    in
    let #Derived.2 : Str = StructAtIndex 0 #Derived.1;
    let #Derived.3 : Str = StructAtIndex 1 #Derived.1;
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Json.18 #Derived.2;
    let #Derived_gen.10 : Str = CallByName Json.18 #Derived.3;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9, #Derived_gen.10];
    let #Derived_gen.6 : {Str, List Str} = CallByName Json.22 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.4 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Json.144 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.122 : List U8 = CallByName Json.102 Encode.99 Encode.101 Encode.107;
    ret Encode.122;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {Str, Str} = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.483 : {} = Struct {};
    ret Json.483;

procedure Json.102 (Json.103, Json.527, Json.101):
    let Json.536 : I64 = 34i64;
    let Json.535 : U8 = CallByName Num.127 Json.536;
    let Json.533 : List U8 = CallByName List.4 Json.103 Json.535;
    let Json.534 : List U8 = CallByName Str.12 Json.101;
    let Json.530 : List U8 = CallByName List.8 Json.533 Json.534;
    let Json.532 : I64 = 34i64;
    let Json.531 : U8 = CallByName Num.127 Json.532;
    let Json.529 : List U8 = CallByName List.4 Json.530 Json.531;
    ret Json.529;

procedure Json.144 (Json.145, Json.486, #Attr.12):
    let Json.143 : List Str = StructAtIndex 1 #Attr.12;
    let Json.142 : Str = StructAtIndex 0 #Attr.12;
    let Json.524 : I64 = 123i64;
    let Json.523 : U8 = CallByName Num.127 Json.524;
    let Json.520 : List U8 = CallByName List.4 Json.145 Json.523;
    let Json.522 : I64 = 34i64;
    let Json.521 : U8 = CallByName Num.127 Json.522;
    let Json.518 : List U8 = CallByName List.4 Json.520 Json.521;
    let Json.519 : List U8 = CallByName Str.12 Json.142;
    let Json.515 : List U8 = CallByName List.8 Json.518 Json.519;
    let Json.517 : I64 = 34i64;
    let Json.516 : U8 = CallByName Num.127 Json.517;
    let Json.512 : List U8 = CallByName List.4 Json.515 Json.516;
    let Json.514 : I64 = 58i64;
    let Json.513 : U8 = CallByName Num.127 Json.514;
    let Json.509 : List U8 = CallByName List.4 Json.512 Json.513;
    let Json.511 : I64 = 91i64;
    let Json.510 : U8 = CallByName Num.127 Json.511;
    let Json.147 : List U8 = CallByName List.4 Json.509 Json.510;
    let Json.508 : U64 = CallByName List.6 Json.143;
    let Json.496 : {List U8, U64} = Struct {Json.147, Json.508};
    let Json.497 : {} = Struct {};
    let Json.495 : {List U8, U64} = CallByName List.18 Json.143 Json.496 Json.497;
    let Json.149 : List U8 = StructAtIndex 0 Json.495;
    let Json.494 : I64 = 93i64;
    let Json.493 : U8 = CallByName Num.127 Json.494;
    let Json.490 : List U8 = CallByName List.4 Json.149 Json.493;
    let Json.492 : I64 = 125i64;
    let Json.491 : U8 = CallByName Num.127 Json.492;
    let Json.489 : List U8 = CallByName List.4 Json.490 Json.491;
    ret Json.489;

procedure Json.146 (Json.488, Json.152):
    let Json.150 : List U8 = StructAtIndex 0 Json.488;
    let Json.151 : U64 = StructAtIndex 1 Json.488;
    let Json.507 : {} = Struct {};
    let Json.153 : List U8 = CallByName Encode.24 Json.150 Json.152 Json.507;
    joinpoint Json.502 Json.154:
        let Json.500 : U64 = 1i64;
        let Json.499 : U64 = CallByName Num.20 Json.151 Json.500;
        let Json.498 : {List U8, U64} = Struct {Json.154, Json.499};
        ret Json.498;
    in
    let Json.506 : U64 = 1i64;
    let Json.503 : Int1 = CallByName Num.24 Json.151 Json.506;
    if Json.503 then
        let Json.505 : I64 = 44i64;
        let Json.504 : U8 = CallByName Num.127 Json.505;
        let Json.501 : List U8 = CallByName List.4 Json.153 Json.504;
        jump Json.502 Json.501;
    else
        jump Json.502 Json.153;

procedure Json.18 (Json.101):
    let Json.537 : Str = CallByName Encode.23 Json.101;
    ret Json.537;

procedure Json.22 (Json.142, Json.143):
    let Json.485 : {Str, List Str} = Struct {Json.142, Json.143};
    let Json.484 : {Str, List Str} = CallByName Encode.23 Json.485;
    ret Json.484;

procedure List.139 (List.140, List.141, List.138):
    let List.547 : {List U8, U64} = CallByName Json.146 List.140 List.141;
    ret List.547;

procedure List.18 (List.136, List.137, List.138):
    let List.528 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.528;

procedure List.4 (List.107, List.108):
    let List.527 : U64 = 1i64;
    let List.526 : List U8 = CallByName List.70 List.107 List.527;
    let List.525 : List U8 = CallByName List.71 List.526 List.108;
    ret List.525;

procedure List.6 (#Attr.2):
    let List.494 : U64 = lowlevel ListLen #Attr.2;
    ret List.494;

procedure List.6 (#Attr.2):
    let List.548 : U64 = lowlevel ListLen #Attr.2;
    ret List.548;

procedure List.66 (#Attr.2, #Attr.3):
    let List.544 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.544;

procedure List.70 (#Attr.2, #Attr.3):
    let List.500 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.500;

procedure List.71 (#Attr.2, #Attr.3):
    let List.498 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.498;

procedure List.8 (#Attr.2, #Attr.3):
    let List.550 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.550;

procedure List.80 (List.560, List.561, List.562, List.563, List.564):
    joinpoint List.534 List.433 List.434 List.435 List.436 List.437:
        let List.536 : Int1 = CallByName Num.22 List.436 List.437;
        if List.536 then
            let List.543 : Str = CallByName List.66 List.433 List.436;
            inc List.543;
            let List.537 : {List U8, U64} = CallByName List.139 List.434 List.543 List.435;
            let List.540 : U64 = 1i64;
            let List.539 : U64 = CallByName Num.19 List.436 List.540;
            jump List.534 List.433 List.537 List.435 List.539 List.437;
        else
            dec List.433;
            ret List.434;
    in
    jump List.534 List.560 List.561 List.562 List.563 List.564;

procedure List.92 (List.430, List.431, List.432):
    let List.532 : U64 = 0i64;
    let List.533 : U64 = CallByName List.6 List.430;
    let List.531 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.532 List.533;
    ret List.531;

procedure Num.127 (#Attr.2):
    let Num.290 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.290;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.293;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.294 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.292 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.292;

procedure Str.12 (#Attr.2):
    let Str.313 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.313;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.307 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.307;

procedure Str.9 (Str.79):
    let Str.305 : U64 = 0i64;
    let Str.306 : U64 = CallByName List.6 Str.79;
    let Str.80 : {U64, Str, Int1, U8} = CallByName Str.48 Str.79 Str.305 Str.306;
    let Str.302 : Int1 = StructAtIndex 2 Str.80;
    if Str.302 then
        let Str.304 : Str = StructAtIndex 1 Str.80;
        let Str.303 : [C {U64, U8}, C Str] = TagId(1) Str.304;
        ret Str.303;
    else
        let Str.300 : U8 = StructAtIndex 3 Str.80;
        let Str.301 : U64 = StructAtIndex 0 Str.80;
        let #Derived_gen.15 : Str = StructAtIndex 1 Str.80;
        dec #Derived_gen.15;
        let Str.299 : {U64, U8} = Struct {Str.301, Str.300};
        let Str.298 : [C {U64, U8}, C Str] = TagId(0) Str.299;
        ret Str.298;

procedure Test.0 ():
    let Test.13 : Str = "foo";
    let Test.12 : Str = "foo";
    let Test.1 : {Str, Str} = Struct {Test.12, Test.13};
    let Test.11 : {} = CallByName Json.1;
    let Test.10 : List U8 = CallByName Encode.26 Test.1 Test.11;
    let Test.2 : [C {U64, U8}, C Str] = CallByName Str.9 Test.10;
    let Test.7 : U8 = 1i64;
    let Test.8 : U8 = GetTagId Test.2;
    let Test.9 : Int1 = lowlevel Eq Test.7 Test.8;
    if Test.9 then
        let Test.4 : Str = UnionAtIndex (Id 1) (Index 0) Test.2;
        ret Test.4;
    else
        dec Test.2;
        let Test.6 : Str = "<bad>";
        ret Test.6;
