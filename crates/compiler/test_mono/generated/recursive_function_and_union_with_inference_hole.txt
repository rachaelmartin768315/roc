procedure List.18 (List.163, List.164, List.165):
    let List.626 : U64 = 0i64;
    let List.627 : U64 = CallByName List.6 List.163;
    let List.625 : List [<rnnu>C List *self] = CallByName List.92 List.163 List.164 List.165 List.626 List.627;
    ret List.625;

procedure List.275 (List.276, List.277, List.273):
    let List.639 : [<rnnu>C List *self] = CallByName Test.2 List.277;
    let List.638 : List [<rnnu>C List *self] = CallByName List.71 List.276 List.639;
    ret List.638;

procedure List.5 (List.272, List.273):
    let List.274 : U64 = CallByName List.6 List.272;
    let List.623 : List [<rnnu>C List *self] = CallByName List.68 List.274;
    let List.622 : List [<rnnu>C List *self] = CallByName List.18 List.272 List.623 List.273;
    ret List.622;

procedure List.6 (#Attr.2):
    let List.636 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.636;

procedure List.66 (#Attr.2, #Attr.3):
    let List.635 : [<rnnu>C List *self] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.635;

procedure List.68 (#Attr.2):
    let List.641 : List [<rnnu>C List *self] = lowlevel ListWithCapacity #Attr.2;
    ret List.641;

procedure List.71 (#Attr.2, #Attr.3):
    let List.640 : List [<rnnu>C List *self] = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.640;

procedure List.92 (#Derived_gen.4, #Derived_gen.5, #Derived_gen.6, #Derived_gen.7, #Derived_gen.8):
    joinpoint List.628 List.166 List.167 List.168 List.169 List.170:
        let List.630 : Int1 = CallByName Num.22 List.169 List.170;
        if List.630 then
            let List.634 : [<rnnu>C List *self] = CallByName List.66 List.166 List.169;
            inc List.634;
            let List.171 : List [<rnnu>C List *self] = CallByName List.275 List.167 List.634 List.168;
            let List.633 : U64 = 1i64;
            let List.632 : U64 = CallByName Num.51 List.169 List.633;
            jump List.628 List.166 List.171 List.168 List.632 List.170;
        else
            dec List.166;
            ret List.167;
    in
    inc #Derived_gen.4;
    jump List.628 #Derived_gen.4 #Derived_gen.5 #Derived_gen.6 #Derived_gen.7 #Derived_gen.8;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.280 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.280;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.279 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.279;

procedure Test.2 (Test.5):
    let Test.6 : List [<rnnu>C List *self] = UnionAtIndex (Id 0) (Index 0) Test.5;
    inc Test.6;
    let #Derived_gen.9 : [<rnnu>C List *self] = Reset { symbol: Test.5, id: UpdateModeId { id: 0 } };
    let Test.15 : {} = Struct {};
    let Test.7 : List [<rnnu>C List *self] = CallByName List.5 Test.6 Test.15;
    dec Test.6;
    let Test.14 : [<rnnu>C List *self] = Reuse #Derived_gen.9 UpdateModeId { id: 0 } TagId(0) Test.7;
    ret Test.14;

procedure Test.0 ():
    let Test.16 : List [<rnnu>C List *self] = Array [];
    let Test.12 : [<rnnu>C List *self] = TagId(0) Test.16;
    let Test.10 : [<rnnu>C List *self] = CallByName Test.2 Test.12;
    dec Test.10;
    let Test.11 : Str = "";
    ret Test.11;
