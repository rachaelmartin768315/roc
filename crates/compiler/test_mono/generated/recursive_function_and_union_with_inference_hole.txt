procedure List.101 (#Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4, #Derived_gen.5):
    joinpoint List.672 List.175 List.176 List.177 List.178 List.179:
        let List.674 : Int1 = CallByName Num.22 List.178 List.179;
        if List.674 then
            let List.678 : [<rnnu>C List *self] = CallByName List.66 List.175 List.178;
            inc List.678;
            let List.180 : List [<rnnu>C List *self] = CallByName List.284 List.176 List.678 List.177;
            let List.677 : U64 = 1i64;
            let List.676 : U64 = CallByName Num.51 List.178 List.677;
            jump List.672 List.175 List.180 List.177 List.676 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc #Derived_gen.1;
    jump List.672 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4 #Derived_gen.5;

procedure List.18 (List.172, List.173, List.174):
    let List.670 : U64 = 0i64;
    let List.671 : U64 = CallByName List.6 List.172;
    let List.669 : List [<rnnu>C List *self] = CallByName List.101 List.172 List.173 List.174 List.670 List.671;
    ret List.669;

procedure List.284 (List.285, List.286, List.282):
    let List.683 : [<rnnu>C List *self] = CallByName Test.2 List.286;
    let List.682 : List [<rnnu>C List *self] = CallByName List.71 List.285 List.683;
    ret List.682;

procedure List.5 (List.281, List.282):
    let List.283 : U64 = CallByName List.6 List.281;
    let List.667 : List [<rnnu>C List *self] = CallByName List.68 List.283;
    let List.666 : List [<rnnu>C List *self] = CallByName List.18 List.281 List.667 List.282;
    ret List.666;

procedure List.6 (#Attr.2):
    let List.680 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.680;

procedure List.66 (#Attr.2, #Attr.3):
    let List.679 : [<rnnu>C List *self] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.679;

procedure List.68 (#Attr.2):
    let List.685 : List [<rnnu>C List *self] = lowlevel ListWithCapacity #Attr.2;
    ret List.685;

procedure List.71 (#Attr.2, #Attr.3):
    let List.684 : List [<rnnu>C List *self] = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.684;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.2 (Test.5):
    let Test.6 : List [<rnnu>C List *self] = UnionAtIndex (Id 0) (Index 0) Test.5;
    inc Test.6;
    let #Derived_gen.9 : [<rnnu>C List *self] = Reset { symbol: Test.5, id: UpdateModeId { id: 0 } };
    let Test.15 : {} = Struct {};
    let Test.7 : List [<rnnu>C List *self] = CallByName List.5 Test.6 Test.15;
    dec Test.6;
    let Test.14 : [<rnnu>C List *self] = Reuse #Derived_gen.9 UpdateModeId { id: 0 } TagId(0) Test.7;
    ret Test.14;

procedure Test.0 ():
    let Test.16 : List [<rnnu>C List *self] = Array [];
    let Test.12 : [<rnnu>C List *self] = TagId(0) Test.16;
    let Test.10 : [<rnnu>C List *self] = CallByName Test.2 Test.12;
    dec Test.10;
    let Test.11 : Str = "";
    ret Test.11;
