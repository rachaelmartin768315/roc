procedure List.18 (List.170, List.171, List.172):
    let List.657 : U64 = 0i64;
    let List.658 : U64 = CallByName List.6 List.170;
    let List.656 : List [<rnnu>C List *self] = CallByName List.99 List.170 List.171 List.172 List.657 List.658;
    ret List.656;

procedure List.282 (List.283, List.284, List.280):
    let List.670 : [<rnnu>C List *self] = CallByName Test.2 List.284;
    let List.669 : List [<rnnu>C List *self] = CallByName List.71 List.283 List.670;
    ret List.669;

procedure List.5 (List.279, List.280):
    let List.281 : U64 = CallByName List.6 List.279;
    let List.654 : List [<rnnu>C List *self] = CallByName List.68 List.281;
    let List.653 : List [<rnnu>C List *self] = CallByName List.18 List.279 List.654 List.280;
    ret List.653;

procedure List.6 (#Attr.2):
    let List.667 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.667;

procedure List.66 (#Attr.2, #Attr.3):
    let List.666 : [<rnnu>C List *self] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.666;

procedure List.68 (#Attr.2):
    let List.672 : List [<rnnu>C List *self] = lowlevel ListWithCapacity #Attr.2;
    ret List.672;

procedure List.71 (#Attr.2, #Attr.3):
    let List.671 : List [<rnnu>C List *self] = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.671;

procedure List.99 (#Derived_gen.4, #Derived_gen.5, #Derived_gen.6, #Derived_gen.7, #Derived_gen.8):
    joinpoint List.659 List.173 List.174 List.175 List.176 List.177:
        let List.661 : Int1 = CallByName Num.22 List.176 List.177;
        if List.661 then
            let List.665 : [<rnnu>C List *self] = CallByName List.66 List.173 List.176;
            inc List.665;
            let List.178 : List [<rnnu>C List *self] = CallByName List.282 List.174 List.665 List.175;
            let List.664 : U64 = 1i64;
            let List.663 : U64 = CallByName Num.51 List.176 List.664;
            jump List.659 List.173 List.178 List.175 List.663 List.177;
        else
            dec List.173;
            ret List.174;
    in
    inc #Derived_gen.4;
    jump List.659 #Derived_gen.4 #Derived_gen.5 #Derived_gen.6 #Derived_gen.7 #Derived_gen.8;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.2 (Test.5):
    let Test.6 : List [<rnnu>C List *self] = UnionAtIndex (Id 0) (Index 0) Test.5;
    inc Test.6;
    let #Derived_gen.9 : [<rnnu>C List *self] = Reset { symbol: Test.5, id: UpdateModeId { id: 0 } };
    let Test.15 : {} = Struct {};
    let Test.7 : List [<rnnu>C List *self] = CallByName List.5 Test.6 Test.15;
    dec Test.6;
    let Test.14 : [<rnnu>C List *self] = Reuse #Derived_gen.9 UpdateModeId { id: 0 } TagId(0) Test.7;
    ret Test.14;

procedure Test.0 ():
    let Test.16 : List [<rnnu>C List *self] = Array [];
    let Test.12 : [<rnnu>C List *self] = TagId(0) Test.16;
    let Test.10 : [<rnnu>C List *self] = CallByName Test.2 Test.12;
    dec Test.10;
    let Test.11 : Str = "";
    ret Test.11;
