procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Inspect.249 (Inspect.250, Inspect.248):
    let Inspect.322 : Str = "\"";
    let Inspect.321 : Str = CallByName Inspect.63 Inspect.250 Inspect.322;
    dec Inspect.322;
    let Inspect.317 : Str = CallByName Inspect.63 Inspect.321 Inspect.248;
    let Inspect.318 : Str = "\"";
    let Inspect.316 : Str = CallByName Inspect.63 Inspect.317 Inspect.318;
    dec Inspect.318;
    ret Inspect.316;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.33 (Inspect.152):
    let Inspect.304 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.303 : Str = CallByName Inspect.64 Inspect.304;
    ret Inspect.303;

procedure Inspect.39 (Inspect.300):
    let Inspect.310 : Str = "";
    ret Inspect.310;

procedure Inspect.47 (Inspect.248):
    let Inspect.312 : Str = CallByName Inspect.30 Inspect.248;
    ret Inspect.312;

procedure Inspect.5 (Inspect.150):
    let Inspect.311 : Str = CallByName Inspect.47 Inspect.150;
    let Inspect.308 : {} = Struct {};
    let Inspect.307 : Str = CallByName Inspect.39 Inspect.308;
    let Inspect.306 : Str = CallByName Inspect.249 Inspect.307 Inspect.311;
    dec Inspect.311;
    ret Inspect.306;

procedure Inspect.63 (Inspect.299, Inspect.295):
    let Inspect.320 : Str = CallByName Str.3 Inspect.299 Inspect.295;
    ret Inspect.320;

procedure Inspect.64 (Inspect.301):
    ret Inspect.301;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.246 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.246;

procedure Test.1 ():
    let Test.4 : Str = "";
    let Test.0 : Str = CallByName Inspect.33 Test.4;
    dbg Test.0;
    dec Test.0;
    let Test.3 : Int1 = CallByName Bool.2;
    expect Test.3;
    let Test.2 : {} = Struct {};
    ret Test.2;
