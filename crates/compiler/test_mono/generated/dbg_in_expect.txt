procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Inspect.244 (Inspect.245, Inspect.243):
    let Inspect.316 : Str = "\"";
    let Inspect.315 : Str = CallByName Inspect.63 Inspect.245 Inspect.316;
    dec Inspect.316;
    let Inspect.311 : Str = CallByName Inspect.63 Inspect.315 Inspect.243;
    let Inspect.312 : Str = "\"";
    let Inspect.310 : Str = CallByName Inspect.63 Inspect.311 Inspect.312;
    dec Inspect.312;
    ret Inspect.310;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.33 (Inspect.152):
    let Inspect.299 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.298 : Str = CallByName Inspect.64 Inspect.299;
    ret Inspect.298;

procedure Inspect.39 (Inspect.295):
    let Inspect.305 : Str = "";
    ret Inspect.305;

procedure Inspect.47 (Inspect.243):
    let Inspect.307 : Str = CallByName Inspect.30 Inspect.243;
    ret Inspect.307;

procedure Inspect.5 (Inspect.150):
    let Inspect.306 : Str = CallByName Inspect.47 Inspect.150;
    let Inspect.303 : {} = Struct {};
    let Inspect.302 : Str = CallByName Inspect.39 Inspect.303;
    let Inspect.301 : Str = CallByName Inspect.244 Inspect.302 Inspect.306;
    dec Inspect.306;
    ret Inspect.301;

procedure Inspect.63 (Inspect.294, Inspect.290):
    let Inspect.314 : Str = CallByName Str.3 Inspect.294 Inspect.290;
    ret Inspect.314;

procedure Inspect.64 (Inspect.296):
    ret Inspect.296;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.246 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.246;

procedure Test.1 ():
    let Test.4 : Str = "";
    let Test.0 : Str = CallByName Inspect.33 Test.4;
    dbg Test.0;
    dec Test.0;
    let Test.3 : Int1 = CallByName Bool.2;
    expect Test.3;
    let Test.2 : {} = Struct {};
    ret Test.2;
