procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Inspect.249 (Inspect.250, Inspect.248):
    let Inspect.320 : Str = "\"";
    let Inspect.319 : Str = CallByName Inspect.61 Inspect.250 Inspect.320;
    let Inspect.315 : Str = CallByName Inspect.61 Inspect.319 Inspect.248;
    let Inspect.316 : Str = "\"";
    let Inspect.314 : Str = CallByName Inspect.61 Inspect.315 Inspect.316;
    ret Inspect.314;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.305, Inspect.149):
    let Inspect.307 : Str = CallByName Inspect.249 Inspect.149 Inspect.305;
    ret Inspect.307;

procedure Inspect.35 (Inspect.300):
    ret Inspect.300;

procedure Inspect.36 (Inspect.304):
    let Inspect.309 : Str = "";
    ret Inspect.309;

procedure Inspect.44 (Inspect.248):
    let Inspect.310 : Str = CallByName Inspect.30 Inspect.248;
    ret Inspect.310;

procedure Inspect.61 (Inspect.303, Inspect.298):
    let Inspect.318 : Str = CallByName Str.3 Inspect.303 Inspect.298;
    dec Inspect.298;
    ret Inspect.318;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.292 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.292;

procedure Test.1 ():
    let Test.8 : Str = "";
    let Test.5 : Str = CallByName Inspect.44 Test.8;
    let Test.7 : {} = Struct {};
    let Test.6 : Str = CallByName Inspect.36 Test.7;
    let Test.4 : Str = CallByName Inspect.31 Test.5 Test.6;
    let Test.0 : Str = CallByName Inspect.35 Test.4;
    dbg Test.0;
    dec Test.0;
    let Test.3 : Int1 = CallByName Bool.2;
    expect Test.3;
    let Test.2 : {} = Struct {};
    ret Test.2;
