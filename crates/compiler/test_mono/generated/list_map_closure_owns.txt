procedure List.2 (List.96, List.97):
    let List.500 : U64 = CallByName List.6 List.96;
    let List.496 : Int1 = CallByName Num.22 List.97 List.500;
    if List.496 then
        let List.498 : Str = CallByName List.66 List.96 List.97;
        inc List.498;
        dec List.96;
        let List.497 : [C {}, C Str] = TagId(1) List.498;
        ret List.497;
    else
        dec List.96;
        let List.495 : {} = Struct {};
        let List.494 : [C {}, C Str] = TagId(0) List.495;
        ret List.494;

procedure List.5 (#Attr.2, #Attr.3):
    let List.502 : List Str = lowlevel ListMap { xs: `#Attr.#arg1` } #Attr.2 Test.3 #Attr.3;
    decref #Attr.2;
    ret List.502;

procedure List.6 (#Attr.2):
    let List.501 : U64 = lowlevel ListLen #Attr.2;
    ret List.501;

procedure List.66 (#Attr.2, #Attr.3):
    let List.499 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.499;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.281 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.281;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.299 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.299;

procedure Test.1 ():
    let Test.21 : Str = "lllllllllllllllllllllooooooooooong";
    let Test.22 : Str = "g";
    let Test.20 : Str = CallByName Str.3 Test.21 Test.22;
    dec Test.22;
    let Test.19 : List Str = Array [Test.20];
    ret Test.19;

procedure Test.2 ():
    let Test.15 : List Str = CallByName Test.1;
    let Test.16 : {} = Struct {};
    let Test.14 : List Str = CallByName List.5 Test.15 Test.16;
    ret Test.14;

procedure Test.3 (Test.4):
    let Test.18 : Str = "!";
    let Test.17 : Str = CallByName Str.3 Test.4 Test.18;
    dec Test.18;
    ret Test.17;

procedure Test.0 ():
    let Test.12 : List Str = CallByName Test.2;
    let Test.13 : U64 = 0i64;
    let Test.6 : [C {}, C Str] = CallByName List.2 Test.12 Test.13;
    let Test.9 : U8 = 1i64;
    let Test.10 : U8 = GetTagId Test.6;
    let Test.11 : Int1 = lowlevel Eq Test.9 Test.10;
    if Test.11 then
        let Test.5 : Str = UnionAtIndex (Id 1) (Index 0) Test.6;
        ret Test.5;
    else
        dec Test.6;
        let Test.8 : Str = "Hello, World!\n";
        ret Test.8;
