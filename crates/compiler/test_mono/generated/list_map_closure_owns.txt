procedure List.18 (List.170, List.171, List.172):
    let List.665 : U64 = 0i64;
    let List.666 : U64 = CallByName List.6 List.170;
    let List.664 : List Str = CallByName List.99 List.170 List.171 List.172 List.665 List.666;
    ret List.664;

procedure List.2 (List.118, List.119):
    let List.659 : U64 = CallByName List.6 List.118;
    let List.655 : Int1 = CallByName Num.22 List.119 List.659;
    if List.655 then
        let List.657 : Str = CallByName List.66 List.118 List.119;
        inc List.657;
        let List.656 : [C {}, C Str] = TagId(1) List.657;
        ret List.656;
    else
        let List.654 : {} = Struct {};
        let List.653 : [C {}, C Str] = TagId(0) List.654;
        ret List.653;

procedure List.282 (List.283, List.284, List.280):
    let List.676 : Str = CallByName Test.3 List.284;
    let List.675 : List Str = CallByName List.71 List.283 List.676;
    ret List.675;

procedure List.5 (List.279, List.280):
    let List.281 : U64 = CallByName List.6 List.279;
    let List.662 : List Str = CallByName List.68 List.281;
    let List.661 : List Str = CallByName List.18 List.279 List.662 List.280;
    ret List.661;

procedure List.6 (#Attr.2):
    let List.660 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.660;

procedure List.66 (#Attr.2, #Attr.3):
    let List.658 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.658;

procedure List.68 (#Attr.2):
    let List.678 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.678;

procedure List.71 (#Attr.2, #Attr.3):
    let List.677 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.677;

procedure List.99 (#Derived_gen.3, #Derived_gen.4, #Derived_gen.5, #Derived_gen.6, #Derived_gen.7):
    joinpoint List.667 List.173 List.174 List.175 List.176 List.177:
        let List.669 : Int1 = CallByName Num.22 List.176 List.177;
        if List.669 then
            let List.673 : Str = CallByName List.66 List.173 List.176;
            inc List.673;
            let List.178 : List Str = CallByName List.282 List.174 List.673 List.175;
            let List.672 : U64 = 1i64;
            let List.671 : U64 = CallByName Num.51 List.176 List.672;
            jump List.667 List.173 List.178 List.175 List.671 List.177;
        else
            dec List.173;
            ret List.174;
    in
    inc #Derived_gen.3;
    jump List.667 #Derived_gen.3 #Derived_gen.4 #Derived_gen.5 #Derived_gen.6 #Derived_gen.7;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.247 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.247;

procedure Test.1 ():
    let Test.21 : Str = "lllllllllllllllllllllooooooooooong";
    let Test.22 : Str = "g";
    let Test.20 : Str = CallByName Str.3 Test.21 Test.22;
    dec Test.22;
    let Test.19 : List Str = Array [Test.20];
    ret Test.19;

procedure Test.2 ():
    let Test.15 : List Str = CallByName Test.1;
    let Test.16 : {} = Struct {};
    let Test.14 : List Str = CallByName List.5 Test.15 Test.16;
    dec Test.15;
    ret Test.14;

procedure Test.3 (Test.4):
    let Test.18 : Str = "!";
    let Test.17 : Str = CallByName Str.3 Test.4 Test.18;
    dec Test.18;
    ret Test.17;

procedure Test.0 ():
    let Test.12 : List Str = CallByName Test.2;
    let Test.13 : U64 = 0i64;
    let Test.6 : [C {}, C Str] = CallByName List.2 Test.12 Test.13;
    dec Test.12;
    let Test.9 : U8 = 1i64;
    let Test.10 : U8 = GetTagId Test.6;
    let Test.11 : Int1 = lowlevel Eq Test.9 Test.10;
    if Test.11 then
        let Test.5 : Str = UnionAtIndex (Id 1) (Index 0) Test.6;
        ret Test.5;
    else
        dec Test.6;
        let Test.8 : Str = "Hello, World!\n";
        ret Test.8;
