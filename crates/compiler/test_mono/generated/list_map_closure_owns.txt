<<<<<<< HEAD
<<<<<<< HEAD
procedure List.2 (List.75, List.76):
    let List.290 : U64 = CallByName List.6 List.75;
    let List.286 : Int1 = CallByName Num.22 List.76 List.290;
    if List.286 then
        let List.288 : Str = CallByName List.60 List.75 List.76;
        let List.287 : [C {}, C Str] = Ok List.288;
        ret List.287;
=======
<<<<<<< HEAD:crates/compiler/test_mono/generated/list_map_closure_owns.txt
procedure List.2 (List.73, List.74):
    let List.265 : U64 = CallByName List.6 List.73;
    let List.261 : Int1 = CallByName Num.22 List.74 List.265;
    if List.261 then
        let List.263 : Str = CallByName List.60 List.73 List.74;
        let List.262 : [C {}, C Str] = Ok List.263;
        ret List.262;
>>>>>>> 25bb3751b (Rename multimorphic tests to capture niche)
    else
        let List.285 : {} = Struct {};
        let List.284 : [C {}, C Str] = Err List.285;
        ret List.284;

procedure List.5 (#Attr.2, #Attr.3):
    inc #Attr.2;
    let List.292 : List Str = lowlevel ListMap { xs: `#Attr.#arg1` } #Attr.2 Test.3 #Attr.3;
    decref #Attr.2;
    ret List.292;

procedure List.6 (#Attr.2):
    let List.294 : U64 = lowlevel ListLen #Attr.2;
    ret List.294;

procedure List.60 (#Attr.2, #Attr.3):
<<<<<<< HEAD
    let List.293 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.293;
=======
    let List.268 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.268;
=======
procedure List.2 (List.71, List.72):
    let List.219 : U64 = CallByName List.6 List.71;
    let List.215 : Int1 = CallByName Num.22 List.72 List.219;
    if List.215 then
        let List.217 : Str = CallByName List.60 List.71 List.72;
        let List.216 : [C {}, C Str] = Ok List.217;
        ret List.216;
    else
        let List.214 : {} = Struct {};
        let List.213 : [C {}, C Str] = Err List.214;
        ret List.213;

procedure List.5 (#Attr.2, #Attr.3):
    inc #Attr.2;
    let List.221 : List Str = lowlevel ListMap { xs: `#Attr.#arg1` } #Attr.2 Test.3 #Attr.3;
    decref #Attr.2;
    ret List.221;

procedure List.6 (#Attr.2):
    let List.223 : U64 = lowlevel ListLen #Attr.2;
    ret List.223;

procedure List.60 (#Attr.2, #Attr.3):
    let List.222 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.222;
>>>>>>> a5fc399f4 (Rename multimorphic tests to capture niche):compiler/test_mono/generated/list_map_closure_owns.txt
>>>>>>> 25bb3751b (Rename multimorphic tests to capture niche)
=======
procedure List.2 (List.72, List.73):
    let List.244 : U64 = CallByName List.6 List.72;
    let List.240 : Int1 = CallByName Num.22 List.73 List.244;
    if List.240 then
        let List.242 : Str = CallByName List.60 List.72 List.73;
        let List.241 : [C {}, C Str] = Ok List.242;
        ret List.241;
    else
        let List.239 : {} = Struct {};
        let List.238 : [C {}, C Str] = Err List.239;
        ret List.238;

procedure List.5 (#Attr.2, #Attr.3):
    inc #Attr.2;
    let List.246 : List Str = lowlevel ListMap { xs: `#Attr.#arg1` } #Attr.2 Test.3 #Attr.3;
    decref #Attr.2;
    ret List.246;

procedure List.6 (#Attr.2):
    let List.248 : U64 = lowlevel ListLen #Attr.2;
    ret List.248;

procedure List.60 (#Attr.2, #Attr.3):
    let List.247 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.247;
>>>>>>> 61fcac491 (Fix mono tests)

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.188 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.188;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.38 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.38;

procedure Test.1 ():
    let Test.21 : Str = "lllllllllllllllllllllooooooooooong";
    let Test.22 : Str = "g";
    let Test.20 : Str = CallByName Str.3 Test.21 Test.22;
    dec Test.22;
    let Test.19 : List Str = Array [Test.20];
    ret Test.19;

procedure Test.2 ():
    let Test.15 : List Str = CallByName Test.1;
    let Test.16 : {} = Struct {};
    let Test.14 : List Str = CallByName List.5 Test.15 Test.16;
    dec Test.15;
    ret Test.14;

procedure Test.3 (Test.4):
    let Test.18 : Str = "!";
    let Test.17 : Str = CallByName Str.3 Test.4 Test.18;
    dec Test.18;
    ret Test.17;

procedure Test.0 ():
    let Test.12 : List Str = CallByName Test.2;
    let Test.13 : U64 = 0i64;
    let Test.6 : [C {}, C Str] = CallByName List.2 Test.12 Test.13;
    dec Test.12;
    let Test.9 : U8 = 1i64;
    let Test.10 : U8 = GetTagId Test.6;
    let Test.11 : Int1 = lowlevel Eq Test.9 Test.10;
    if Test.11 then
        let Test.5 : Str = UnionAtIndex (Id 1) (Index 0) Test.6;
        inc Test.5;
        dec Test.6;
        ret Test.5;
    else
        dec Test.6;
        let Test.8 : Str = "Hello, World!\n";
        ret Test.8;
