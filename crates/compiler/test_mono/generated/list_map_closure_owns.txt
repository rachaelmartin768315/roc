procedure List.101 (#Derived_gen.3, #Derived_gen.4, #Derived_gen.5, #Derived_gen.6, #Derived_gen.7):
    joinpoint List.680 List.175 List.176 List.177 List.178 List.179:
        let List.682 : Int1 = CallByName Num.22 List.178 List.179;
        if List.682 then
            let List.686 : Str = CallByName List.66 List.175 List.178;
            inc List.686;
            let List.180 : List Str = CallByName List.284 List.176 List.686 List.177;
            let List.685 : U64 = 1i64;
            let List.684 : U64 = CallByName Num.51 List.178 List.685;
            jump List.680 List.175 List.180 List.177 List.684 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc #Derived_gen.3;
    jump List.680 #Derived_gen.3 #Derived_gen.4 #Derived_gen.5 #Derived_gen.6 #Derived_gen.7;

procedure List.18 (List.172, List.173, List.174):
    let List.678 : U64 = 0i64;
    let List.679 : U64 = CallByName List.6 List.172;
    let List.677 : List Str = CallByName List.101 List.172 List.173 List.174 List.678 List.679;
    ret List.677;

procedure List.2 (List.120, List.121):
    let List.672 : U64 = CallByName List.6 List.120;
    let List.668 : Int1 = CallByName Num.22 List.121 List.672;
    if List.668 then
        let List.670 : Str = CallByName List.66 List.120 List.121;
        inc List.670;
        let List.669 : [C {}, C Str] = TagId(1) List.670;
        ret List.669;
    else
        let List.667 : {} = Struct {};
        let List.666 : [C {}, C Str] = TagId(0) List.667;
        ret List.666;

procedure List.284 (List.285, List.286, List.282):
    let List.689 : Str = CallByName Test.3 List.286;
    let List.688 : List Str = CallByName List.71 List.285 List.689;
    ret List.688;

procedure List.5 (List.281, List.282):
    let List.283 : U64 = CallByName List.6 List.281;
    let List.675 : List Str = CallByName List.68 List.283;
    let List.674 : List Str = CallByName List.18 List.281 List.675 List.282;
    ret List.674;

procedure List.6 (#Attr.2):
    let List.673 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.673;

procedure List.66 (#Attr.2, #Attr.3):
    let List.671 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.671;

procedure List.68 (#Attr.2):
    let List.691 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.691;

procedure List.71 (#Attr.2, #Attr.3):
    let List.690 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.690;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.247 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.247;

procedure Test.1 ():
    let Test.21 : Str = "lllllllllllllllllllllooooooooooong";
    let Test.22 : Str = "g";
    let Test.20 : Str = CallByName Str.3 Test.21 Test.22;
    dec Test.22;
    let Test.19 : List Str = Array [Test.20];
    ret Test.19;

procedure Test.2 ():
    let Test.15 : List Str = CallByName Test.1;
    let Test.16 : {} = Struct {};
    let Test.14 : List Str = CallByName List.5 Test.15 Test.16;
    dec Test.15;
    ret Test.14;

procedure Test.3 (Test.4):
    let Test.18 : Str = "!";
    let Test.17 : Str = CallByName Str.3 Test.4 Test.18;
    dec Test.18;
    ret Test.17;

procedure Test.0 ():
    let Test.12 : List Str = CallByName Test.2;
    let Test.13 : U64 = 0i64;
    let Test.6 : [C {}, C Str] = CallByName List.2 Test.12 Test.13;
    dec Test.12;
    let Test.9 : U8 = 1i64;
    let Test.10 : U8 = GetTagId Test.6;
    let Test.11 : Int1 = lowlevel Eq Test.9 Test.10;
    if Test.11 then
        let Test.5 : Str = UnionAtIndex (Id 1) (Index 0) Test.6;
        ret Test.5;
    else
        dec Test.6;
        let Test.8 : Str = "Hello, World!\n";
        ret Test.8;
