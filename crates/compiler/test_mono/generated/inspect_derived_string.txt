procedure Inspect.246 (Inspect.247, Inspect.245):
    let Inspect.319 : Str = "\"";
    let Inspect.318 : Str = CallByName Inspect.59 Inspect.247 Inspect.319;
    let Inspect.314 : Str = CallByName Inspect.59 Inspect.318 Inspect.245;
    let Inspect.315 : Str = "\"";
    let Inspect.313 : Str = CallByName Inspect.59 Inspect.314 Inspect.315;
    ret Inspect.313;

procedure Inspect.30 (Inspect.143):
    ret Inspect.143;

procedure Inspect.33 (Inspect.148):
    let Inspect.301 : Str = CallByName Inspect.5 Inspect.148;
    let Inspect.300 : Str = CallByName Inspect.60 Inspect.301;
    ret Inspect.300;

procedure Inspect.35 (Inspect.297):
    let Inspect.307 : Str = "";
    ret Inspect.307;

procedure Inspect.43 (Inspect.245):
    let Inspect.309 : Str = CallByName Inspect.30 Inspect.245;
    ret Inspect.309;

procedure Inspect.5 (Inspect.146):
    let Inspect.308 : Str = CallByName Inspect.43 Inspect.146;
    let Inspect.305 : {} = Struct {};
    let Inspect.304 : Str = CallByName Inspect.35 Inspect.305;
    let Inspect.303 : Str = CallByName Inspect.246 Inspect.304 Inspect.308;
    ret Inspect.303;

procedure Inspect.59 (Inspect.296, Inspect.292):
    let Inspect.317 : Str = CallByName Str.3 Inspect.296 Inspect.292;
    dec Inspect.292;
    ret Inspect.317;

procedure Inspect.60 (Inspect.298):
    ret Inspect.298;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.232 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.232;

procedure Test.0 ():
    let Test.2 : Str = "abc";
    let Test.1 : Str = CallByName Inspect.33 Test.2;
    ret Test.1;
