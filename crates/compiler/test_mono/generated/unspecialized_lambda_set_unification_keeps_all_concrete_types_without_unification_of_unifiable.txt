procedure #Derived.0 (#Derived.1):
    let #Derived_gen.11 : [C {}, C {}] = TagId(0) #Derived.1;
    let #Derived_gen.10 : [C {}, C {}] = CallByName Encode.23 #Derived_gen.11;
    ret #Derived_gen.10;

procedure #Derived.2 (#Derived.3, #Derived.4, #Attr.12):
    let #Derived_gen.19 : {} = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    joinpoint #Derived_gen.15 #Derived_gen.14:
        let #Derived_gen.13 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.14 #Derived.4;
        ret #Derived_gen.13;
    in
    let #Derived_gen.17 : Str = "A";
    let #Derived_gen.18 : List [] = Array [];
    let #Derived_gen.16 : {Str, List []} = CallByName TotallyNotJson.31 #Derived_gen.17 #Derived_gen.18;
    jump #Derived_gen.15 #Derived_gen.16;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.1 : [C {}, C {}] = TagId(1) #Derived.6;
    let #Derived_gen.0 : [C {}, C {}] = CallByName Encode.23 #Derived_gen.1;
    ret #Derived_gen.0;

procedure #Derived.7 (#Derived.8, #Derived.9, #Attr.12):
    let #Derived_gen.9 : {} = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.8 #Derived_gen.4 #Derived.9;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "B";
    let #Derived_gen.8 : List [] = Array [];
    let #Derived_gen.6 : {Str, List []} = CallByName TotallyNotJson.31 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    dec Encode.99;
    let Encode.125 : Str = "a Lambda Set is empty. Most likely there is a type error in your program.";
    Crash Encode.125

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName Test.5 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.113 : List U8 = CallByName TotallyNotJson.231 Encode.99 Encode.101 Encode.107;
    ret Encode.113;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.117 : U8 = GetTagId Encode.107;
    switch Encode.117:
        case 0:
            let Encode.116 : List U8 = CallByName #Derived.2 Encode.99 Encode.101 Encode.107;
            ret Encode.116;
    
        default:
            let Encode.116 : List U8 = CallByName #Derived.7 Encode.99 Encode.101 Encode.107;
            ret Encode.116;
    

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.121 : List U8 = CallByName TotallyNotJson.231 Encode.99 Encode.101 Encode.107;
    ret Encode.121;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {{}, {}} = CallByName Test.2 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure List.18 (List.159, List.160, List.161):
    let List.599 : U64 = 0i64;
    let List.600 : U64 = CallByName List.6 List.159;
    let List.598 : {List U8, U64} = CallByName List.91 List.159 List.160 List.161 List.599 List.600;
    ret List.598;

procedure List.18 (List.159, List.160, List.161):
    let List.639 : U64 = 0i64;
    let List.640 : U64 = CallByName List.6 List.159;
    let List.638 : {List U8, U64} = CallByName List.91 List.159 List.160 List.161 List.639 List.640;
    ret List.638;

procedure List.4 (List.123, List.124):
    let List.637 : U64 = 1i64;
    let List.636 : List U8 = CallByName List.70 List.123 List.637;
    let List.635 : List U8 = CallByName List.71 List.636 List.124;
    ret List.635;

procedure List.6 (#Attr.2):
    let List.610 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.610;

procedure List.6 (#Attr.2):
    let List.650 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.650;

procedure List.66 (#Attr.2, #Attr.3):
    let List.608 : [C {}, C {}] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.608;

procedure List.66 (#Attr.2, #Attr.3):
    let List.648 : [] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.648;

procedure List.70 (#Attr.2, #Attr.3):
    let List.616 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.616;

procedure List.71 (#Attr.2, #Attr.3):
    let List.614 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.614;

procedure List.8 (#Attr.2, #Attr.3):
    let List.651 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.651;

procedure List.91 (#Derived_gen.26, #Derived_gen.27, #Derived_gen.28, #Derived_gen.29, #Derived_gen.30):
    joinpoint List.641 List.162 List.163 List.164 List.165 List.166:
        let List.643 : Int1 = CallByName Num.22 List.165 List.166;
        if List.643 then
            let List.647 : [] = CallByName List.66 List.162 List.165;
            let List.167 : {List U8, U64} = CallByName TotallyNotJson.233 List.163 List.647;
            let List.646 : U64 = 1i64;
            let List.645 : U64 = CallByName Num.51 List.165 List.646;
            jump List.641 List.162 List.167 List.164 List.645 List.166;
        else
            dec List.162;
            ret List.163;
    in
    jump List.641 #Derived_gen.26 #Derived_gen.27 #Derived_gen.28 #Derived_gen.29 #Derived_gen.30;

procedure List.91 (#Derived_gen.40, #Derived_gen.41, #Derived_gen.42, #Derived_gen.43, #Derived_gen.44):
    joinpoint List.601 List.162 List.163 List.164 List.165 List.166:
        let List.603 : Int1 = CallByName Num.22 List.165 List.166;
        if List.603 then
            let List.607 : [C {}, C {}] = CallByName List.66 List.162 List.165;
            let List.167 : {List U8, U64} = CallByName TotallyNotJson.233 List.163 List.607;
            let List.606 : U64 = 1i64;
            let List.605 : U64 = CallByName Num.51 List.165 List.606;
            jump List.601 List.162 List.167 List.164 List.605 List.166;
        else
            dec List.162;
            ret List.163;
    in
    jump List.601 #Derived_gen.40 #Derived_gen.41 #Derived_gen.42 #Derived_gen.43 #Derived_gen.44;

procedure Num.127 (#Attr.2):
    let Num.298 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.298;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.299 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.299;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.302 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.302;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.300 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.300;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.301 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.301;

procedure Str.12 (#Attr.2):
    let Str.233 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.233;

procedure Test.2 (Test.11):
    let Test.18 : {{}, {}} = CallByName Encode.23 Test.11;
    ret Test.18;

procedure Test.3 ():
    let Test.16 : {} = Struct {};
    let Test.17 : {} = Struct {};
    let Test.15 : {{}, {}} = Struct {Test.16, Test.17};
    ret Test.15;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.23 Test.8:
        let Test.21 : List U8 = CallByName Encode.24 Test.6 Test.8 Test.7;
        ret Test.21;
    in
    let Test.28 : Int1 = CallByName Bool.2;
    if Test.28 then
        let Test.29 : Str = "A";
        let Test.32 : {} = StructAtIndex 0 Test.4;
        let Test.31 : [C {}, C {}] = CallByName #Derived.0 Test.32;
        let Test.30 : List [C {}, C {}] = Array [Test.31];
        let Test.22 : {Str, List [C {}, C {}]} = CallByName TotallyNotJson.31 Test.29 Test.30;
        jump Test.23 Test.22;
    else
        let Test.24 : Str = "B";
        let Test.27 : {} = StructAtIndex 1 Test.4;
        let Test.26 : [C {}, C {}] = CallByName #Derived.5 Test.27;
        let Test.25 : List [C {}, C {}] = Array [Test.26];
        let Test.22 : {Str, List [C {}, C {}]} = CallByName TotallyNotJson.31 Test.24 Test.25;
        jump Test.23 Test.22;

procedure TotallyNotJson.231 (TotallyNotJson.232, TotallyNotJson.976, #Attr.12):
    let TotallyNotJson.230 : List [C {}, C {}] = StructAtIndex 1 #Attr.12;
    let TotallyNotJson.229 : Str = StructAtIndex 0 #Attr.12;
    let TotallyNotJson.1014 : I64 = 123i64;
    let TotallyNotJson.1013 : U8 = CallByName Num.127 TotallyNotJson.1014;
    let TotallyNotJson.1010 : List U8 = CallByName List.4 TotallyNotJson.232 TotallyNotJson.1013;
    let TotallyNotJson.1012 : I64 = 34i64;
    let TotallyNotJson.1011 : U8 = CallByName Num.127 TotallyNotJson.1012;
    let TotallyNotJson.1008 : List U8 = CallByName List.4 TotallyNotJson.1010 TotallyNotJson.1011;
    let TotallyNotJson.1009 : List U8 = CallByName Str.12 TotallyNotJson.229;
    let TotallyNotJson.1005 : List U8 = CallByName List.8 TotallyNotJson.1008 TotallyNotJson.1009;
    let TotallyNotJson.1007 : I64 = 34i64;
    let TotallyNotJson.1006 : U8 = CallByName Num.127 TotallyNotJson.1007;
    let TotallyNotJson.1002 : List U8 = CallByName List.4 TotallyNotJson.1005 TotallyNotJson.1006;
    let TotallyNotJson.1004 : I64 = 58i64;
    let TotallyNotJson.1003 : U8 = CallByName Num.127 TotallyNotJson.1004;
    let TotallyNotJson.999 : List U8 = CallByName List.4 TotallyNotJson.1002 TotallyNotJson.1003;
    let TotallyNotJson.1001 : I64 = 91i64;
    let TotallyNotJson.1000 : U8 = CallByName Num.127 TotallyNotJson.1001;
    let TotallyNotJson.234 : List U8 = CallByName List.4 TotallyNotJson.999 TotallyNotJson.1000;
    let TotallyNotJson.998 : U64 = CallByName List.6 TotallyNotJson.230;
    let TotallyNotJson.986 : {List U8, U64} = Struct {TotallyNotJson.234, TotallyNotJson.998};
    let TotallyNotJson.987 : {} = Struct {};
    let TotallyNotJson.985 : {List U8, U64} = CallByName List.18 TotallyNotJson.230 TotallyNotJson.986 TotallyNotJson.987;
    let TotallyNotJson.236 : List U8 = StructAtIndex 0 TotallyNotJson.985;
    let TotallyNotJson.984 : I64 = 93i64;
    let TotallyNotJson.983 : U8 = CallByName Num.127 TotallyNotJson.984;
    let TotallyNotJson.980 : List U8 = CallByName List.4 TotallyNotJson.236 TotallyNotJson.983;
    let TotallyNotJson.982 : I64 = 125i64;
    let TotallyNotJson.981 : U8 = CallByName Num.127 TotallyNotJson.982;
    let TotallyNotJson.979 : List U8 = CallByName List.4 TotallyNotJson.980 TotallyNotJson.981;
    ret TotallyNotJson.979;

procedure TotallyNotJson.231 (TotallyNotJson.232, TotallyNotJson.976, #Attr.12):
    let TotallyNotJson.230 : List [] = StructAtIndex 1 #Attr.12;
    let TotallyNotJson.229 : Str = StructAtIndex 0 #Attr.12;
    let TotallyNotJson.1057 : I64 = 123i64;
    let TotallyNotJson.1056 : U8 = CallByName Num.127 TotallyNotJson.1057;
    let TotallyNotJson.1053 : List U8 = CallByName List.4 TotallyNotJson.232 TotallyNotJson.1056;
    let TotallyNotJson.1055 : I64 = 34i64;
    let TotallyNotJson.1054 : U8 = CallByName Num.127 TotallyNotJson.1055;
    let TotallyNotJson.1051 : List U8 = CallByName List.4 TotallyNotJson.1053 TotallyNotJson.1054;
    let TotallyNotJson.1052 : List U8 = CallByName Str.12 TotallyNotJson.229;
    let TotallyNotJson.1048 : List U8 = CallByName List.8 TotallyNotJson.1051 TotallyNotJson.1052;
    let TotallyNotJson.1050 : I64 = 34i64;
    let TotallyNotJson.1049 : U8 = CallByName Num.127 TotallyNotJson.1050;
    let TotallyNotJson.1045 : List U8 = CallByName List.4 TotallyNotJson.1048 TotallyNotJson.1049;
    let TotallyNotJson.1047 : I64 = 58i64;
    let TotallyNotJson.1046 : U8 = CallByName Num.127 TotallyNotJson.1047;
    let TotallyNotJson.1042 : List U8 = CallByName List.4 TotallyNotJson.1045 TotallyNotJson.1046;
    let TotallyNotJson.1044 : I64 = 91i64;
    let TotallyNotJson.1043 : U8 = CallByName Num.127 TotallyNotJson.1044;
    let TotallyNotJson.234 : List U8 = CallByName List.4 TotallyNotJson.1042 TotallyNotJson.1043;
    let TotallyNotJson.1041 : U64 = CallByName List.6 TotallyNotJson.230;
    let TotallyNotJson.1029 : {List U8, U64} = Struct {TotallyNotJson.234, TotallyNotJson.1041};
    let TotallyNotJson.1030 : {} = Struct {};
    let TotallyNotJson.1028 : {List U8, U64} = CallByName List.18 TotallyNotJson.230 TotallyNotJson.1029 TotallyNotJson.1030;
    let TotallyNotJson.236 : List U8 = StructAtIndex 0 TotallyNotJson.1028;
    let TotallyNotJson.1027 : I64 = 93i64;
    let TotallyNotJson.1026 : U8 = CallByName Num.127 TotallyNotJson.1027;
    let TotallyNotJson.1023 : List U8 = CallByName List.4 TotallyNotJson.236 TotallyNotJson.1026;
    let TotallyNotJson.1025 : I64 = 125i64;
    let TotallyNotJson.1024 : U8 = CallByName Num.127 TotallyNotJson.1025;
    let TotallyNotJson.1022 : List U8 = CallByName List.4 TotallyNotJson.1023 TotallyNotJson.1024;
    ret TotallyNotJson.1022;

procedure TotallyNotJson.233 (TotallyNotJson.978, TotallyNotJson.239):
    let TotallyNotJson.237 : List U8 = StructAtIndex 0 TotallyNotJson.978;
    let TotallyNotJson.238 : U64 = StructAtIndex 1 TotallyNotJson.978;
    let TotallyNotJson.1040 : {} = Struct {};
    let TotallyNotJson.240 : List U8 = CallByName Encode.24 TotallyNotJson.237 TotallyNotJson.239 TotallyNotJson.1040;
    joinpoint TotallyNotJson.1035 TotallyNotJson.241:
        let TotallyNotJson.1033 : U64 = 1i64;
        let TotallyNotJson.1032 : U64 = CallByName Num.20 TotallyNotJson.238 TotallyNotJson.1033;
        let TotallyNotJson.1031 : {List U8, U64} = Struct {TotallyNotJson.241, TotallyNotJson.1032};
        ret TotallyNotJson.1031;
    in
    let TotallyNotJson.1039 : U64 = 1i64;
    let TotallyNotJson.1036 : Int1 = CallByName Num.24 TotallyNotJson.238 TotallyNotJson.1039;
    if TotallyNotJson.1036 then
        let TotallyNotJson.1038 : I64 = 44i64;
        let TotallyNotJson.1037 : U8 = CallByName Num.127 TotallyNotJson.1038;
        let TotallyNotJson.1034 : List U8 = CallByName List.4 TotallyNotJson.240 TotallyNotJson.1037;
        jump TotallyNotJson.1035 TotallyNotJson.1034;
    else
        jump TotallyNotJson.1035 TotallyNotJson.240;

procedure TotallyNotJson.233 (TotallyNotJson.978, TotallyNotJson.239):
    let TotallyNotJson.237 : List U8 = StructAtIndex 0 TotallyNotJson.978;
    let TotallyNotJson.238 : U64 = StructAtIndex 1 TotallyNotJson.978;
    let TotallyNotJson.997 : {} = Struct {};
    let TotallyNotJson.240 : List U8 = CallByName Encode.24 TotallyNotJson.237 TotallyNotJson.239 TotallyNotJson.997;
    joinpoint TotallyNotJson.992 TotallyNotJson.241:
        let TotallyNotJson.990 : U64 = 1i64;
        let TotallyNotJson.989 : U64 = CallByName Num.20 TotallyNotJson.238 TotallyNotJson.990;
        let TotallyNotJson.988 : {List U8, U64} = Struct {TotallyNotJson.241, TotallyNotJson.989};
        ret TotallyNotJson.988;
    in
    let TotallyNotJson.996 : U64 = 1i64;
    let TotallyNotJson.993 : Int1 = CallByName Num.24 TotallyNotJson.238 TotallyNotJson.996;
    if TotallyNotJson.993 then
        let TotallyNotJson.995 : I64 = 44i64;
        let TotallyNotJson.994 : U8 = CallByName Num.127 TotallyNotJson.995;
        let TotallyNotJson.991 : List U8 = CallByName List.4 TotallyNotJson.240 TotallyNotJson.994;
        jump TotallyNotJson.992 TotallyNotJson.991;
    else
        jump TotallyNotJson.992 TotallyNotJson.240;

procedure TotallyNotJson.31 (TotallyNotJson.229, TotallyNotJson.230):
    let TotallyNotJson.1016 : {Str, List [C {}, C {}]} = Struct {TotallyNotJson.229, TotallyNotJson.230};
    let TotallyNotJson.1015 : {Str, List [C {}, C {}]} = CallByName Encode.23 TotallyNotJson.1016;
    ret TotallyNotJson.1015;

procedure TotallyNotJson.31 (TotallyNotJson.229, TotallyNotJson.230):
    let TotallyNotJson.1059 : {Str, List []} = Struct {TotallyNotJson.229, TotallyNotJson.230};
    let TotallyNotJson.1058 : {Str, List []} = CallByName Encode.23 TotallyNotJson.1059;
    ret TotallyNotJson.1058;

procedure TotallyNotJson.8 ():
    let TotallyNotJson.973 : {} = Struct {};
    ret TotallyNotJson.973;

procedure Test.0 ():
    let Test.13 : {{}, {}} = CallByName Test.3;
    let Test.14 : {} = CallByName TotallyNotJson.8;
    let Test.12 : List U8 = CallByName Encode.26 Test.13 Test.14;
    ret Test.12;
