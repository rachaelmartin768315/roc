procedure #Derived.0 (#Derived.1):
    let #Derived_gen.10 : [C {}, C {}] = TagId(0) #Derived.1;
    let #Derived_gen.9 : [C {}, C {}] = CallByName Encode.23 #Derived_gen.10;
    ret #Derived_gen.9;

procedure #Derived.2 (#Derived.3, #Derived.4, #Attr.12):
    let #Derived.1 : {} = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    joinpoint #Derived_gen.14 #Derived_gen.13:
        let #Derived_gen.12 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.13 #Derived.4;
        ret #Derived_gen.12;
    in
    let #Derived_gen.16 : Str = "A";
    let #Derived_gen.17 : List [] = Array [];
    let #Derived_gen.15 : {Str, List []} = CallByName Json.31 #Derived_gen.16 #Derived_gen.17;
    jump #Derived_gen.14 #Derived_gen.15;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.1 : [C {}, C {}] = TagId(1) #Derived.6;
    let #Derived_gen.0 : [C {}, C {}] = CallByName Encode.23 #Derived_gen.1;
    ret #Derived_gen.0;

procedure #Derived.7 (#Derived.8, #Derived.9, #Attr.12):
    let #Derived.6 : {} = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.8 #Derived_gen.4 #Derived.9;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "B";
    let #Derived_gen.8 : List [] = Array [];
    let #Derived_gen.6 : {Str, List []} = CallByName Json.31 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    dec Encode.99;
    let Encode.138 : Str = "a Lambda Set is empty. Most likely there is a type error in your program.";
    Crash Encode.138

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName Test.5 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Json.263 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.122 : U8 = GetTagId Encode.107;
    switch Encode.122:
        case 0:
            let Encode.121 : List U8 = CallByName #Derived.2 Encode.99 Encode.101 Encode.107;
            ret Encode.121;
    
        default:
            let Encode.121 : List U8 = CallByName #Derived.7 Encode.99 Encode.101 Encode.107;
            ret Encode.121;
    

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.134 : List U8 = CallByName Json.263 Encode.99 Encode.101 Encode.107;
    ret Encode.134;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {{}, {}} = CallByName Test.2 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.1171 : [C , C [], C , C , C , C ] = TagId(2) ;
    ret Json.1171;

procedure Json.263 (Json.264, Json.1174, #Attr.12):
    let Json.262 : List [C {}, C {}] = StructAtIndex 1 #Attr.12;
    let Json.261 : Str = StructAtIndex 0 #Attr.12;
    let Json.1212 : I64 = 123i64;
    let Json.1211 : U8 = CallByName Num.127 Json.1212;
    let Json.1208 : List U8 = CallByName List.4 Json.264 Json.1211;
    let Json.1210 : I64 = 34i64;
    let Json.1209 : U8 = CallByName Num.127 Json.1210;
    let Json.1206 : List U8 = CallByName List.4 Json.1208 Json.1209;
    let Json.1207 : List U8 = CallByName Str.12 Json.261;
    let Json.1203 : List U8 = CallByName List.8 Json.1206 Json.1207;
    let Json.1205 : I64 = 34i64;
    let Json.1204 : U8 = CallByName Num.127 Json.1205;
    let Json.1200 : List U8 = CallByName List.4 Json.1203 Json.1204;
    let Json.1202 : I64 = 58i64;
    let Json.1201 : U8 = CallByName Num.127 Json.1202;
    let Json.1197 : List U8 = CallByName List.4 Json.1200 Json.1201;
    let Json.1199 : I64 = 91i64;
    let Json.1198 : U8 = CallByName Num.127 Json.1199;
    let Json.267 : List U8 = CallByName List.4 Json.1197 Json.1198;
    let Json.1196 : U64 = CallByName List.6 Json.262;
    let Json.1184 : {List U8, U64} = Struct {Json.267, Json.1196};
    let Json.1183 : {List U8, U64} = CallByName List.18 Json.262 Json.1184 Json.1174;
    let Json.269 : List U8 = StructAtIndex 0 Json.1183;
    let Json.1182 : I64 = 93i64;
    let Json.1181 : U8 = CallByName Num.127 Json.1182;
    let Json.1178 : List U8 = CallByName List.4 Json.269 Json.1181;
    let Json.1180 : I64 = 125i64;
    let Json.1179 : U8 = CallByName Num.127 Json.1180;
    let Json.1177 : List U8 = CallByName List.4 Json.1178 Json.1179;
    ret Json.1177;

procedure Json.263 (Json.264, Json.1174, #Attr.12):
    let Json.262 : List [] = StructAtIndex 1 #Attr.12;
    let Json.261 : Str = StructAtIndex 0 #Attr.12;
    let Json.1263 : I64 = 123i64;
    let Json.1262 : U8 = CallByName Num.127 Json.1263;
    let Json.1259 : List U8 = CallByName List.4 Json.264 Json.1262;
    let Json.1261 : I64 = 34i64;
    let Json.1260 : U8 = CallByName Num.127 Json.1261;
    let Json.1257 : List U8 = CallByName List.4 Json.1259 Json.1260;
    let Json.1258 : List U8 = CallByName Str.12 Json.261;
    let Json.1254 : List U8 = CallByName List.8 Json.1257 Json.1258;
    let Json.1256 : I64 = 34i64;
    let Json.1255 : U8 = CallByName Num.127 Json.1256;
    let Json.1251 : List U8 = CallByName List.4 Json.1254 Json.1255;
    let Json.1253 : I64 = 58i64;
    let Json.1252 : U8 = CallByName Num.127 Json.1253;
    let Json.1248 : List U8 = CallByName List.4 Json.1251 Json.1252;
    let Json.1250 : I64 = 91i64;
    let Json.1249 : U8 = CallByName Num.127 Json.1250;
    let Json.267 : List U8 = CallByName List.4 Json.1248 Json.1249;
    let Json.1247 : U64 = CallByName List.6 Json.262;
    let Json.1235 : {List U8, U64} = Struct {Json.267, Json.1247};
    let Json.1234 : {List U8, U64} = CallByName List.18 Json.262 Json.1235 Json.1174;
    let Json.269 : List U8 = StructAtIndex 0 Json.1234;
    let Json.1233 : I64 = 93i64;
    let Json.1232 : U8 = CallByName Num.127 Json.1233;
    let Json.1229 : List U8 = CallByName List.4 Json.269 Json.1232;
    let Json.1231 : I64 = 125i64;
    let Json.1230 : U8 = CallByName Num.127 Json.1231;
    let Json.1228 : List U8 = CallByName List.4 Json.1229 Json.1230;
    ret Json.1228;

procedure Json.266 (Json.1176, Json.272, Json.265):
    let Json.270 : List U8 = StructAtIndex 0 Json.1176;
    let Json.271 : U64 = StructAtIndex 1 Json.1176;
    let Json.273 : List U8 = CallByName Encode.24 Json.270 Json.272 Json.265;
    joinpoint Json.1190 Json.274:
        let Json.1188 : U64 = 1i64;
        let Json.1187 : U64 = CallByName Num.20 Json.271 Json.1188;
        let Json.1186 : {List U8, U64} = Struct {Json.274, Json.1187};
        ret Json.1186;
    in
    let Json.1194 : U64 = 1i64;
    let Json.1191 : Int1 = CallByName Num.24 Json.271 Json.1194;
    if Json.1191 then
        let Json.1193 : I64 = 44i64;
        let Json.1192 : U8 = CallByName Num.127 Json.1193;
        let Json.1189 : List U8 = CallByName List.4 Json.273 Json.1192;
        jump Json.1190 Json.1189;
    else
        jump Json.1190 Json.273;

procedure Json.266 (Json.1176, Json.272, Json.265):
    let Json.270 : List U8 = StructAtIndex 0 Json.1176;
    let Json.271 : U64 = StructAtIndex 1 Json.1176;
    let Json.273 : List U8 = CallByName Encode.24 Json.270 Json.272 Json.265;
    joinpoint Json.1241 Json.274:
        let Json.1239 : U64 = 1i64;
        let Json.1238 : U64 = CallByName Num.20 Json.271 Json.1239;
        let Json.1237 : {List U8, U64} = Struct {Json.274, Json.1238};
        ret Json.1237;
    in
    let Json.1245 : U64 = 1i64;
    let Json.1242 : Int1 = CallByName Num.24 Json.271 Json.1245;
    if Json.1242 then
        let Json.1244 : I64 = 44i64;
        let Json.1243 : U8 = CallByName Num.127 Json.1244;
        let Json.1240 : List U8 = CallByName List.4 Json.273 Json.1243;
        jump Json.1241 Json.1240;
    else
        jump Json.1241 Json.273;

procedure Json.31 (Json.261, Json.262):
    let Json.1214 : {Str, List [C {}, C {}]} = Struct {Json.261, Json.262};
    let Json.1213 : {Str, List [C {}, C {}]} = CallByName Encode.23 Json.1214;
    ret Json.1213;

procedure Json.31 (Json.261, Json.262):
    let Json.1265 : {Str, List []} = Struct {Json.261, Json.262};
    let Json.1264 : {Str, List []} = CallByName Encode.23 Json.1265;
    ret Json.1264;

procedure List.139 (List.140, List.141, List.138):
    let List.539 : {List U8, U64} = CallByName Json.266 List.140 List.141 List.138;
    ret List.539;

procedure List.139 (List.140, List.141, List.138):
    let List.612 : {List U8, U64} = CallByName Json.266 List.140 List.141 List.138;
    ret List.612;

procedure List.18 (List.136, List.137, List.138):
    let List.520 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.520;

procedure List.18 (List.136, List.137, List.138):
    let List.593 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.593;

procedure List.4 (List.107, List.108):
    let List.592 : U64 = 1i64;
    let List.591 : List U8 = CallByName List.70 List.107 List.592;
    let List.590 : List U8 = CallByName List.71 List.591 List.108;
    ret List.590;

procedure List.6 (#Attr.2):
    let List.540 : U64 = lowlevel ListLen #Attr.2;
    ret List.540;

procedure List.6 (#Attr.2):
    let List.613 : U64 = lowlevel ListLen #Attr.2;
    ret List.613;

procedure List.66 (#Attr.2, #Attr.3):
    let List.536 : [C {}, C {}] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.536;

procedure List.66 (#Attr.2, #Attr.3):
    let List.609 : [] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.609;

procedure List.70 (#Attr.2, #Attr.3):
    let List.571 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.571;

procedure List.71 (#Attr.2, #Attr.3):
    let List.569 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.569;

procedure List.8 (#Attr.2, #Attr.3):
    let List.614 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.614;

procedure List.80 (List.551, List.552, List.553, List.554, List.555):
    joinpoint List.526 List.433 List.434 List.435 List.436 List.437:
        let List.528 : Int1 = CallByName Num.22 List.436 List.437;
        if List.528 then
            let List.535 : [C {}, C {}] = CallByName List.66 List.433 List.436;
            let List.529 : {List U8, U64} = CallByName List.139 List.434 List.535 List.435;
            let List.532 : U64 = 1i64;
            let List.531 : U64 = CallByName Num.19 List.436 List.532;
            jump List.526 List.433 List.529 List.435 List.531 List.437;
        else
            dec List.433;
            ret List.434;
    in
    jump List.526 List.551 List.552 List.553 List.554 List.555;

procedure List.80 (List.624, List.625, List.626, List.627, List.628):
    joinpoint List.599 List.433 List.434 List.435 List.436 List.437:
        let List.601 : Int1 = CallByName Num.22 List.436 List.437;
        if List.601 then
            let List.608 : [] = CallByName List.66 List.433 List.436;
            let List.602 : {List U8, U64} = CallByName List.139 List.434 List.608 List.435;
            let List.605 : U64 = 1i64;
            let List.604 : U64 = CallByName Num.19 List.436 List.605;
            jump List.599 List.433 List.602 List.435 List.604 List.437;
        else
            dec List.433;
            ret List.434;
    in
    jump List.599 List.624 List.625 List.626 List.627 List.628;

procedure List.92 (List.430, List.431, List.432):
    let List.524 : U64 = 0i64;
    let List.525 : U64 = CallByName List.6 List.430;
    let List.523 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.524 List.525;
    ret List.523;

procedure List.92 (List.430, List.431, List.432):
    let List.597 : U64 = 0i64;
    let List.598 : U64 = CallByName List.6 List.430;
    let List.596 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.597 List.598;
    ret List.596;

procedure Num.127 (#Attr.2):
    let Num.309 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.309;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.312 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.312;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.310 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.310;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.313 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.313;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.311 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.311;

procedure Str.12 (#Attr.2):
    let Str.300 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.300;

procedure Test.2 (Test.11):
    let Test.18 : {{}, {}} = CallByName Encode.23 Test.11;
    ret Test.18;

procedure Test.3 ():
    let Test.16 : {} = Struct {};
    let Test.17 : {} = Struct {};
    let Test.15 : {{}, {}} = Struct {Test.16, Test.17};
    ret Test.15;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.23 Test.8:
        let Test.21 : List U8 = CallByName Encode.24 Test.6 Test.8 Test.7;
        ret Test.21;
    in
    let Test.28 : Int1 = CallByName Bool.2;
    if Test.28 then
        let Test.29 : Str = "A";
        let Test.32 : {} = StructAtIndex 0 Test.4;
        let Test.31 : [C {}, C {}] = CallByName #Derived.0 Test.32;
        let Test.30 : List [C {}, C {}] = Array [Test.31];
        let Test.22 : {Str, List [C {}, C {}]} = CallByName Json.31 Test.29 Test.30;
        jump Test.23 Test.22;
    else
        let Test.24 : Str = "B";
        let Test.27 : {} = StructAtIndex 1 Test.4;
        let Test.26 : [C {}, C {}] = CallByName #Derived.5 Test.27;
        let Test.25 : List [C {}, C {}] = Array [Test.26];
        let Test.22 : {Str, List [C {}, C {}]} = CallByName Json.31 Test.24 Test.25;
        jump Test.23 Test.22;

procedure Test.0 ():
    let Test.13 : {{}, {}} = CallByName Test.3;
    let Test.14 : [C , C [], C , C , C , C ] = CallByName Json.1;
    let Test.12 : List U8 = CallByName Encode.26 Test.13 Test.14;
    ret Test.12;
