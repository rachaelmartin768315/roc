procedure #Derived.0 (#Derived.1):
    let #Derived_gen.11 : [C {}, C {}] = TagId(0) #Derived.1;
    let #Derived_gen.10 : [C {}, C {}] = CallByName Encode.23 #Derived_gen.11;
    ret #Derived_gen.10;

procedure #Derived.2 (#Derived.3, #Derived.4, #Attr.12):
    let #Derived_gen.19 : {} = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    joinpoint #Derived_gen.15 #Derived_gen.14:
        let #Derived_gen.13 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.14 #Derived.4;
        ret #Derived_gen.13;
    in
    let #Derived_gen.17 : Str = "A";
    let #Derived_gen.18 : List [] = Array [];
    let #Derived_gen.16 : {Str, List []} = CallByName TotallyNotJson.31 #Derived_gen.17 #Derived_gen.18;
    jump #Derived_gen.15 #Derived_gen.16;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.1 : [C {}, C {}] = TagId(1) #Derived.6;
    let #Derived_gen.0 : [C {}, C {}] = CallByName Encode.23 #Derived_gen.1;
    ret #Derived_gen.0;

procedure #Derived.7 (#Derived.8, #Derived.9, #Attr.12):
    let #Derived_gen.9 : {} = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.8 #Derived_gen.4 #Derived.9;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "B";
    let #Derived_gen.8 : List [] = Array [];
    let #Derived_gen.6 : {Str, List []} = CallByName TotallyNotJson.31 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    dec Encode.99;
    let Encode.125 : Str = "a Lambda Set is empty. Most likely there is a type error in your program.";
    Crash Encode.125

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName Test.5 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.113 : List U8 = CallByName TotallyNotJson.228 Encode.99 Encode.101 Encode.107;
    ret Encode.113;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.117 : U8 = GetTagId Encode.107;
    switch Encode.117:
        case 0:
            let Encode.116 : List U8 = CallByName #Derived.2 Encode.99 Encode.101 Encode.107;
            ret Encode.116;
    
        default:
            let Encode.116 : List U8 = CallByName #Derived.7 Encode.99 Encode.101 Encode.107;
            ret Encode.116;
    

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.121 : List U8 = CallByName TotallyNotJson.228 Encode.99 Encode.101 Encode.107;
    ret Encode.121;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {{}, {}} = CallByName Test.2 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure List.18 (List.158, List.159, List.160):
    let List.598 : U64 = 0i64;
    let List.599 : U64 = CallByName List.6 List.158;
    let List.597 : {List U8, U64} = CallByName List.90 List.158 List.159 List.160 List.598 List.599;
    ret List.597;

procedure List.18 (List.158, List.159, List.160):
    let List.638 : U64 = 0i64;
    let List.639 : U64 = CallByName List.6 List.158;
    let List.637 : {List U8, U64} = CallByName List.90 List.158 List.159 List.160 List.638 List.639;
    ret List.637;

procedure List.4 (List.122, List.123):
    let List.636 : U64 = 1i64;
    let List.635 : List U8 = CallByName List.70 List.122 List.636;
    let List.634 : List U8 = CallByName List.71 List.635 List.123;
    ret List.634;

procedure List.6 (#Attr.2):
    let List.609 : U64 = lowlevel ListLen #Attr.2;
    ret List.609;

procedure List.6 (#Attr.2):
    let List.649 : U64 = lowlevel ListLen #Attr.2;
    ret List.649;

procedure List.66 (#Attr.2, #Attr.3):
    let List.607 : [C {}, C {}] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.607;

procedure List.66 (#Attr.2, #Attr.3):
    let List.647 : [] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.647;

procedure List.70 (#Attr.2, #Attr.3):
    let List.615 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.615;

procedure List.71 (#Attr.2, #Attr.3):
    let List.613 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.613;

procedure List.8 (#Attr.2, #Attr.3):
    let List.650 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.650;

procedure List.90 (#Derived_gen.23, #Derived_gen.24, #Derived_gen.25, #Derived_gen.26, #Derived_gen.27):
    joinpoint List.640 List.161 List.162 List.163 List.164 List.165:
        let List.642 : Int1 = CallByName Num.22 List.164 List.165;
        if List.642 then
            let List.646 : [] = CallByName List.66 List.161 List.164;
            let List.166 : {List U8, U64} = CallByName TotallyNotJson.230 List.162 List.646;
            let List.645 : U64 = 1i64;
            let List.644 : U64 = CallByName Num.51 List.164 List.645;
            jump List.640 List.161 List.166 List.163 List.644 List.165;
        else
            dec List.161;
            ret List.162;
    in
    jump List.640 #Derived_gen.23 #Derived_gen.24 #Derived_gen.25 #Derived_gen.26 #Derived_gen.27;

procedure List.90 (#Derived_gen.40, #Derived_gen.41, #Derived_gen.42, #Derived_gen.43, #Derived_gen.44):
    joinpoint List.600 List.161 List.162 List.163 List.164 List.165:
        let List.602 : Int1 = CallByName Num.22 List.164 List.165;
        if List.602 then
            let List.606 : [C {}, C {}] = CallByName List.66 List.161 List.164;
            let List.166 : {List U8, U64} = CallByName TotallyNotJson.230 List.162 List.606;
            let List.605 : U64 = 1i64;
            let List.604 : U64 = CallByName Num.51 List.164 List.605;
            jump List.600 List.161 List.166 List.163 List.604 List.165;
        else
            dec List.161;
            ret List.162;
    in
    jump List.600 #Derived_gen.40 #Derived_gen.41 #Derived_gen.42 #Derived_gen.43 #Derived_gen.44;

procedure Num.127 (#Attr.2):
    let Num.286 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.286;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.287 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.287;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.290 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.290;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.288 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.289 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.289;

procedure Str.12 (#Attr.2):
    let Str.250 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.250;

procedure Test.2 (Test.11):
    let Test.18 : {{}, {}} = CallByName Encode.23 Test.11;
    ret Test.18;

procedure Test.3 ():
    let Test.16 : {} = Struct {};
    let Test.17 : {} = Struct {};
    let Test.15 : {{}, {}} = Struct {Test.16, Test.17};
    ret Test.15;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.23 Test.8:
        let Test.21 : List U8 = CallByName Encode.24 Test.6 Test.8 Test.7;
        ret Test.21;
    in
    let Test.28 : Int1 = CallByName Bool.2;
    if Test.28 then
        let Test.29 : Str = "A";
        let Test.32 : {} = StructAtIndex 0 Test.4;
        let Test.31 : [C {}, C {}] = CallByName #Derived.0 Test.32;
        let Test.30 : List [C {}, C {}] = Array [Test.31];
        let Test.22 : {Str, List [C {}, C {}]} = CallByName TotallyNotJson.31 Test.29 Test.30;
        jump Test.23 Test.22;
    else
        let Test.24 : Str = "B";
        let Test.27 : {} = StructAtIndex 1 Test.4;
        let Test.26 : [C {}, C {}] = CallByName #Derived.5 Test.27;
        let Test.25 : List [C {}, C {}] = Array [Test.26];
        let Test.22 : {Str, List [C {}, C {}]} = CallByName TotallyNotJson.31 Test.24 Test.25;
        jump Test.23 Test.22;

procedure TotallyNotJson.228 (TotallyNotJson.229, TotallyNotJson.973, #Attr.12):
    let TotallyNotJson.227 : List [C {}, C {}] = StructAtIndex 1 #Attr.12;
    let TotallyNotJson.226 : Str = StructAtIndex 0 #Attr.12;
    let TotallyNotJson.1011 : I64 = 123i64;
    let TotallyNotJson.1010 : U8 = CallByName Num.127 TotallyNotJson.1011;
    let TotallyNotJson.1007 : List U8 = CallByName List.4 TotallyNotJson.229 TotallyNotJson.1010;
    let TotallyNotJson.1009 : I64 = 34i64;
    let TotallyNotJson.1008 : U8 = CallByName Num.127 TotallyNotJson.1009;
    let TotallyNotJson.1005 : List U8 = CallByName List.4 TotallyNotJson.1007 TotallyNotJson.1008;
    let TotallyNotJson.1006 : List U8 = CallByName Str.12 TotallyNotJson.226;
    let TotallyNotJson.1002 : List U8 = CallByName List.8 TotallyNotJson.1005 TotallyNotJson.1006;
    let TotallyNotJson.1004 : I64 = 34i64;
    let TotallyNotJson.1003 : U8 = CallByName Num.127 TotallyNotJson.1004;
    let TotallyNotJson.999 : List U8 = CallByName List.4 TotallyNotJson.1002 TotallyNotJson.1003;
    let TotallyNotJson.1001 : I64 = 58i64;
    let TotallyNotJson.1000 : U8 = CallByName Num.127 TotallyNotJson.1001;
    let TotallyNotJson.996 : List U8 = CallByName List.4 TotallyNotJson.999 TotallyNotJson.1000;
    let TotallyNotJson.998 : I64 = 91i64;
    let TotallyNotJson.997 : U8 = CallByName Num.127 TotallyNotJson.998;
    let TotallyNotJson.231 : List U8 = CallByName List.4 TotallyNotJson.996 TotallyNotJson.997;
    let TotallyNotJson.995 : U64 = CallByName List.6 TotallyNotJson.227;
    let TotallyNotJson.983 : {List U8, U64} = Struct {TotallyNotJson.231, TotallyNotJson.995};
    let TotallyNotJson.984 : {} = Struct {};
    let TotallyNotJson.982 : {List U8, U64} = CallByName List.18 TotallyNotJson.227 TotallyNotJson.983 TotallyNotJson.984;
    let TotallyNotJson.233 : List U8 = StructAtIndex 0 TotallyNotJson.982;
    let TotallyNotJson.981 : I64 = 93i64;
    let TotallyNotJson.980 : U8 = CallByName Num.127 TotallyNotJson.981;
    let TotallyNotJson.977 : List U8 = CallByName List.4 TotallyNotJson.233 TotallyNotJson.980;
    let TotallyNotJson.979 : I64 = 125i64;
    let TotallyNotJson.978 : U8 = CallByName Num.127 TotallyNotJson.979;
    let TotallyNotJson.976 : List U8 = CallByName List.4 TotallyNotJson.977 TotallyNotJson.978;
    ret TotallyNotJson.976;

procedure TotallyNotJson.228 (TotallyNotJson.229, TotallyNotJson.973, #Attr.12):
    let TotallyNotJson.227 : List [] = StructAtIndex 1 #Attr.12;
    let TotallyNotJson.226 : Str = StructAtIndex 0 #Attr.12;
    let TotallyNotJson.1054 : I64 = 123i64;
    let TotallyNotJson.1053 : U8 = CallByName Num.127 TotallyNotJson.1054;
    let TotallyNotJson.1050 : List U8 = CallByName List.4 TotallyNotJson.229 TotallyNotJson.1053;
    let TotallyNotJson.1052 : I64 = 34i64;
    let TotallyNotJson.1051 : U8 = CallByName Num.127 TotallyNotJson.1052;
    let TotallyNotJson.1048 : List U8 = CallByName List.4 TotallyNotJson.1050 TotallyNotJson.1051;
    let TotallyNotJson.1049 : List U8 = CallByName Str.12 TotallyNotJson.226;
    let TotallyNotJson.1045 : List U8 = CallByName List.8 TotallyNotJson.1048 TotallyNotJson.1049;
    let TotallyNotJson.1047 : I64 = 34i64;
    let TotallyNotJson.1046 : U8 = CallByName Num.127 TotallyNotJson.1047;
    let TotallyNotJson.1042 : List U8 = CallByName List.4 TotallyNotJson.1045 TotallyNotJson.1046;
    let TotallyNotJson.1044 : I64 = 58i64;
    let TotallyNotJson.1043 : U8 = CallByName Num.127 TotallyNotJson.1044;
    let TotallyNotJson.1039 : List U8 = CallByName List.4 TotallyNotJson.1042 TotallyNotJson.1043;
    let TotallyNotJson.1041 : I64 = 91i64;
    let TotallyNotJson.1040 : U8 = CallByName Num.127 TotallyNotJson.1041;
    let TotallyNotJson.231 : List U8 = CallByName List.4 TotallyNotJson.1039 TotallyNotJson.1040;
    let TotallyNotJson.1038 : U64 = CallByName List.6 TotallyNotJson.227;
    let TotallyNotJson.1026 : {List U8, U64} = Struct {TotallyNotJson.231, TotallyNotJson.1038};
    let TotallyNotJson.1027 : {} = Struct {};
    let TotallyNotJson.1025 : {List U8, U64} = CallByName List.18 TotallyNotJson.227 TotallyNotJson.1026 TotallyNotJson.1027;
    let TotallyNotJson.233 : List U8 = StructAtIndex 0 TotallyNotJson.1025;
    let TotallyNotJson.1024 : I64 = 93i64;
    let TotallyNotJson.1023 : U8 = CallByName Num.127 TotallyNotJson.1024;
    let TotallyNotJson.1020 : List U8 = CallByName List.4 TotallyNotJson.233 TotallyNotJson.1023;
    let TotallyNotJson.1022 : I64 = 125i64;
    let TotallyNotJson.1021 : U8 = CallByName Num.127 TotallyNotJson.1022;
    let TotallyNotJson.1019 : List U8 = CallByName List.4 TotallyNotJson.1020 TotallyNotJson.1021;
    ret TotallyNotJson.1019;

procedure TotallyNotJson.230 (TotallyNotJson.975, TotallyNotJson.236):
    let TotallyNotJson.234 : List U8 = StructAtIndex 0 TotallyNotJson.975;
    let TotallyNotJson.235 : U64 = StructAtIndex 1 TotallyNotJson.975;
    let TotallyNotJson.1037 : {} = Struct {};
    let TotallyNotJson.237 : List U8 = CallByName Encode.24 TotallyNotJson.234 TotallyNotJson.236 TotallyNotJson.1037;
    joinpoint TotallyNotJson.1032 TotallyNotJson.238:
        let TotallyNotJson.1030 : U64 = 1i64;
        let TotallyNotJson.1029 : U64 = CallByName Num.20 TotallyNotJson.235 TotallyNotJson.1030;
        let TotallyNotJson.1028 : {List U8, U64} = Struct {TotallyNotJson.238, TotallyNotJson.1029};
        ret TotallyNotJson.1028;
    in
    let TotallyNotJson.1036 : U64 = 1i64;
    let TotallyNotJson.1033 : Int1 = CallByName Num.24 TotallyNotJson.235 TotallyNotJson.1036;
    if TotallyNotJson.1033 then
        let TotallyNotJson.1035 : I64 = 44i64;
        let TotallyNotJson.1034 : U8 = CallByName Num.127 TotallyNotJson.1035;
        let TotallyNotJson.1031 : List U8 = CallByName List.4 TotallyNotJson.237 TotallyNotJson.1034;
        jump TotallyNotJson.1032 TotallyNotJson.1031;
    else
        jump TotallyNotJson.1032 TotallyNotJson.237;

procedure TotallyNotJson.230 (TotallyNotJson.975, TotallyNotJson.236):
    let TotallyNotJson.234 : List U8 = StructAtIndex 0 TotallyNotJson.975;
    let TotallyNotJson.235 : U64 = StructAtIndex 1 TotallyNotJson.975;
    let TotallyNotJson.994 : {} = Struct {};
    let TotallyNotJson.237 : List U8 = CallByName Encode.24 TotallyNotJson.234 TotallyNotJson.236 TotallyNotJson.994;
    joinpoint TotallyNotJson.989 TotallyNotJson.238:
        let TotallyNotJson.987 : U64 = 1i64;
        let TotallyNotJson.986 : U64 = CallByName Num.20 TotallyNotJson.235 TotallyNotJson.987;
        let TotallyNotJson.985 : {List U8, U64} = Struct {TotallyNotJson.238, TotallyNotJson.986};
        ret TotallyNotJson.985;
    in
    let TotallyNotJson.993 : U64 = 1i64;
    let TotallyNotJson.990 : Int1 = CallByName Num.24 TotallyNotJson.235 TotallyNotJson.993;
    if TotallyNotJson.990 then
        let TotallyNotJson.992 : I64 = 44i64;
        let TotallyNotJson.991 : U8 = CallByName Num.127 TotallyNotJson.992;
        let TotallyNotJson.988 : List U8 = CallByName List.4 TotallyNotJson.237 TotallyNotJson.991;
        jump TotallyNotJson.989 TotallyNotJson.988;
    else
        jump TotallyNotJson.989 TotallyNotJson.237;

procedure TotallyNotJson.31 (TotallyNotJson.226, TotallyNotJson.227):
    let TotallyNotJson.1013 : {Str, List [C {}, C {}]} = Struct {TotallyNotJson.226, TotallyNotJson.227};
    let TotallyNotJson.1012 : {Str, List [C {}, C {}]} = CallByName Encode.23 TotallyNotJson.1013;
    ret TotallyNotJson.1012;

procedure TotallyNotJson.31 (TotallyNotJson.226, TotallyNotJson.227):
    let TotallyNotJson.1056 : {Str, List []} = Struct {TotallyNotJson.226, TotallyNotJson.227};
    let TotallyNotJson.1055 : {Str, List []} = CallByName Encode.23 TotallyNotJson.1056;
    ret TotallyNotJson.1055;

procedure TotallyNotJson.8 ():
    let TotallyNotJson.970 : {} = Struct {};
    ret TotallyNotJson.970;

procedure Test.0 ():
    let Test.13 : {{}, {}} = CallByName Test.3;
    let Test.14 : {} = CallByName TotallyNotJson.8;
    let Test.12 : List U8 = CallByName Encode.26 Test.13 Test.14;
    ret Test.12;
