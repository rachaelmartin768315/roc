procedure #Derived.0 (#Derived.1):
    let #Derived_gen.10 : [C {}, C {}] = TagId(0) #Derived.1;
    let #Derived_gen.9 : [C {}, C {}] = CallByName Encode.22 #Derived_gen.10;
    ret #Derived_gen.9;

procedure #Derived.2 (#Derived.3, #Derived.4, #Attr.12):
    let #Derived.1 : {} = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    joinpoint #Derived_gen.14 #Derived_gen.13:
        let #Derived_gen.12 : List U8 = CallByName Encode.23 #Derived.3 #Derived_gen.13 #Derived.4;
        ret #Derived_gen.12;
    in
    let #Derived_gen.16 : Str = "A";
    let #Derived_gen.17 : List [] = Array [];
    let #Derived_gen.15 : {Str, List []} = CallByName Json.21 #Derived_gen.16 #Derived_gen.17;
    jump #Derived_gen.14 #Derived_gen.15;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.1 : [C {}, C {}] = TagId(1) #Derived.6;
    let #Derived_gen.0 : [C {}, C {}] = CallByName Encode.22 #Derived_gen.1;
    ret #Derived_gen.0;

procedure #Derived.7 (#Derived.8, #Derived.9, #Attr.12):
    let #Derived.6 : {} = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.8 #Derived_gen.4 #Derived.9;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "B";
    let #Derived_gen.8 : List [] = Array [];
    let #Derived_gen.6 : {Str, List []} = CallByName Json.21 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName Test.5 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.129 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.117 : U8 = GetTagId Encode.102;
    switch Encode.117:
        case 0:
            let Encode.116 : List U8 = CallByName #Derived.2 Encode.94 Encode.96 Encode.102;
            ret Encode.116;
    
        default:
            let Encode.116 : List U8 = CallByName #Derived.7 Encode.94 Encode.96 Encode.102;
            ret Encode.116;
    

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.129 : List U8 = CallByName Json.129 Encode.94 Encode.96 Encode.102;
    ret Encode.129;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.133 : Str = "a Lambda Set is empty. Most likely there is a type error in your program.";
    Crash Encode.133

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : {{}, {}} = CallByName Test.2 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.425 : {} = Struct {};
    ret Json.425;

procedure Json.129 (Json.130, Json.428, #Attr.12):
    let Json.128 : List [C {}, C {}] = StructAtIndex 1 #Attr.12;
    inc Json.128;
    let Json.127 : Str = StructAtIndex 0 #Attr.12;
    inc Json.127;
    dec #Attr.12;
    let Json.466 : I64 = 123i64;
    let Json.465 : U8 = CallByName Num.127 Json.466;
    let Json.462 : List U8 = CallByName List.4 Json.130 Json.465;
    let Json.464 : I64 = 34i64;
    let Json.463 : U8 = CallByName Num.127 Json.464;
    let Json.460 : List U8 = CallByName List.4 Json.462 Json.463;
    let Json.461 : List U8 = CallByName Str.12 Json.127;
    let Json.457 : List U8 = CallByName List.8 Json.460 Json.461;
    let Json.459 : I64 = 34i64;
    let Json.458 : U8 = CallByName Num.127 Json.459;
    let Json.454 : List U8 = CallByName List.4 Json.457 Json.458;
    let Json.456 : I64 = 58i64;
    let Json.455 : U8 = CallByName Num.127 Json.456;
    let Json.451 : List U8 = CallByName List.4 Json.454 Json.455;
    let Json.453 : I64 = 91i64;
    let Json.452 : U8 = CallByName Num.127 Json.453;
    let Json.132 : List U8 = CallByName List.4 Json.451 Json.452;
    let Json.450 : U64 = CallByName List.6 Json.128;
    let Json.438 : {List U8, U64} = Struct {Json.132, Json.450};
    let Json.439 : {} = Struct {};
    let Json.437 : {List U8, U64} = CallByName List.18 Json.128 Json.438 Json.439;
    dec Json.128;
    let Json.134 : List U8 = StructAtIndex 0 Json.437;
    inc Json.134;
    dec Json.437;
    let Json.436 : I64 = 93i64;
    let Json.435 : U8 = CallByName Num.127 Json.436;
    let Json.432 : List U8 = CallByName List.4 Json.134 Json.435;
    let Json.434 : I64 = 125i64;
    let Json.433 : U8 = CallByName Num.127 Json.434;
    let Json.431 : List U8 = CallByName List.4 Json.432 Json.433;
    ret Json.431;

procedure Json.129 (Json.130, Json.428, #Attr.12):
    let Json.128 : List [] = StructAtIndex 1 #Attr.12;
    inc Json.128;
    let Json.127 : Str = StructAtIndex 0 #Attr.12;
    inc Json.127;
    dec #Attr.12;
    let Json.516 : I64 = 123i64;
    let Json.515 : U8 = CallByName Num.127 Json.516;
    let Json.512 : List U8 = CallByName List.4 Json.130 Json.515;
    let Json.514 : I64 = 34i64;
    let Json.513 : U8 = CallByName Num.127 Json.514;
    let Json.510 : List U8 = CallByName List.4 Json.512 Json.513;
    let Json.511 : List U8 = CallByName Str.12 Json.127;
    let Json.507 : List U8 = CallByName List.8 Json.510 Json.511;
    let Json.509 : I64 = 34i64;
    let Json.508 : U8 = CallByName Num.127 Json.509;
    let Json.504 : List U8 = CallByName List.4 Json.507 Json.508;
    let Json.506 : I64 = 58i64;
    let Json.505 : U8 = CallByName Num.127 Json.506;
    let Json.501 : List U8 = CallByName List.4 Json.504 Json.505;
    let Json.503 : I64 = 91i64;
    let Json.502 : U8 = CallByName Num.127 Json.503;
    let Json.132 : List U8 = CallByName List.4 Json.501 Json.502;
    let Json.500 : U64 = CallByName List.6 Json.128;
    let Json.488 : {List U8, U64} = Struct {Json.132, Json.500};
    let Json.489 : {} = Struct {};
    let Json.487 : {List U8, U64} = CallByName List.18 Json.128 Json.488 Json.489;
    dec Json.128;
    let Json.134 : List U8 = StructAtIndex 0 Json.487;
    inc Json.134;
    dec Json.487;
    let Json.486 : I64 = 93i64;
    let Json.485 : U8 = CallByName Num.127 Json.486;
    let Json.482 : List U8 = CallByName List.4 Json.134 Json.485;
    let Json.484 : I64 = 125i64;
    let Json.483 : U8 = CallByName Num.127 Json.484;
    let Json.481 : List U8 = CallByName List.4 Json.482 Json.483;
    ret Json.481;

procedure Json.131 (Json.430, Json.137):
    let Json.135 : List U8 = StructAtIndex 0 Json.430;
    inc Json.135;
    let Json.136 : U64 = StructAtIndex 1 Json.430;
    dec Json.430;
    let Json.449 : {} = Struct {};
    let Json.138 : List U8 = CallByName Encode.23 Json.135 Json.137 Json.449;
    joinpoint Json.444 Json.139:
        let Json.442 : U64 = 1i64;
        let Json.441 : U64 = CallByName Num.20 Json.136 Json.442;
        let Json.440 : {List U8, U64} = Struct {Json.139, Json.441};
        ret Json.440;
    in
    let Json.448 : U64 = 1i64;
    let Json.445 : Int1 = CallByName Num.24 Json.136 Json.448;
    if Json.445 then
        let Json.447 : I64 = 44i64;
        let Json.446 : U8 = CallByName Num.127 Json.447;
        let Json.443 : List U8 = CallByName List.4 Json.138 Json.446;
        jump Json.444 Json.443;
    else
        jump Json.444 Json.138;

procedure Json.131 (Json.430, Json.137):
    let Json.135 : List U8 = StructAtIndex 0 Json.430;
    inc Json.135;
    let Json.136 : U64 = StructAtIndex 1 Json.430;
    dec Json.430;
    let Json.499 : {} = Struct {};
    let Json.138 : List U8 = CallByName Encode.23 Json.135 Json.137 Json.499;
    dec Json.135;
    joinpoint Json.494 Json.139:
        let Json.492 : U64 = 1i64;
        let Json.491 : U64 = CallByName Num.20 Json.136 Json.492;
        let Json.490 : {List U8, U64} = Struct {Json.139, Json.491};
        ret Json.490;
    in
    let Json.498 : U64 = 1i64;
    let Json.495 : Int1 = CallByName Num.24 Json.136 Json.498;
    if Json.495 then
        let Json.497 : I64 = 44i64;
        let Json.496 : U8 = CallByName Num.127 Json.497;
        let Json.493 : List U8 = CallByName List.4 Json.138 Json.496;
        jump Json.494 Json.493;
    else
        jump Json.494 Json.138;

procedure Json.21 (Json.127, Json.128):
    let Json.468 : {Str, List [C {}, C {}]} = Struct {Json.127, Json.128};
    let Json.467 : {Str, List [C {}, C {}]} = CallByName Encode.22 Json.468;
    ret Json.467;

procedure Json.21 (Json.127, Json.128):
    let Json.518 : {Str, List []} = Struct {Json.127, Json.128};
    let Json.517 : {Str, List []} = CallByName Encode.22 Json.518;
    ret Json.517;

procedure List.139 (List.140, List.141, List.138):
    let List.539 : {List U8, U64} = CallByName Json.131 List.140 List.141;
    ret List.539;

procedure List.139 (List.140, List.141, List.138):
    let List.612 : {List U8, U64} = CallByName Json.131 List.140 List.141;
    ret List.612;

procedure List.18 (List.136, List.137, List.138):
    let List.520 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.520;

procedure List.18 (List.136, List.137, List.138):
    let List.593 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.593;

procedure List.4 (List.107, List.108):
    let List.592 : U64 = 1i64;
    let List.591 : List U8 = CallByName List.70 List.107 List.592;
    let List.590 : List U8 = CallByName List.71 List.591 List.108;
    ret List.590;

procedure List.6 (#Attr.2):
    let List.540 : U64 = lowlevel ListLen #Attr.2;
    ret List.540;

procedure List.6 (#Attr.2):
    let List.613 : U64 = lowlevel ListLen #Attr.2;
    ret List.613;

procedure List.66 (#Attr.2, #Attr.3):
    let List.536 : [C {}, C {}] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.536;

procedure List.66 (#Attr.2, #Attr.3):
    let List.609 : [] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.609;

procedure List.70 (#Attr.2, #Attr.3):
    let List.571 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.571;

procedure List.71 (#Attr.2, #Attr.3):
    let List.569 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.569;

procedure List.8 (#Attr.2, #Attr.3):
    let List.614 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.614;

procedure List.80 (List.551, List.552, List.553, List.554, List.555):
    joinpoint List.526 List.433 List.434 List.435 List.436 List.437:
        let List.528 : Int1 = CallByName Num.22 List.436 List.437;
        if List.528 then
            let List.535 : [C {}, C {}] = CallByName List.66 List.433 List.436;
            let List.529 : {List U8, U64} = CallByName List.139 List.434 List.535 List.435;
            let List.532 : U64 = 1i64;
            let List.531 : U64 = CallByName Num.19 List.436 List.532;
            jump List.526 List.433 List.529 List.435 List.531 List.437;
        else
            ret List.434;
    in
    jump List.526 List.551 List.552 List.553 List.554 List.555;

procedure List.80 (List.624, List.625, List.626, List.627, List.628):
    joinpoint List.599 List.433 List.434 List.435 List.436 List.437:
        let List.601 : Int1 = CallByName Num.22 List.436 List.437;
        if List.601 then
            let List.608 : [] = CallByName List.66 List.433 List.436;
            let List.602 : {List U8, U64} = CallByName List.139 List.434 List.608 List.435;
            let List.605 : U64 = 1i64;
            let List.604 : U64 = CallByName Num.19 List.436 List.605;
            jump List.599 List.433 List.602 List.435 List.604 List.437;
        else
            ret List.434;
    in
    jump List.599 List.624 List.625 List.626 List.627 List.628;

procedure List.92 (List.430, List.431, List.432):
    let List.524 : U64 = 0i64;
    let List.525 : U64 = CallByName List.6 List.430;
    let List.523 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.524 List.525;
    ret List.523;

procedure List.92 (List.430, List.431, List.432):
    let List.597 : U64 = 0i64;
    let List.598 : U64 = CallByName List.6 List.430;
    let List.596 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.597 List.598;
    ret List.596;

procedure Num.127 (#Attr.2):
    let Num.303 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.303;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.306 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.306;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.304 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.304;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.307 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.307;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.305 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.305;

procedure Str.12 (#Attr.2):
    let Str.267 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.267;

procedure Test.2 (Test.11):
    let Test.18 : {{}, {}} = CallByName Encode.22 Test.11;
    ret Test.18;

procedure Test.3 ():
    let Test.16 : {} = Struct {};
    let Test.17 : {} = Struct {};
    let Test.15 : {{}, {}} = Struct {Test.16, Test.17};
    ret Test.15;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.23 Test.8:
        let Test.21 : List U8 = CallByName Encode.23 Test.6 Test.8 Test.7;
        ret Test.21;
    in
    let Test.28 : Int1 = CallByName Bool.2;
    if Test.28 then
        let Test.29 : Str = "A";
        let Test.32 : {} = StructAtIndex 0 Test.4;
        let Test.31 : [C {}, C {}] = CallByName #Derived.0 Test.32;
        let Test.30 : List [C {}, C {}] = Array [Test.31];
        let Test.22 : {Str, List [C {}, C {}]} = CallByName Json.21 Test.29 Test.30;
        jump Test.23 Test.22;
    else
        let Test.24 : Str = "B";
        let Test.27 : {} = StructAtIndex 1 Test.4;
        let Test.26 : [C {}, C {}] = CallByName #Derived.5 Test.27;
        let Test.25 : List [C {}, C {}] = Array [Test.26];
        let Test.22 : {Str, List [C {}, C {}]} = CallByName Json.21 Test.24 Test.25;
        jump Test.23 Test.22;

procedure Test.0 ():
    let Test.13 : {{}, {}} = CallByName Test.3;
    let Test.14 : {} = CallByName Json.1;
    let Test.12 : List U8 = CallByName Encode.25 Test.13 Test.14;
    ret Test.12;
