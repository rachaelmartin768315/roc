procedure #Derived.0 (#Derived.1):
    let #Derived_gen.10 : [C {}, C {}] = TagId(0) #Derived.1;
    let #Derived_gen.9 : [C {}, C {}] = CallByName Encode.22 #Derived_gen.10;
    ret #Derived_gen.9;

procedure #Derived.2 (#Derived.3, #Derived.4, #Attr.12):
    let #Derived.1 : {} = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    joinpoint #Derived_gen.14 #Derived_gen.13:
        let #Derived_gen.12 : List U8 = CallByName Encode.23 #Derived.3 #Derived_gen.13 #Derived.4;
        ret #Derived_gen.12;
    in
    let #Derived_gen.16 : Str = "A";
    let #Derived_gen.17 : List [] = Array [];
    let #Derived_gen.15 : {Str, List []} = CallByName Json.21 #Derived_gen.16 #Derived_gen.17;
    jump #Derived_gen.14 #Derived_gen.15;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.1 : [C {}, C {}] = TagId(1) #Derived.6;
    let #Derived_gen.0 : [C {}, C {}] = CallByName Encode.22 #Derived_gen.1;
    ret #Derived_gen.0;

procedure #Derived.7 (#Derived.8, #Derived.9, #Attr.12):
    let #Derived.6 : {} = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.8 #Derived_gen.4 #Derived.9;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "B";
    let #Derived_gen.8 : List [] = Array [];
    let #Derived_gen.6 : {Str, List []} = CallByName Json.21 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName Test.5 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.126 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.117 : U8 = GetTagId Encode.102;
    joinpoint Encode.118 Encode.116:
        ret Encode.116;
    in
    switch Encode.117:
        case 0:
            let Encode.119 : List U8 = CallByName #Derived.2 Encode.94 Encode.96 Encode.102;
            jump Encode.118 Encode.119;
    
        default:
            let Encode.120 : List U8 = CallByName #Derived.7 Encode.94 Encode.96 Encode.102;
            jump Encode.118 Encode.120;
    

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.132 : List U8 = CallByName Json.126 Encode.94 Encode.96 Encode.102;
    ret Encode.132;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.136 : Str = "a Lambda Set is empty. Most likely there is a type error in your program.";
    Crash Encode.136

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : {{}, {}} = CallByName Test.2 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.396 : {} = Struct {};
    ret Json.396;

procedure Json.126 (Json.127, Json.399, #Attr.12):
    let Json.125 : List [C {}, C {}] = StructAtIndex 1 #Attr.12;
    inc Json.125;
    let Json.124 : Str = StructAtIndex 0 #Attr.12;
    inc Json.124;
    dec #Attr.12;
    let Json.437 : I64 = 123i64;
    let Json.436 : U8 = CallByName Num.125 Json.437;
    let Json.433 : List U8 = CallByName List.4 Json.127 Json.436;
    let Json.435 : I64 = 34i64;
    let Json.434 : U8 = CallByName Num.125 Json.435;
    let Json.431 : List U8 = CallByName List.4 Json.433 Json.434;
    let Json.432 : List U8 = CallByName Str.12 Json.124;
    let Json.428 : List U8 = CallByName List.8 Json.431 Json.432;
    let Json.430 : I64 = 34i64;
    let Json.429 : U8 = CallByName Num.125 Json.430;
    let Json.425 : List U8 = CallByName List.4 Json.428 Json.429;
    let Json.427 : I64 = 58i64;
    let Json.426 : U8 = CallByName Num.125 Json.427;
    let Json.422 : List U8 = CallByName List.4 Json.425 Json.426;
    let Json.424 : I64 = 91i64;
    let Json.423 : U8 = CallByName Num.125 Json.424;
    let Json.129 : List U8 = CallByName List.4 Json.422 Json.423;
    let Json.421 : U64 = CallByName List.6 Json.125;
    let Json.409 : {List U8, U64} = Struct {Json.129, Json.421};
    let Json.410 : {} = Struct {};
    let Json.408 : {List U8, U64} = CallByName List.18 Json.125 Json.409 Json.410;
    dec Json.125;
    let Json.131 : List U8 = StructAtIndex 0 Json.408;
    inc Json.131;
    dec Json.408;
    let Json.407 : I64 = 93i64;
    let Json.406 : U8 = CallByName Num.125 Json.407;
    let Json.403 : List U8 = CallByName List.4 Json.131 Json.406;
    let Json.405 : I64 = 125i64;
    let Json.404 : U8 = CallByName Num.125 Json.405;
    let Json.402 : List U8 = CallByName List.4 Json.403 Json.404;
    ret Json.402;

procedure Json.126 (Json.127, Json.399, #Attr.12):
    let Json.125 : List [] = StructAtIndex 1 #Attr.12;
    inc Json.125;
    let Json.124 : Str = StructAtIndex 0 #Attr.12;
    inc Json.124;
    dec #Attr.12;
    let Json.487 : I64 = 123i64;
    let Json.486 : U8 = CallByName Num.125 Json.487;
    let Json.483 : List U8 = CallByName List.4 Json.127 Json.486;
    let Json.485 : I64 = 34i64;
    let Json.484 : U8 = CallByName Num.125 Json.485;
    let Json.481 : List U8 = CallByName List.4 Json.483 Json.484;
    let Json.482 : List U8 = CallByName Str.12 Json.124;
    let Json.478 : List U8 = CallByName List.8 Json.481 Json.482;
    let Json.480 : I64 = 34i64;
    let Json.479 : U8 = CallByName Num.125 Json.480;
    let Json.475 : List U8 = CallByName List.4 Json.478 Json.479;
    let Json.477 : I64 = 58i64;
    let Json.476 : U8 = CallByName Num.125 Json.477;
    let Json.472 : List U8 = CallByName List.4 Json.475 Json.476;
    let Json.474 : I64 = 91i64;
    let Json.473 : U8 = CallByName Num.125 Json.474;
    let Json.129 : List U8 = CallByName List.4 Json.472 Json.473;
    let Json.471 : U64 = CallByName List.6 Json.125;
    let Json.459 : {List U8, U64} = Struct {Json.129, Json.471};
    let Json.460 : {} = Struct {};
    let Json.458 : {List U8, U64} = CallByName List.18 Json.125 Json.459 Json.460;
    dec Json.125;
    let Json.131 : List U8 = StructAtIndex 0 Json.458;
    inc Json.131;
    dec Json.458;
    let Json.457 : I64 = 93i64;
    let Json.456 : U8 = CallByName Num.125 Json.457;
    let Json.453 : List U8 = CallByName List.4 Json.131 Json.456;
    let Json.455 : I64 = 125i64;
    let Json.454 : U8 = CallByName Num.125 Json.455;
    let Json.452 : List U8 = CallByName List.4 Json.453 Json.454;
    ret Json.452;

procedure Json.128 (Json.401, Json.134):
    let Json.132 : List U8 = StructAtIndex 0 Json.401;
    inc Json.132;
    let Json.133 : U64 = StructAtIndex 1 Json.401;
    dec Json.401;
    let Json.420 : {} = Struct {};
    let Json.135 : List U8 = CallByName Encode.23 Json.132 Json.134 Json.420;
    joinpoint Json.415 Json.136:
        let Json.413 : U64 = 1i64;
        let Json.412 : U64 = CallByName Num.20 Json.133 Json.413;
        let Json.411 : {List U8, U64} = Struct {Json.136, Json.412};
        ret Json.411;
    in
    let Json.419 : U64 = 1i64;
    let Json.416 : Int1 = CallByName Num.24 Json.133 Json.419;
    if Json.416 then
        let Json.418 : I64 = 44i64;
        let Json.417 : U8 = CallByName Num.125 Json.418;
        let Json.414 : List U8 = CallByName List.4 Json.135 Json.417;
        jump Json.415 Json.414;
    else
        jump Json.415 Json.135;

procedure Json.128 (Json.401, Json.134):
    let Json.132 : List U8 = StructAtIndex 0 Json.401;
    inc Json.132;
    let Json.133 : U64 = StructAtIndex 1 Json.401;
    dec Json.401;
    let Json.470 : {} = Struct {};
    let Json.135 : List U8 = CallByName Encode.23 Json.132 Json.134 Json.470;
    dec Json.132;
    joinpoint Json.465 Json.136:
        let Json.463 : U64 = 1i64;
        let Json.462 : U64 = CallByName Num.20 Json.133 Json.463;
        let Json.461 : {List U8, U64} = Struct {Json.136, Json.462};
        ret Json.461;
    in
    let Json.469 : U64 = 1i64;
    let Json.466 : Int1 = CallByName Num.24 Json.133 Json.469;
    if Json.466 then
        let Json.468 : I64 = 44i64;
        let Json.467 : U8 = CallByName Num.125 Json.468;
        let Json.464 : List U8 = CallByName List.4 Json.135 Json.467;
        jump Json.465 Json.464;
    else
        jump Json.465 Json.135;

procedure Json.21 (Json.124, Json.125):
    let Json.439 : {Str, List [C {}, C {}]} = Struct {Json.124, Json.125};
    let Json.438 : {Str, List [C {}, C {}]} = CallByName Encode.22 Json.439;
    ret Json.438;

procedure Json.21 (Json.124, Json.125):
    let Json.489 : {Str, List []} = Struct {Json.124, Json.125};
    let Json.488 : {Str, List []} = CallByName Encode.22 Json.489;
    ret Json.488;

procedure List.138 (List.139, List.140, List.137):
    let List.538 : {List U8, U64} = CallByName Json.128 List.139 List.140;
    ret List.538;

procedure List.138 (List.139, List.140, List.137):
    let List.611 : {List U8, U64} = CallByName Json.128 List.139 List.140;
    ret List.611;

procedure List.18 (List.135, List.136, List.137):
    let List.519 : {List U8, U64} = CallByName List.91 List.135 List.136 List.137;
    ret List.519;

procedure List.18 (List.135, List.136, List.137):
    let List.592 : {List U8, U64} = CallByName List.91 List.135 List.136 List.137;
    ret List.592;

procedure List.4 (List.106, List.107):
    let List.591 : U64 = 1i64;
    let List.590 : List U8 = CallByName List.70 List.106 List.591;
    let List.589 : List U8 = CallByName List.71 List.590 List.107;
    ret List.589;

procedure List.6 (#Attr.2):
    let List.539 : U64 = lowlevel ListLen #Attr.2;
    ret List.539;

procedure List.6 (#Attr.2):
    let List.612 : U64 = lowlevel ListLen #Attr.2;
    ret List.612;

procedure List.66 (#Attr.2, #Attr.3):
    let List.535 : [C {}, C {}] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.535;

procedure List.66 (#Attr.2, #Attr.3):
    let List.608 : [] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.608;

procedure List.70 (#Attr.2, #Attr.3):
    let List.570 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.570;

procedure List.71 (#Attr.2, #Attr.3):
    let List.568 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.568;

procedure List.8 (#Attr.2, #Attr.3):
    let List.613 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.613;

procedure List.80 (List.550, List.551, List.552, List.553, List.554):
    joinpoint List.525 List.432 List.433 List.434 List.435 List.436:
        let List.527 : Int1 = CallByName Num.22 List.435 List.436;
        if List.527 then
            let List.534 : [C {}, C {}] = CallByName List.66 List.432 List.435;
            let List.528 : {List U8, U64} = CallByName List.138 List.433 List.534 List.434;
            let List.531 : U64 = 1i64;
            let List.530 : U64 = CallByName Num.19 List.435 List.531;
            jump List.525 List.432 List.528 List.434 List.530 List.436;
        else
            ret List.433;
    in
    jump List.525 List.550 List.551 List.552 List.553 List.554;

procedure List.80 (List.623, List.624, List.625, List.626, List.627):
    joinpoint List.598 List.432 List.433 List.434 List.435 List.436:
        let List.600 : Int1 = CallByName Num.22 List.435 List.436;
        if List.600 then
            let List.607 : [] = CallByName List.66 List.432 List.435;
            let List.601 : {List U8, U64} = CallByName List.138 List.433 List.607 List.434;
            let List.604 : U64 = 1i64;
            let List.603 : U64 = CallByName Num.19 List.435 List.604;
            jump List.598 List.432 List.601 List.434 List.603 List.436;
        else
            ret List.433;
    in
    jump List.598 List.623 List.624 List.625 List.626 List.627;

procedure List.91 (List.429, List.430, List.431):
    let List.523 : U64 = 0i64;
    let List.524 : U64 = CallByName List.6 List.429;
    let List.522 : {List U8, U64} = CallByName List.80 List.429 List.430 List.431 List.523 List.524;
    ret List.522;

procedure List.91 (List.429, List.430, List.431):
    let List.596 : U64 = 0i64;
    let List.597 : U64 = CallByName List.6 List.429;
    let List.595 : {List U8, U64} = CallByName List.80 List.429 List.430 List.431 List.596 List.597;
    ret List.595;

procedure Num.125 (#Attr.2):
    let Num.284 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.284;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.287 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.287;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.288 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.286;

procedure Str.12 (#Attr.2):
    let Str.267 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.267;

procedure Test.2 (Test.11):
    let Test.18 : {{}, {}} = CallByName Encode.22 Test.11;
    ret Test.18;

procedure Test.3 ():
    let Test.16 : {} = Struct {};
    let Test.17 : {} = Struct {};
    let Test.15 : {{}, {}} = Struct {Test.16, Test.17};
    ret Test.15;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.23 Test.8:
        let Test.21 : List U8 = CallByName Encode.23 Test.6 Test.8 Test.7;
        ret Test.21;
    in
    let Test.28 : Int1 = CallByName Bool.2;
    if Test.28 then
        let Test.29 : Str = "A";
        let Test.32 : {} = StructAtIndex 0 Test.4;
        let Test.31 : [C {}, C {}] = CallByName #Derived.0 Test.32;
        let Test.30 : List [C {}, C {}] = Array [Test.31];
        let Test.22 : {Str, List [C {}, C {}]} = CallByName Json.21 Test.29 Test.30;
        jump Test.23 Test.22;
    else
        let Test.24 : Str = "B";
        let Test.27 : {} = StructAtIndex 1 Test.4;
        let Test.26 : [C {}, C {}] = CallByName #Derived.5 Test.27;
        let Test.25 : List [C {}, C {}] = Array [Test.26];
        let Test.22 : {Str, List [C {}, C {}]} = CallByName Json.21 Test.24 Test.25;
        jump Test.23 Test.22;

procedure Test.0 ():
    let Test.13 : {{}, {}} = CallByName Test.3;
    let Test.14 : {} = CallByName Json.1;
    let Test.12 : List U8 = CallByName Encode.25 Test.13 Test.14;
    ret Test.12;
