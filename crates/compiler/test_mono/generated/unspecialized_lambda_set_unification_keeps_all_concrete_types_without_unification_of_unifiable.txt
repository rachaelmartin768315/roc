procedure #Derived.0 (#Derived.1):
    let #Derived_gen.11 : [C {}, C {}, C Str] = TagId(0) #Derived.1;
    let #Derived_gen.10 : [C {}, C {}, C Str] = CallByName Encode.23 #Derived_gen.11;
    ret #Derived_gen.10;

procedure #Derived.2 (#Derived.3, #Derived.4, #Attr.12):
    let #Derived_gen.19 : {} = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    joinpoint #Derived_gen.15 #Derived_gen.14:
        let #Derived_gen.13 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.14 #Derived.4;
        ret #Derived_gen.13;
    in
    let #Derived_gen.17 : Str = "A";
    let #Derived_gen.18 : List Str = Array [];
    let #Derived_gen.16 : {List Str, {}} = CallByName Test.24 #Derived_gen.17 #Derived_gen.18;
    jump #Derived_gen.15 #Derived_gen.16;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.1 : [C {}, C {}, C Str] = TagId(1) #Derived.6;
    let #Derived_gen.0 : [C {}, C {}, C Str] = CallByName Encode.23 #Derived_gen.1;
    ret #Derived_gen.0;

procedure #Derived.7 (#Derived.8, #Derived.9, #Attr.12):
    let #Derived_gen.9 : {} = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.8 #Derived_gen.4 #Derived.9;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "B";
    let #Derived_gen.8 : List Str = Array [];
    let #Derived_gen.6 : {List Str, {}} = CallByName Test.24 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.113 : List U8 = CallByName Test.213 Encode.101 Encode.103 Encode.109;
    ret Encode.113;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.117 : List U8 = CallByName Test.63 Encode.101 Encode.103 Encode.109;
    ret Encode.117;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.119 : U8 = GetTagId Encode.109;
    switch Encode.119:
        case 0:
            let Encode.118 : List U8 = CallByName #Derived.2 Encode.101 Encode.103 Encode.109;
            ret Encode.118;
    
        case 1:
            let Encode.118 : List U8 = CallByName #Derived.7 Encode.101 Encode.103 Encode.109;
            ret Encode.118;
    
        default:
            let Encode.118 : List U8 = CallByName Test.59 Encode.101 Encode.103 Encode.109;
            ret Encode.118;
    

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.123 : List U8 = CallByName Test.63 Encode.101 Encode.103 Encode.109;
    ret Encode.123;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.126 : List U8 = CallByName Test.59 Encode.101 Encode.103 Encode.109;
    ret Encode.126;

procedure Encode.26 (Encode.107, Encode.108):
    let Encode.111 : List U8 = Array [];
    let Encode.112 : {{}, {}} = CallByName Test.49 Encode.107;
    let Encode.110 : List U8 = CallByName Encode.24 Encode.111 Encode.112 Encode.108;
    ret Encode.110;

procedure List.13 (#Attr.2, #Attr.3):
    let List.603 : List [C {}, C {}, C Str] = lowlevel ListPrepend #Attr.2 #Attr.3;
    ret List.603;

procedure List.13 (#Attr.2, #Attr.3):
    let List.631 : List Str = lowlevel ListPrepend #Attr.2 #Attr.3;
    ret List.631;

procedure List.18 (List.163, List.164, List.165):
    let List.578 : U64 = 0i64;
    let List.579 : U64 = CallByName List.6 List.163;
    let List.577 : List U8 = CallByName List.95 List.163 List.164 List.165 List.578 List.579;
    ret List.577;

procedure List.18 (List.163, List.164, List.165):
    let List.605 : U64 = 0i64;
    let List.606 : U64 = CallByName List.6 List.163;
    let List.604 : List U8 = CallByName List.95 List.163 List.164 List.165 List.605 List.606;
    ret List.604;

procedure List.4 (List.127, List.128):
    let List.626 : U64 = 1i64;
    let List.625 : List U8 = CallByName List.70 List.127 List.626;
    let List.624 : List U8 = CallByName List.71 List.625 List.128;
    ret List.624;

procedure List.6 (#Attr.2):
    let List.602 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.602;

procedure List.6 (#Attr.2):
    let List.629 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.629;

procedure List.66 (#Attr.2, #Attr.3):
    let List.587 : [C {}, C {}, C Str] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.587;

procedure List.66 (#Attr.2, #Attr.3):
    let List.614 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.614;

procedure List.70 (#Attr.2, #Attr.3):
    let List.620 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.620;

procedure List.71 (#Attr.2, #Attr.3):
    let List.618 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.618;

procedure List.8 (#Attr.2, #Attr.3):
    let List.628 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.628;

procedure List.95 (#Derived_gen.26, #Derived_gen.27, #Derived_gen.28, #Derived_gen.29, #Derived_gen.30):
    joinpoint List.580 List.166 List.167 List.168 List.169 List.170:
        let List.582 : Int1 = CallByName Num.22 List.169 List.170;
        if List.582 then
            let List.586 : [C {}, C {}, C Str] = CallByName List.66 List.166 List.169;
            inc List.586;
            let List.171 : List U8 = CallByName Test.66 List.167 List.586 List.168;
            let List.585 : U64 = 1i64;
            let List.584 : U64 = CallByName Num.51 List.169 List.585;
            jump List.580 List.166 List.171 List.168 List.584 List.170;
        else
            dec List.166;
            ret List.167;
    in
    jump List.580 #Derived_gen.26 #Derived_gen.27 #Derived_gen.28 #Derived_gen.29 #Derived_gen.30;

procedure List.95 (#Derived_gen.34, #Derived_gen.35, #Derived_gen.36, #Derived_gen.37, #Derived_gen.38):
    joinpoint List.607 List.166 List.167 List.168 List.169 List.170:
        let List.609 : Int1 = CallByName Num.22 List.169 List.170;
        if List.609 then
            let List.613 : Str = CallByName List.66 List.166 List.169;
            inc List.613;
            let List.171 : List U8 = CallByName Test.66 List.167 List.613 List.168;
            let List.612 : U64 = 1i64;
            let List.611 : U64 = CallByName Num.51 List.169 List.612;
            jump List.607 List.166 List.171 List.168 List.611 List.170;
        else
            dec List.166;
            ret List.167;
    in
    jump List.607 #Derived_gen.34 #Derived_gen.35 #Derived_gen.36 #Derived_gen.37 #Derived_gen.38;

procedure Num.127 (#Attr.2):
    let Num.286 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.286;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.288 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.287 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.287;

procedure Num.96 (#Attr.2):
    let Num.285 : Str = lowlevel NumToStr #Attr.2;
    ret Num.285;

procedure Str.12 (#Attr.2):
    let Str.240 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.240;

procedure Str.36 (#Attr.2):
    let Str.241 : U64 = lowlevel StrCountUtf8Bytes #Attr.2;
    ret Str.241;

procedure Test.20 (Test.58):
    let Test.299 : [C {}, C {}, C Str] = TagId(2) Test.58;
    let Test.298 : [C {}, C {}, C Str] = CallByName Encode.23 Test.299;
    ret Test.298;

procedure Test.20 (Test.58):
    let Test.342 : Str = CallByName Encode.23 Test.58;
    ret Test.342;

procedure Test.21 (Test.61, Test.62):
    let Test.278 : {List [C {}, C {}, C Str], {}} = Struct {Test.61, Test.62};
    let Test.277 : {List [C {}, C {}, C Str], {}} = CallByName Encode.23 Test.278;
    ret Test.277;

procedure Test.21 (Test.61, Test.62):
    let Test.322 : {List Str, {}} = Struct {Test.61, Test.62};
    let Test.321 : {List Str, {}} = CallByName Encode.23 Test.322;
    ret Test.321;

procedure Test.213 (Test.214, Test.215, Test.212):
    joinpoint Test.270 Test.216:
        let Test.268 : List U8 = CallByName Encode.24 Test.214 Test.216 Test.215;
        ret Test.268;
    in
    let Test.312 : Int1 = CallByName Bool.2;
    if Test.312 then
        let Test.313 : Str = "A";
        let Test.316 : {} = StructAtIndex 0 Test.212;
        let Test.315 : [C {}, C {}, C Str] = CallByName #Derived.0 Test.316;
        let Test.314 : List [C {}, C {}, C Str] = Array [Test.315];
        let Test.269 : {List [C {}, C {}, C Str], {}} = CallByName Test.24 Test.313 Test.314;
        jump Test.270 Test.269;
    else
        let Test.271 : Str = "B";
        let Test.311 : {} = StructAtIndex 1 Test.212;
        let Test.310 : [C {}, C {}, C Str] = CallByName #Derived.5 Test.311;
        let Test.272 : List [C {}, C {}, C Str] = Array [Test.310];
        let Test.269 : {List [C {}, C {}, C Str], {}} = CallByName Test.24 Test.271 Test.272;
        jump Test.270 Test.269;

procedure Test.23 (Test.77):
    let Test.276 : {} = Struct {};
    let Test.275 : {List [C {}, C {}, C Str], {}} = CallByName Test.21 Test.77 Test.276;
    ret Test.275;

procedure Test.23 (Test.77):
    let Test.320 : {} = Struct {};
    let Test.319 : {List Str, {}} = CallByName Test.21 Test.77 Test.320;
    ret Test.319;

procedure Test.24 (Test.80, Test.81):
    let Test.297 : [C {}, C {}, C Str] = CallByName Test.20 Test.80;
    let Test.274 : List [C {}, C {}, C Str] = CallByName List.13 Test.81 Test.297;
    let Test.273 : {List [C {}, C {}, C Str], {}} = CallByName Test.23 Test.274;
    ret Test.273;

procedure Test.24 (Test.80, Test.81):
    let Test.355 : Str = CallByName Test.20 Test.80;
    let Test.354 : List Str = CallByName List.13 Test.81 Test.355;
    let Test.353 : {List Str, {}} = CallByName Test.23 Test.354;
    ret Test.353;

procedure Test.3 ():
    let Test.261 : {} = Struct {};
    ret Test.261;

procedure Test.4 (Test.51, Test.52, Test.53):
    let Test.339 : U8 = CallByName Num.127 Test.52;
    let Test.336 : List U8 = CallByName List.4 Test.51 Test.339;
    let Test.338 : Str = CallByName Num.96 Test.53;
    let Test.337 : List U8 = CallByName Str.12 Test.338;
    let Test.334 : List U8 = CallByName List.8 Test.336 Test.337;
    let Test.335 : U8 = 32i64;
    let Test.333 : List U8 = CallByName List.4 Test.334 Test.335;
    ret Test.333;

procedure Test.49 (Test.256):
    let Test.265 : {{}, {}} = CallByName Encode.23 Test.256;
    ret Test.265;

procedure Test.50 ():
    let Test.263 : {} = Struct {};
    let Test.264 : {} = Struct {};
    let Test.262 : {{}, {}} = Struct {Test.263, Test.264};
    ret Test.262;

procedure Test.59 (Test.60, Test.300, #Attr.12):
    let Test.309 : Str = UnionAtIndex (Id 2) (Index 0) #Attr.12;
    let Test.307 : I64 = 115i64;
    let Test.308 : U64 = CallByName Str.36 Test.309;
    let Test.305 : List U8 = CallByName Test.4 Test.60 Test.307 Test.308;
    let Test.306 : List U8 = CallByName Str.12 Test.309;
    let Test.303 : List U8 = CallByName List.8 Test.305 Test.306;
    let Test.304 : U8 = 32i64;
    let Test.302 : List U8 = CallByName List.4 Test.303 Test.304;
    ret Test.302;

procedure Test.59 (Test.60, Test.300, Test.58):
    let Test.351 : I64 = 115i64;
    let Test.352 : U64 = CallByName Str.36 Test.58;
    let Test.349 : List U8 = CallByName Test.4 Test.60 Test.351 Test.352;
    let Test.350 : List U8 = CallByName Str.12 Test.58;
    let Test.347 : List U8 = CallByName List.8 Test.349 Test.350;
    let Test.348 : U8 = 32i64;
    let Test.346 : List U8 = CallByName List.4 Test.347 Test.348;
    ret Test.346;

procedure Test.63 (Test.64, Test.279, #Attr.12):
    let Test.62 : {} = StructAtIndex 1 #Attr.12;
    let Test.61 : List Str = StructAtIndex 0 #Attr.12;
    let Test.331 : I64 = 108i64;
    let Test.332 : U64 = CallByName List.6 Test.61;
    let Test.65 : List U8 = CallByName Test.4 Test.64 Test.331 Test.332;
    let Test.325 : List U8 = CallByName List.18 Test.61 Test.65 Test.62;
    ret Test.325;

procedure Test.63 (Test.64, Test.279, #Attr.12):
    let Test.62 : {} = StructAtIndex 1 #Attr.12;
    let Test.61 : List [C {}, C {}, C Str] = StructAtIndex 0 #Attr.12;
    let Test.287 : I64 = 108i64;
    let Test.288 : U64 = CallByName List.6 Test.61;
    let Test.65 : List U8 = CallByName Test.4 Test.64 Test.287 Test.288;
    let Test.281 : List U8 = CallByName List.18 Test.61 Test.65 Test.62;
    ret Test.281;

procedure Test.66 (Test.67, Test.68, Test.62):
    let Test.285 : [C {}, C {}, C Str] = CallByName Test.78 Test.68;
    let Test.286 : {} = Struct {};
    let Test.284 : List U8 = CallByName Encode.24 Test.67 Test.285 Test.286;
    ret Test.284;

procedure Test.66 (Test.67, Test.68, Test.62):
    let Test.329 : Str = CallByName Test.78 Test.68;
    let Test.330 : {} = Struct {};
    let Test.328 : List U8 = CallByName Encode.24 Test.67 Test.329 Test.330;
    ret Test.328;

procedure Test.78 (Test.79):
    ret Test.79;

procedure Test.78 (Test.79):
    ret Test.79;

procedure Test.0 ():
    let Test.259 : {{}, {}} = CallByName Test.50;
    let Test.260 : {} = CallByName Test.3;
    let Test.258 : List U8 = CallByName Encode.26 Test.259 Test.260;
    ret Test.258;
