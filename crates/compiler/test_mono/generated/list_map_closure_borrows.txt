procedure List.18 (List.163, List.164, List.165):
    let List.634 : U64 = 0i64;
    let List.635 : U64 = CallByName List.6 List.163;
    let List.633 : List Str = CallByName List.92 List.163 List.164 List.165 List.634 List.635;
    ret List.633;

procedure List.2 (List.111, List.112):
    let List.628 : U64 = CallByName List.6 List.111;
    let List.624 : Int1 = CallByName Num.22 List.112 List.628;
    if List.624 then
        let List.626 : Str = CallByName List.66 List.111 List.112;
        inc List.626;
        let List.625 : [C {}, C Str] = TagId(1) List.626;
        ret List.625;
    else
        let List.623 : {} = Struct {};
        let List.622 : [C {}, C Str] = TagId(0) List.623;
        ret List.622;

procedure List.275 (List.276, List.277, List.273):
    let List.645 : Str = CallByName Test.3 List.277;
    let List.644 : List Str = CallByName List.71 List.276 List.645;
    ret List.644;

procedure List.5 (List.272, List.273):
    let List.274 : U64 = CallByName List.6 List.272;
    let List.631 : List Str = CallByName List.68 List.274;
    let List.630 : List Str = CallByName List.18 List.272 List.631 List.273;
    ret List.630;

procedure List.6 (#Attr.2):
    let List.629 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.629;

procedure List.66 (#Attr.2, #Attr.3):
    let List.627 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.627;

procedure List.68 (#Attr.2):
    let List.647 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.647;

procedure List.71 (#Attr.2, #Attr.3):
    let List.646 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.646;

procedure List.92 (#Derived_gen.3, #Derived_gen.4, #Derived_gen.5, #Derived_gen.6, #Derived_gen.7):
    joinpoint List.636 List.166 List.167 List.168 List.169 List.170:
        let List.638 : Int1 = CallByName Num.22 List.169 List.170;
        if List.638 then
            let List.642 : Str = CallByName List.66 List.166 List.169;
            inc List.642;
            let List.171 : List Str = CallByName List.275 List.167 List.642 List.168;
            dec List.642;
            let List.641 : U64 = 1i64;
            let List.640 : U64 = CallByName Num.51 List.169 List.641;
            jump List.636 List.166 List.171 List.168 List.640 List.170;
        else
            dec List.166;
            ret List.167;
    in
    inc #Derived_gen.3;
    jump List.636 #Derived_gen.3 #Derived_gen.4 #Derived_gen.5 #Derived_gen.6 #Derived_gen.7;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.280 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.280;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Str.16 (#Attr.2, #Attr.3):
    let Str.232 : Str = lowlevel StrRepeat #Attr.2 #Attr.3;
    ret Str.232;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.233 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.233;

procedure Test.1 ():
    let Test.21 : Str = "lllllllllllllllllllllooooooooooong";
    let Test.22 : Str = "g";
    let Test.20 : Str = CallByName Str.3 Test.21 Test.22;
    dec Test.22;
    let Test.19 : List Str = Array [Test.20];
    ret Test.19;

procedure Test.2 ():
    let Test.15 : List Str = CallByName Test.1;
    let Test.16 : {} = Struct {};
    let Test.14 : List Str = CallByName List.5 Test.15 Test.16;
    dec Test.15;
    ret Test.14;

procedure Test.3 (Test.4):
    let Test.18 : U64 = 2i64;
    let Test.17 : Str = CallByName Str.16 Test.4 Test.18;
    ret Test.17;

procedure Test.0 ():
    let Test.12 : List Str = CallByName Test.2;
    let Test.13 : U64 = 0i64;
    let Test.6 : [C {}, C Str] = CallByName List.2 Test.12 Test.13;
    dec Test.12;
    let Test.9 : U8 = 1i64;
    let Test.10 : U8 = GetTagId Test.6;
    let Test.11 : Int1 = lowlevel Eq Test.9 Test.10;
    if Test.11 then
        let Test.5 : Str = UnionAtIndex (Id 1) (Index 0) Test.6;
        ret Test.5;
    else
        dec Test.6;
        let Test.8 : Str = "Hello, World!\n";
        ret Test.8;
