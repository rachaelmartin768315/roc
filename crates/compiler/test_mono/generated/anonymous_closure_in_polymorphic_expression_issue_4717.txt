procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.24 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.24;

procedure List.26 (List.159, List.160, List.161):
    let List.537 : [C U64, C U64] = CallByName List.93 List.159 List.160 List.161;
    let List.540 : U8 = 1i64;
    let List.541 : U8 = GetTagId List.537;
    let List.542 : Int1 = lowlevel Eq List.540 List.541;
    if List.542 then
        let List.162 : U64 = UnionAtIndex (Id 1) (Index 0) List.537;
        ret List.162;
    else
        let List.163 : U64 = UnionAtIndex (Id 0) (Index 0) List.537;
        ret List.163;

procedure List.29 (List.304, List.305):
    let List.536 : U64 = CallByName List.6 List.304;
    let List.306 : U64 = CallByName Num.77 List.536 List.305;
    let List.522 : List U8 = CallByName List.43 List.304 List.306;
    ret List.522;

procedure List.43 (List.302, List.303):
    let List.534 : U64 = CallByName List.6 List.302;
    let List.533 : U64 = CallByName Num.77 List.534 List.303;
    let List.524 : {U64, U64} = Struct {List.303, List.533};
    let List.523 : List U8 = CallByName List.49 List.302 List.524;
    ret List.523;

procedure List.49 (List.377, List.378):
    let List.531 : U64 = StructAtIndex 0 List.378;
    let List.532 : U64 = 0i64;
    let List.529 : Int1 = CallByName Bool.11 List.531 List.532;
    if List.529 then
        dec List.377;
        let List.530 : List U8 = Array [];
        ret List.530;
    else
        let List.526 : U64 = StructAtIndex 1 List.378;
        let List.527 : U64 = StructAtIndex 0 List.378;
        let List.525 : List U8 = CallByName List.72 List.377 List.526 List.527;
        ret List.525;

procedure List.6 (#Attr.2):
    let List.535 : U64 = lowlevel ListLen #Attr.2;
    ret List.535;

procedure List.66 (#Attr.2, #Attr.3):
    let List.558 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.558;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.528 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.528;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.546 List.440 List.441 List.442 List.443 List.444:
        let List.548 : Int1 = CallByName Num.22 List.443 List.444;
        if List.548 then
            let List.557 : U8 = CallByName List.66 List.440 List.443;
            let List.549 : [C U64, C U64] = CallByName Test.4 List.441 List.557;
            let List.554 : U8 = 1i64;
            let List.555 : U8 = GetTagId List.549;
            let List.556 : Int1 = lowlevel Eq List.554 List.555;
            if List.556 then
                let List.445 : U64 = UnionAtIndex (Id 1) (Index 0) List.549;
                let List.552 : U64 = 1i64;
                let List.551 : U64 = CallByName Num.51 List.443 List.552;
                jump List.546 List.440 List.445 List.442 List.551 List.444;
            else
                dec List.440;
                let List.446 : U64 = UnionAtIndex (Id 0) (Index 0) List.549;
                let List.553 : [C U64, C U64] = TagId(0) List.446;
                ret List.553;
        else
            dec List.440;
            let List.547 : [C U64, C U64] = TagId(1) List.441;
            ret List.547;
    in
    jump List.546 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure List.93 (List.437, List.438, List.439):
    let List.544 : U64 = 0i64;
    let List.545 : U64 = CallByName List.6 List.437;
    let List.543 : [C U64, C U64] = CallByName List.80 List.437 List.438 List.439 List.544 List.545;
    ret List.543;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.295 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.295;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.294 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.293;

procedure Test.1 (Test.2):
    let Test.13 : U64 = 0i64;
    let Test.14 : {} = Struct {};
    inc Test.2;
    let Test.3 : U64 = CallByName List.26 Test.2 Test.13 Test.14;
    let Test.12 : U64 = 0i64;
    let Test.10 : Int1 = CallByName Bool.11 Test.3 Test.12;
    if Test.10 then
        ret Test.2;
    else
        let Test.9 : List U8 = CallByName List.29 Test.2 Test.3;
        ret Test.9;

procedure Test.4 (Test.5, Test.15):
    let Test.16 : [C U64, C U64] = TagId(0) Test.5;
    ret Test.16;

procedure Test.0 ():
    let Test.8 : List U8 = Array [1i64, 2i64, 3i64];
    let Test.7 : List U8 = CallByName Test.1 Test.8;
    ret Test.7;
