procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure List.102 (List.486, List.487, List.488):
    let List.589 : U64 = 0i64;
    let List.590 : U64 = CallByName List.6 List.486;
    let List.588 : [C U64, C U64] = CallByName List.80 List.486 List.487 List.488 List.589 List.590;
    ret List.588;

procedure List.26 (List.199, List.200, List.201):
    let List.582 : [C U64, C U64] = CallByName List.102 List.199 List.200 List.201;
    let List.585 : U8 = 1i64;
    let List.586 : U8 = GetTagId List.582;
    let List.587 : Int1 = lowlevel Eq List.585 List.586;
    if List.587 then
        let List.202 : U64 = UnionAtIndex (Id 1) (Index 0) List.582;
        ret List.202;
    else
        let List.203 : U64 = UnionAtIndex (Id 0) (Index 0) List.582;
        ret List.203;

procedure List.38 (List.342, List.343):
    let List.581 : U64 = CallByName List.6 List.342;
    let List.344 : U64 = CallByName Num.77 List.581 List.343;
    let List.571 : List U8 = CallByName List.43 List.342 List.344;
    ret List.571;

procedure List.43 (List.340, List.341):
    let List.579 : U64 = CallByName List.6 List.340;
    let List.578 : U64 = CallByName Num.77 List.579 List.341;
    let List.573 : {U64, U64} = Struct {List.341, List.578};
    let List.572 : List U8 = CallByName List.49 List.340 List.573;
    ret List.572;

procedure List.49 (List.418, List.419):
    let List.575 : U64 = StructAtIndex 1 List.419;
    let List.576 : U64 = StructAtIndex 0 List.419;
    let List.574 : List U8 = CallByName List.72 List.418 List.575 List.576;
    ret List.574;

procedure List.6 (#Attr.2):
    let List.580 : U64 = lowlevel ListLen #Attr.2;
    ret List.580;

procedure List.66 (#Attr.2, #Attr.3):
    let List.603 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.603;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.577 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.577;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.591 List.489 List.490 List.491 List.492 List.493:
        let List.593 : Int1 = CallByName Num.22 List.492 List.493;
        if List.593 then
            let List.602 : U8 = CallByName List.66 List.489 List.492;
            let List.594 : [C U64, C U64] = CallByName Test.4 List.490 List.602;
            let List.599 : U8 = 1i64;
            let List.600 : U8 = GetTagId List.594;
            let List.601 : Int1 = lowlevel Eq List.599 List.600;
            if List.601 then
                let List.494 : U64 = UnionAtIndex (Id 1) (Index 0) List.594;
                let List.597 : U64 = 1i64;
                let List.596 : U64 = CallByName Num.51 List.492 List.597;
                jump List.591 List.489 List.494 List.491 List.596 List.493;
            else
                dec List.489;
                let List.495 : U64 = UnionAtIndex (Id 0) (Index 0) List.594;
                let List.598 : [C U64, C U64] = TagId(0) List.495;
                ret List.598;
        else
            dec List.489;
            let List.592 : [C U64, C U64] = TagId(1) List.490;
            ret List.592;
    in
    jump List.591 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.300 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.300;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.299 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.299;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.298 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.298;

procedure Test.1 (Test.2):
    let Test.13 : U64 = 0i64;
    let Test.14 : {} = Struct {};
    inc Test.2;
    let Test.3 : U64 = CallByName List.26 Test.2 Test.13 Test.14;
    let Test.12 : U64 = 0i64;
    let Test.10 : Int1 = CallByName Bool.11 Test.3 Test.12;
    if Test.10 then
        ret Test.2;
    else
        let Test.9 : List U8 = CallByName List.38 Test.2 Test.3;
        ret Test.9;

procedure Test.4 (Test.5, Test.15):
    let Test.16 : [C U64, C U64] = TagId(0) Test.5;
    ret Test.16;

procedure Test.0 ():
    let Test.8 : List U8 = Array [1i64, 2i64, 3i64];
    let Test.7 : List U8 = CallByName Test.1 Test.8;
    ret Test.7;
