procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure List.104 (List.488, List.489, List.490):
    let List.592 : U64 = 0i64;
    let List.593 : U64 = CallByName List.6 List.488;
    let List.591 : [C U64, C U64] = CallByName List.80 List.488 List.489 List.490 List.592 List.593;
    ret List.591;

procedure List.26 (List.201, List.202, List.203):
    let List.585 : [C U64, C U64] = CallByName List.104 List.201 List.202 List.203;
    let List.588 : U8 = 1i64;
    let List.589 : U8 = GetTagId List.585;
    let List.590 : Int1 = lowlevel Eq List.588 List.589;
    if List.590 then
        let List.204 : U64 = UnionAtIndex (Id 1) (Index 0) List.585;
        ret List.204;
    else
        let List.205 : U64 = UnionAtIndex (Id 0) (Index 0) List.585;
        ret List.205;

procedure List.38 (List.344, List.345):
    let List.584 : U64 = CallByName List.6 List.344;
    let List.346 : U64 = CallByName Num.77 List.584 List.345;
    let List.574 : List U8 = CallByName List.43 List.344 List.346;
    ret List.574;

procedure List.43 (List.342, List.343):
    let List.582 : U64 = CallByName List.6 List.342;
    let List.581 : U64 = CallByName Num.77 List.582 List.343;
    let List.576 : {U64, U64} = Struct {List.343, List.581};
    let List.575 : List U8 = CallByName List.49 List.342 List.576;
    ret List.575;

procedure List.49 (List.420, List.421):
    let List.578 : U64 = StructAtIndex 1 List.421;
    let List.579 : U64 = StructAtIndex 0 List.421;
    let List.577 : List U8 = CallByName List.72 List.420 List.578 List.579;
    ret List.577;

procedure List.6 (#Attr.2):
    let List.583 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.583;

procedure List.66 (#Attr.2, #Attr.3):
    let List.606 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.606;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.580 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.580;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.594 List.491 List.492 List.493 List.494 List.495:
        let List.596 : Int1 = CallByName Num.22 List.494 List.495;
        if List.596 then
            let List.605 : U8 = CallByName List.66 List.491 List.494;
            let List.597 : [C U64, C U64] = CallByName Test.4 List.492 List.605;
            let List.602 : U8 = 1i64;
            let List.603 : U8 = GetTagId List.597;
            let List.604 : Int1 = lowlevel Eq List.602 List.603;
            if List.604 then
                let List.496 : U64 = UnionAtIndex (Id 1) (Index 0) List.597;
                let List.600 : U64 = 1i64;
                let List.599 : U64 = CallByName Num.51 List.494 List.600;
                jump List.594 List.491 List.496 List.493 List.599 List.495;
            else
                dec List.491;
                let List.497 : U64 = UnionAtIndex (Id 0) (Index 0) List.597;
                let List.601 : [C U64, C U64] = TagId(0) List.497;
                ret List.601;
        else
            dec List.491;
            let List.595 : [C U64, C U64] = TagId(1) List.492;
            ret List.595;
    in
    jump List.594 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.280 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.280;

procedure Test.1 (Test.2):
    let Test.13 : U64 = 0i64;
    let Test.14 : {} = Struct {};
    inc Test.2;
    let Test.3 : U64 = CallByName List.26 Test.2 Test.13 Test.14;
    let Test.12 : U64 = 0i64;
    let Test.10 : Int1 = CallByName Bool.11 Test.3 Test.12;
    if Test.10 then
        ret Test.2;
    else
        let Test.9 : List U8 = CallByName List.38 Test.2 Test.3;
        ret Test.9;

procedure Test.4 (Test.5, Test.15):
    let Test.16 : [C U64, C U64] = TagId(0) Test.5;
    ret Test.16;

procedure Test.0 ():
    let Test.8 : List U8 = Array [1i64, 2i64, 3i64];
    let Test.7 : List U8 = CallByName Test.1 Test.8;
    ret Test.7;
