procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure List.112 (List.541, List.542, List.543):
    let List.656 : U64 = 0i64;
    let List.657 : U64 = CallByName List.6 List.541;
    let List.655 : [C U64, C U64] = CallByName List.80 List.541 List.542 List.543 List.656 List.657;
    ret List.655;

procedure List.26 (List.209, List.210, List.211):
    let List.649 : [C U64, C U64] = CallByName List.112 List.209 List.210 List.211;
    let List.652 : U8 = 1i64;
    let List.653 : U8 = GetTagId List.649;
    let List.654 : Int1 = lowlevel Eq List.652 List.653;
    if List.654 then
        let List.212 : U64 = UnionAtIndex (Id 1) (Index 0) List.649;
        ret List.212;
    else
        let List.213 : U64 = UnionAtIndex (Id 0) (Index 0) List.649;
        ret List.213;

procedure List.38 (List.397, List.398):
    let List.648 : U64 = CallByName List.6 List.397;
    let List.399 : U64 = CallByName Num.77 List.648 List.398;
    let List.638 : List U8 = CallByName List.43 List.397 List.399;
    ret List.638;

procedure List.43 (List.395, List.396):
    let List.646 : U64 = CallByName List.6 List.395;
    let List.645 : U64 = CallByName Num.77 List.646 List.396;
    let List.640 : {U64, U64} = Struct {List.396, List.645};
    let List.639 : List U8 = CallByName List.49 List.395 List.640;
    ret List.639;

procedure List.49 (List.473, List.474):
    let List.642 : U64 = StructAtIndex 1 List.474;
    let List.643 : U64 = StructAtIndex 0 List.474;
    let List.641 : List U8 = CallByName List.72 List.473 List.642 List.643;
    ret List.641;

procedure List.6 (#Attr.2):
    let List.647 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.647;

procedure List.66 (#Attr.2, #Attr.3):
    let List.670 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.670;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.644 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.644;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.658 List.544 List.545 List.546 List.547 List.548:
        let List.660 : Int1 = CallByName Num.22 List.547 List.548;
        if List.660 then
            let List.669 : U8 = CallByName List.66 List.544 List.547;
            let List.661 : [C U64, C U64] = CallByName Test.4 List.545 List.669;
            let List.666 : U8 = 1i64;
            let List.667 : U8 = GetTagId List.661;
            let List.668 : Int1 = lowlevel Eq List.666 List.667;
            if List.668 then
                let List.549 : U64 = UnionAtIndex (Id 1) (Index 0) List.661;
                let List.664 : U64 = 1i64;
                let List.663 : U64 = CallByName Num.51 List.547 List.664;
                jump List.658 List.544 List.549 List.546 List.663 List.548;
            else
                dec List.544;
                let List.550 : U64 = UnionAtIndex (Id 0) (Index 0) List.661;
                let List.665 : [C U64, C U64] = TagId(0) List.550;
                ret List.665;
        else
            dec List.544;
            let List.659 : [C U64, C U64] = TagId(1) List.545;
            ret List.659;
    in
    inc #Derived_gen.0;
    jump List.658 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.282 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.282;

procedure Test.1 (Test.2):
    let Test.13 : U64 = 0i64;
    let Test.14 : {} = Struct {};
    let Test.3 : U64 = CallByName List.26 Test.2 Test.13 Test.14;
    let Test.12 : U64 = 0i64;
    let Test.10 : Int1 = CallByName Bool.11 Test.3 Test.12;
    if Test.10 then
        ret Test.2;
    else
        let Test.9 : List U8 = CallByName List.38 Test.2 Test.3;
        ret Test.9;

procedure Test.4 (Test.5, Test.15):
    let Test.16 : [C U64, C U64] = TagId(0) Test.5;
    ret Test.16;

procedure Test.0 ():
    let Test.8 : List U8 = Array [1i64, 2i64, 3i64];
    let Test.7 : List U8 = CallByName Test.1 Test.8;
    ret Test.7;
