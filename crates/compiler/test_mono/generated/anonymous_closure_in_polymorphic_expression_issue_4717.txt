procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.24 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.24;

procedure List.26 (List.174, List.175, List.176):
    let List.560 : [C U64, C U64] = CallByName List.98 List.174 List.175 List.176;
    let List.563 : U8 = 1i64;
    let List.564 : U8 = GetTagId List.560;
    let List.565 : Int1 = lowlevel Eq List.563 List.564;
    if List.565 then
        let List.177 : U64 = UnionAtIndex (Id 1) (Index 0) List.560;
        ret List.177;
    else
        let List.178 : U64 = UnionAtIndex (Id 0) (Index 0) List.560;
        ret List.178;

procedure List.29 (List.319, List.320):
    let List.559 : U64 = CallByName List.6 List.319;
    let List.321 : U64 = CallByName Num.77 List.559 List.320;
    let List.545 : List U8 = CallByName List.43 List.319 List.321;
    ret List.545;

procedure List.43 (List.317, List.318):
    let List.557 : U64 = CallByName List.6 List.317;
    let List.556 : U64 = CallByName Num.77 List.557 List.318;
    let List.547 : {U64, U64} = Struct {List.318, List.556};
    let List.546 : List U8 = CallByName List.49 List.317 List.547;
    ret List.546;

procedure List.49 (List.392, List.393):
    let List.554 : U64 = StructAtIndex 0 List.393;
    let List.555 : U64 = 0i64;
    let List.552 : Int1 = CallByName Bool.11 List.554 List.555;
    if List.552 then
        dec List.392;
        let List.553 : List U8 = Array [];
        ret List.553;
    else
        let List.549 : U64 = StructAtIndex 1 List.393;
        let List.550 : U64 = StructAtIndex 0 List.393;
        let List.548 : List U8 = CallByName List.72 List.392 List.549 List.550;
        ret List.548;

procedure List.6 (#Attr.2):
    let List.558 : U64 = lowlevel ListLen #Attr.2;
    ret List.558;

procedure List.66 (#Attr.2, #Attr.3):
    let List.581 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.581;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.551 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.551;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.569 List.463 List.464 List.465 List.466 List.467:
        let List.571 : Int1 = CallByName Num.22 List.466 List.467;
        if List.571 then
            let List.580 : U8 = CallByName List.66 List.463 List.466;
            let List.572 : [C U64, C U64] = CallByName Test.4 List.464 List.580;
            let List.577 : U8 = 1i64;
            let List.578 : U8 = GetTagId List.572;
            let List.579 : Int1 = lowlevel Eq List.577 List.578;
            if List.579 then
                let List.468 : U64 = UnionAtIndex (Id 1) (Index 0) List.572;
                let List.575 : U64 = 1i64;
                let List.574 : U64 = CallByName Num.51 List.466 List.575;
                jump List.569 List.463 List.468 List.465 List.574 List.467;
            else
                dec List.463;
                let List.469 : U64 = UnionAtIndex (Id 0) (Index 0) List.572;
                let List.576 : [C U64, C U64] = TagId(0) List.469;
                ret List.576;
        else
            dec List.463;
            let List.570 : [C U64, C U64] = TagId(1) List.464;
            ret List.570;
    in
    jump List.569 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure List.98 (List.460, List.461, List.462):
    let List.567 : U64 = 0i64;
    let List.568 : U64 = CallByName List.6 List.460;
    let List.566 : [C U64, C U64] = CallByName List.80 List.460 List.461 List.462 List.567 List.568;
    ret List.566;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.294 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.293;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.292 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.292;

procedure Test.1 (Test.2):
    let Test.13 : U64 = 0i64;
    let Test.14 : {} = Struct {};
    inc Test.2;
    let Test.3 : U64 = CallByName List.26 Test.2 Test.13 Test.14;
    let Test.12 : U64 = 0i64;
    let Test.10 : Int1 = CallByName Bool.11 Test.3 Test.12;
    if Test.10 then
        ret Test.2;
    else
        let Test.9 : List U8 = CallByName List.29 Test.2 Test.3;
        ret Test.9;

procedure Test.4 (Test.5, Test.15):
    let Test.16 : [C U64, C U64] = TagId(0) Test.5;
    ret Test.16;

procedure Test.0 ():
    let Test.8 : List U8 = Array [1i64, 2i64, 3i64];
    let Test.7 : List U8 = CallByName Test.1 Test.8;
    ret Test.7;
