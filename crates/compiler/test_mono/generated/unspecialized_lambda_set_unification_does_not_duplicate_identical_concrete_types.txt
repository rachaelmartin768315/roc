procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName Test.5 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.126 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.118 : List U8 = CallByName Json.96 Encode.94 Encode.96 Encode.102;
    ret Encode.118;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : {Str, Str} = CallByName Test.2 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.396 : {} = Struct {};
    ret Json.396;

procedure Json.126 (Json.127, Json.399, #Attr.12):
    let Json.125 : List Str = StructAtIndex 1 #Attr.12;
    inc Json.125;
    let Json.124 : Str = StructAtIndex 0 #Attr.12;
    inc Json.124;
    dec #Attr.12;
    let Json.437 : I64 = 123i64;
    let Json.436 : U8 = CallByName Num.125 Json.437;
    let Json.433 : List U8 = CallByName List.4 Json.127 Json.436;
    let Json.435 : I64 = 34i64;
    let Json.434 : U8 = CallByName Num.125 Json.435;
    let Json.431 : List U8 = CallByName List.4 Json.433 Json.434;
    let Json.432 : List U8 = CallByName Str.12 Json.124;
    let Json.428 : List U8 = CallByName List.8 Json.431 Json.432;
    let Json.430 : I64 = 34i64;
    let Json.429 : U8 = CallByName Num.125 Json.430;
    let Json.425 : List U8 = CallByName List.4 Json.428 Json.429;
    let Json.427 : I64 = 58i64;
    let Json.426 : U8 = CallByName Num.125 Json.427;
    let Json.422 : List U8 = CallByName List.4 Json.425 Json.426;
    let Json.424 : I64 = 91i64;
    let Json.423 : U8 = CallByName Num.125 Json.424;
    let Json.129 : List U8 = CallByName List.4 Json.422 Json.423;
    let Json.421 : U64 = CallByName List.6 Json.125;
    let Json.409 : {List U8, U64} = Struct {Json.129, Json.421};
    let Json.410 : {} = Struct {};
    let Json.408 : {List U8, U64} = CallByName List.18 Json.125 Json.409 Json.410;
    dec Json.125;
    let Json.131 : List U8 = StructAtIndex 0 Json.408;
    inc Json.131;
    dec Json.408;
    let Json.407 : I64 = 93i64;
    let Json.406 : U8 = CallByName Num.125 Json.407;
    let Json.403 : List U8 = CallByName List.4 Json.131 Json.406;
    let Json.405 : I64 = 125i64;
    let Json.404 : U8 = CallByName Num.125 Json.405;
    let Json.402 : List U8 = CallByName List.4 Json.403 Json.404;
    ret Json.402;

procedure Json.128 (Json.401, Json.134):
    let Json.132 : List U8 = StructAtIndex 0 Json.401;
    inc Json.132;
    let Json.133 : U64 = StructAtIndex 1 Json.401;
    dec Json.401;
    let Json.420 : {} = Struct {};
    let Json.135 : List U8 = CallByName Encode.23 Json.132 Json.134 Json.420;
    joinpoint Json.415 Json.136:
        let Json.413 : U64 = 1i64;
        let Json.412 : U64 = CallByName Num.20 Json.133 Json.413;
        let Json.411 : {List U8, U64} = Struct {Json.136, Json.412};
        ret Json.411;
    in
    let Json.419 : U64 = 1i64;
    let Json.416 : Int1 = CallByName Num.24 Json.133 Json.419;
    if Json.416 then
        let Json.418 : I64 = 44i64;
        let Json.417 : U8 = CallByName Num.125 Json.418;
        let Json.414 : List U8 = CallByName List.4 Json.135 Json.417;
        jump Json.415 Json.414;
    else
        jump Json.415 Json.135;

procedure Json.18 (Json.95):
    let Json.453 : Str = CallByName Encode.22 Json.95;
    ret Json.453;

procedure Json.21 (Json.124, Json.125):
    let Json.439 : {Str, List Str} = Struct {Json.124, Json.125};
    let Json.438 : {Str, List Str} = CallByName Encode.22 Json.439;
    ret Json.438;

procedure Json.96 (Json.97, Json.443, Json.95):
    let Json.452 : I64 = 34i64;
    let Json.451 : U8 = CallByName Num.125 Json.452;
    let Json.449 : List U8 = CallByName List.4 Json.97 Json.451;
    let Json.450 : List U8 = CallByName Str.12 Json.95;
    let Json.446 : List U8 = CallByName List.8 Json.449 Json.450;
    let Json.448 : I64 = 34i64;
    let Json.447 : U8 = CallByName Num.125 Json.448;
    let Json.445 : List U8 = CallByName List.4 Json.446 Json.447;
    ret Json.445;

procedure List.138 (List.139, List.140, List.137):
    let List.544 : {List U8, U64} = CallByName Json.128 List.139 List.140;
    ret List.544;

procedure List.18 (List.135, List.136, List.137):
    let List.525 : {List U8, U64} = CallByName List.91 List.135 List.136 List.137;
    ret List.525;

procedure List.4 (List.106, List.107):
    let List.524 : U64 = 1i64;
    let List.523 : List U8 = CallByName List.70 List.106 List.524;
    let List.522 : List U8 = CallByName List.71 List.523 List.107;
    ret List.522;

procedure List.6 (#Attr.2):
    let List.545 : U64 = lowlevel ListLen #Attr.2;
    ret List.545;

procedure List.66 (#Attr.2, #Attr.3):
    let List.541 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.541;

procedure List.70 (#Attr.2, #Attr.3):
    let List.497 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.497;

procedure List.71 (#Attr.2, #Attr.3):
    let List.495 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.495;

procedure List.8 (#Attr.2, #Attr.3):
    let List.547 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.547;

procedure List.80 (List.557, List.558, List.559, List.560, List.561):
    joinpoint List.531 List.432 List.433 List.434 List.435 List.436:
        let List.533 : Int1 = CallByName Num.22 List.435 List.436;
        if List.533 then
            let List.540 : Str = CallByName List.66 List.432 List.435;
            let List.534 : {List U8, U64} = CallByName List.138 List.433 List.540 List.434;
            let List.537 : U64 = 1i64;
            let List.536 : U64 = CallByName Num.19 List.435 List.537;
            jump List.531 List.432 List.534 List.434 List.536 List.436;
        else
            ret List.433;
    in
    jump List.531 List.557 List.558 List.559 List.560 List.561;

procedure List.91 (List.429, List.430, List.431):
    let List.529 : U64 = 0i64;
    let List.530 : U64 = CallByName List.6 List.429;
    let List.528 : {List U8, U64} = CallByName List.80 List.429 List.430 List.431 List.529 List.530;
    ret List.528;

procedure Num.125 (#Attr.2):
    let Num.265 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.265;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.268 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.268;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.266 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.266;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.269 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.269;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.267 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.267;

procedure Str.12 (#Attr.2):
    let Str.266 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.266;

procedure Test.2 (Test.10):
    let Test.15 : {Str, Str} = CallByName Encode.22 Test.10;
    ret Test.15;

procedure Test.3 ():
    let Test.9 : Str = "";
    inc Test.9;
    let Test.14 : {Str, Str} = Struct {Test.9, Test.9};
    ret Test.14;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.20 Test.8:
        let Test.18 : List U8 = CallByName Encode.23 Test.6 Test.8 Test.7;
        ret Test.18;
    in
    let Test.25 : Int1 = CallByName Bool.2;
    if Test.25 then
        let Test.26 : Str = "A";
        let Test.29 : Str = StructAtIndex 0 Test.4;
        inc Test.29;
        dec Test.4;
        let Test.28 : Str = CallByName Json.18 Test.29;
        let Test.27 : List Str = Array [Test.28];
        let Test.19 : {Str, List Str} = CallByName Json.21 Test.26 Test.27;
        jump Test.20 Test.19;
    else
        let Test.21 : Str = "B";
        let Test.24 : Str = StructAtIndex 1 Test.4;
        inc Test.24;
        dec Test.4;
        let Test.23 : Str = CallByName Json.18 Test.24;
        let Test.22 : List Str = Array [Test.23];
        let Test.19 : {Str, List Str} = CallByName Json.21 Test.21 Test.22;
        jump Test.20 Test.19;

procedure Test.0 ():
    let Test.12 : {Str, Str} = CallByName Test.3;
    let Test.13 : {} = CallByName Json.1;
    let Test.11 : List U8 = CallByName Encode.25 Test.12 Test.13;
    ret Test.11;
