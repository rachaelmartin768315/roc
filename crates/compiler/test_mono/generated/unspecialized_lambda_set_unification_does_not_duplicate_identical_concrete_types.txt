procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName Test.5 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.113 : List U8 = CallByName TotallyNotJson.231 Encode.99 Encode.101 Encode.107;
    ret Encode.113;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName TotallyNotJson.150 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {Str, Str} = CallByName Test.2 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure List.104 (List.488, List.489, List.490):
    let List.657 : U64 = 0i64;
    let List.658 : U64 = CallByName List.6 List.488;
    let List.656 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.80 List.488 List.489 List.490 List.657 List.658;
    ret List.656;

procedure List.18 (List.160, List.161, List.162):
    let List.601 : U64 = 0i64;
    let List.602 : U64 = CallByName List.6 List.160;
    let List.600 : {List U8, U64} = CallByName List.92 List.160 List.161 List.162 List.601 List.602;
    ret List.600;

procedure List.18 (List.160, List.161, List.162):
    let List.613 : U64 = 0i64;
    let List.614 : U64 = CallByName List.6 List.160;
    let List.612 : List U8 = CallByName List.92 List.160 List.161 List.162 List.613 List.614;
    ret List.612;

procedure List.26 (List.201, List.202, List.203):
    let List.650 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.104 List.201 List.202 List.203;
    let List.653 : U8 = 1i64;
    let List.654 : U8 = GetTagId List.650;
    let List.655 : Int1 = lowlevel Eq List.653 List.654;
    if List.655 then
        let List.204 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.650;
        ret List.204;
    else
        let List.205 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.650;
        ret List.205;

procedure List.4 (List.124, List.125):
    let List.599 : U64 = 1i64;
    let List.598 : List U8 = CallByName List.70 List.124 List.599;
    let List.597 : List U8 = CallByName List.71 List.598 List.125;
    ret List.597;

procedure List.49 (List.420, List.421):
    let List.641 : U64 = StructAtIndex 1 List.421;
    let List.642 : U64 = StructAtIndex 0 List.421;
    let List.640 : List U8 = CallByName List.72 List.420 List.641 List.642;
    ret List.640;

procedure List.52 (List.435, List.436):
    let List.437 : U64 = CallByName List.6 List.435;
    joinpoint List.648 List.438:
        let List.646 : U64 = 0i64;
        let List.645 : {U64, U64} = Struct {List.438, List.646};
        inc List.435;
        let List.439 : List U8 = CallByName List.49 List.435 List.645;
        let List.644 : U64 = CallByName Num.75 List.437 List.438;
        let List.639 : {U64, U64} = Struct {List.644, List.438};
        let List.440 : List U8 = CallByName List.49 List.435 List.639;
        let List.638 : {List U8, List U8} = Struct {List.439, List.440};
        ret List.638;
    in
    let List.649 : Int1 = CallByName Num.24 List.437 List.436;
    if List.649 then
        jump List.648 List.436;
    else
        jump List.648 List.437;

procedure List.6 (#Attr.2):
    let List.624 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.624;

procedure List.6 (#Attr.2):
    let List.626 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.626;

procedure List.66 (#Attr.2, #Attr.3):
    let List.610 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.610;

procedure List.66 (#Attr.2, #Attr.3):
    let List.622 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.622;

procedure List.68 (#Attr.2):
    let List.637 : List U8 = lowlevel ListWithCapacity #Attr.2;
    ret List.637;

procedure List.70 (#Attr.2, #Attr.3):
    let List.578 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.578;

procedure List.71 (#Attr.2, #Attr.3):
    let List.576 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.576;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.643 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.643;

procedure List.8 (#Attr.2, #Attr.3):
    let List.635 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.635;

procedure List.80 (#Derived_gen.8, #Derived_gen.9, #Derived_gen.10, #Derived_gen.11, #Derived_gen.12):
    joinpoint List.659 List.491 List.492 List.493 List.494 List.495:
        let List.661 : Int1 = CallByName Num.22 List.494 List.495;
        if List.661 then
            let List.670 : U8 = CallByName List.66 List.491 List.494;
            let List.662 : [C {U64, Int1}, C {U64, Int1}] = CallByName TotallyNotJson.157 List.492 List.670;
            let List.667 : U8 = 1i64;
            let List.668 : U8 = GetTagId List.662;
            let List.669 : Int1 = lowlevel Eq List.667 List.668;
            if List.669 then
                let List.496 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.662;
                let List.665 : U64 = 1i64;
                let List.664 : U64 = CallByName Num.51 List.494 List.665;
                jump List.659 List.491 List.496 List.493 List.664 List.495;
            else
                dec List.491;
                let List.497 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.662;
                let List.666 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) List.497;
                ret List.666;
        else
            dec List.491;
            let List.660 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) List.492;
            ret List.660;
    in
    jump List.659 #Derived_gen.8 #Derived_gen.9 #Derived_gen.10 #Derived_gen.11 #Derived_gen.12;

procedure List.92 (#Derived_gen.16, #Derived_gen.17, #Derived_gen.18, #Derived_gen.19, #Derived_gen.20):
    joinpoint List.615 List.163 List.164 List.165 List.166 List.167:
        let List.617 : Int1 = CallByName Num.22 List.166 List.167;
        if List.617 then
            let List.621 : U8 = CallByName List.66 List.163 List.166;
            let List.168 : List U8 = CallByName TotallyNotJson.183 List.164 List.621;
            let List.620 : U64 = 1i64;
            let List.619 : U64 = CallByName Num.51 List.166 List.620;
            jump List.615 List.163 List.168 List.165 List.619 List.167;
        else
            dec List.163;
            ret List.164;
    in
    jump List.615 #Derived_gen.16 #Derived_gen.17 #Derived_gen.18 #Derived_gen.19 #Derived_gen.20;

procedure List.92 (#Derived_gen.3, #Derived_gen.4, #Derived_gen.5, #Derived_gen.6, #Derived_gen.7):
    joinpoint List.603 List.163 List.164 List.165 List.166 List.167:
        let List.605 : Int1 = CallByName Num.22 List.166 List.167;
        if List.605 then
            let List.609 : Str = CallByName List.66 List.163 List.166;
            inc List.609;
            let List.168 : {List U8, U64} = CallByName TotallyNotJson.233 List.164 List.609;
            let List.608 : U64 = 1i64;
            let List.607 : U64 = CallByName Num.51 List.166 List.608;
            jump List.603 List.163 List.168 List.165 List.607 List.167;
        else
            dec List.163;
            ret List.164;
    in
    jump List.603 #Derived_gen.3 #Derived_gen.4 #Derived_gen.5 #Derived_gen.6 #Derived_gen.7;

procedure Num.127 (#Attr.2):
    let Num.286 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.286;

procedure Num.137 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumDivCeilUnchecked #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.290 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.290;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.287 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.287;

procedure Num.21 (#Attr.2, #Attr.3):
    let Num.292 : U64 = lowlevel NumMul #Attr.2 #Attr.3;
    ret Num.292;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.298 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.298;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.300 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.300;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.295 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.295;

procedure Num.75 (#Attr.2, #Attr.3):
    let Num.299 : U64 = lowlevel NumSubWrap #Attr.2 #Attr.3;
    ret Num.299;

procedure Str.12 (#Attr.2):
    let Str.233 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.233;

procedure Test.2 (Test.10):
    let Test.15 : {Str, Str} = CallByName Encode.23 Test.10;
    ret Test.15;

procedure Test.3 ():
    let Test.9 : Str = "";
    inc Test.9;
    let Test.14 : {Str, Str} = Struct {Test.9, Test.9};
    ret Test.14;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.20 Test.8:
        let Test.18 : List U8 = CallByName Encode.24 Test.6 Test.8 Test.7;
        ret Test.18;
    in
    let Test.25 : Int1 = CallByName Bool.2;
    if Test.25 then
        let Test.26 : Str = "A";
        let Test.29 : Str = StructAtIndex 0 Test.4;
        let #Derived_gen.24 : Str = StructAtIndex 1 Test.4;
        dec #Derived_gen.24;
        let Test.28 : Str = CallByName TotallyNotJson.25 Test.29;
        let Test.27 : List Str = Array [Test.28];
        let Test.19 : {Str, List Str} = CallByName TotallyNotJson.31 Test.26 Test.27;
        jump Test.20 Test.19;
    else
        let Test.21 : Str = "B";
        let Test.24 : Str = StructAtIndex 1 Test.4;
        let #Derived_gen.25 : Str = StructAtIndex 0 Test.4;
        dec #Derived_gen.25;
        let Test.23 : Str = CallByName TotallyNotJson.25 Test.24;
        let Test.22 : List Str = Array [Test.23];
        let Test.19 : {Str, List Str} = CallByName TotallyNotJson.31 Test.21 Test.22;
        jump Test.20 Test.19;

procedure TotallyNotJson.150 (TotallyNotJson.151, TotallyNotJson.1020, TotallyNotJson.149):
    let TotallyNotJson.1023 : List U8 = CallByName TotallyNotJson.26 TotallyNotJson.149;
    let TotallyNotJson.1022 : List U8 = CallByName List.8 TotallyNotJson.151 TotallyNotJson.1023;
    ret TotallyNotJson.1022;

procedure TotallyNotJson.157 (TotallyNotJson.1071, TotallyNotJson.160):
    let TotallyNotJson.158 : U64 = StructAtIndex 0 TotallyNotJson.1071;
    let TotallyNotJson.159 : Int1 = StructAtIndex 1 TotallyNotJson.1071;
    switch TotallyNotJson.160:
        case 34:
            let TotallyNotJson.1074 : Int1 = false;
            let TotallyNotJson.1073 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1074};
            let TotallyNotJson.1072 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1073;
            ret TotallyNotJson.1072;
    
        case 92:
            let TotallyNotJson.1077 : Int1 = false;
            let TotallyNotJson.1076 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1077};
            let TotallyNotJson.1075 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1076;
            ret TotallyNotJson.1075;
    
        case 47:
            let TotallyNotJson.1080 : Int1 = false;
            let TotallyNotJson.1079 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1080};
            let TotallyNotJson.1078 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1079;
            ret TotallyNotJson.1078;
    
        case 8:
            let TotallyNotJson.1083 : Int1 = false;
            let TotallyNotJson.1082 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1083};
            let TotallyNotJson.1081 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1082;
            ret TotallyNotJson.1081;
    
        case 12:
            let TotallyNotJson.1086 : Int1 = false;
            let TotallyNotJson.1085 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1086};
            let TotallyNotJson.1084 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1085;
            ret TotallyNotJson.1084;
    
        case 10:
            let TotallyNotJson.1089 : Int1 = false;
            let TotallyNotJson.1088 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1089};
            let TotallyNotJson.1087 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1088;
            ret TotallyNotJson.1087;
    
        case 13:
            let TotallyNotJson.1092 : Int1 = false;
            let TotallyNotJson.1091 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1092};
            let TotallyNotJson.1090 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1091;
            ret TotallyNotJson.1090;
    
        case 9:
            let TotallyNotJson.1095 : Int1 = false;
            let TotallyNotJson.1094 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1095};
            let TotallyNotJson.1093 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1094;
            ret TotallyNotJson.1093;
    
        default:
            let TotallyNotJson.1099 : U64 = 1i64;
            let TotallyNotJson.1098 : U64 = CallByName Num.19 TotallyNotJson.158 TotallyNotJson.1099;
            let TotallyNotJson.1097 : {U64, Int1} = Struct {TotallyNotJson.1098, TotallyNotJson.159};
            let TotallyNotJson.1096 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) TotallyNotJson.1097;
            ret TotallyNotJson.1096;
    

procedure TotallyNotJson.183 (TotallyNotJson.184, TotallyNotJson.185):
    let TotallyNotJson.1042 : List U8 = CallByName TotallyNotJson.27 TotallyNotJson.185;
    let TotallyNotJson.1041 : List U8 = CallByName List.8 TotallyNotJson.184 TotallyNotJson.1042;
    ret TotallyNotJson.1041;

procedure TotallyNotJson.231 (TotallyNotJson.232, TotallyNotJson.976, #Attr.12):
    let TotallyNotJson.230 : List Str = StructAtIndex 1 #Attr.12;
    let TotallyNotJson.229 : Str = StructAtIndex 0 #Attr.12;
    let TotallyNotJson.1014 : I64 = 123i64;
    let TotallyNotJson.1013 : U8 = CallByName Num.127 TotallyNotJson.1014;
    let TotallyNotJson.1010 : List U8 = CallByName List.4 TotallyNotJson.232 TotallyNotJson.1013;
    let TotallyNotJson.1012 : I64 = 34i64;
    let TotallyNotJson.1011 : U8 = CallByName Num.127 TotallyNotJson.1012;
    let TotallyNotJson.1008 : List U8 = CallByName List.4 TotallyNotJson.1010 TotallyNotJson.1011;
    let TotallyNotJson.1009 : List U8 = CallByName Str.12 TotallyNotJson.229;
    let TotallyNotJson.1005 : List U8 = CallByName List.8 TotallyNotJson.1008 TotallyNotJson.1009;
    let TotallyNotJson.1007 : I64 = 34i64;
    let TotallyNotJson.1006 : U8 = CallByName Num.127 TotallyNotJson.1007;
    let TotallyNotJson.1002 : List U8 = CallByName List.4 TotallyNotJson.1005 TotallyNotJson.1006;
    let TotallyNotJson.1004 : I64 = 58i64;
    let TotallyNotJson.1003 : U8 = CallByName Num.127 TotallyNotJson.1004;
    let TotallyNotJson.999 : List U8 = CallByName List.4 TotallyNotJson.1002 TotallyNotJson.1003;
    let TotallyNotJson.1001 : I64 = 91i64;
    let TotallyNotJson.1000 : U8 = CallByName Num.127 TotallyNotJson.1001;
    let TotallyNotJson.234 : List U8 = CallByName List.4 TotallyNotJson.999 TotallyNotJson.1000;
    let TotallyNotJson.998 : U64 = CallByName List.6 TotallyNotJson.230;
    let TotallyNotJson.986 : {List U8, U64} = Struct {TotallyNotJson.234, TotallyNotJson.998};
    let TotallyNotJson.987 : {} = Struct {};
    let TotallyNotJson.985 : {List U8, U64} = CallByName List.18 TotallyNotJson.230 TotallyNotJson.986 TotallyNotJson.987;
    let TotallyNotJson.236 : List U8 = StructAtIndex 0 TotallyNotJson.985;
    let TotallyNotJson.984 : I64 = 93i64;
    let TotallyNotJson.983 : U8 = CallByName Num.127 TotallyNotJson.984;
    let TotallyNotJson.980 : List U8 = CallByName List.4 TotallyNotJson.236 TotallyNotJson.983;
    let TotallyNotJson.982 : I64 = 125i64;
    let TotallyNotJson.981 : U8 = CallByName Num.127 TotallyNotJson.982;
    let TotallyNotJson.979 : List U8 = CallByName List.4 TotallyNotJson.980 TotallyNotJson.981;
    ret TotallyNotJson.979;

procedure TotallyNotJson.233 (TotallyNotJson.978, TotallyNotJson.239):
    let TotallyNotJson.237 : List U8 = StructAtIndex 0 TotallyNotJson.978;
    let TotallyNotJson.238 : U64 = StructAtIndex 1 TotallyNotJson.978;
    let TotallyNotJson.997 : {} = Struct {};
    let TotallyNotJson.240 : List U8 = CallByName Encode.24 TotallyNotJson.237 TotallyNotJson.239 TotallyNotJson.997;
    joinpoint TotallyNotJson.992 TotallyNotJson.241:
        let TotallyNotJson.990 : U64 = 1i64;
        let TotallyNotJson.989 : U64 = CallByName Num.20 TotallyNotJson.238 TotallyNotJson.990;
        let TotallyNotJson.988 : {List U8, U64} = Struct {TotallyNotJson.241, TotallyNotJson.989};
        ret TotallyNotJson.988;
    in
    let TotallyNotJson.996 : U64 = 1i64;
    let TotallyNotJson.993 : Int1 = CallByName Num.24 TotallyNotJson.238 TotallyNotJson.996;
    if TotallyNotJson.993 then
        let TotallyNotJson.995 : I64 = 44i64;
        let TotallyNotJson.994 : U8 = CallByName Num.127 TotallyNotJson.995;
        let TotallyNotJson.991 : List U8 = CallByName List.4 TotallyNotJson.240 TotallyNotJson.994;
        jump TotallyNotJson.992 TotallyNotJson.991;
    else
        jump TotallyNotJson.992 TotallyNotJson.240;

procedure TotallyNotJson.25 (TotallyNotJson.149):
    let TotallyNotJson.1102 : Str = CallByName Encode.23 TotallyNotJson.149;
    ret TotallyNotJson.1102;

procedure TotallyNotJson.26 (TotallyNotJson.152):
    let TotallyNotJson.153 : List U8 = CallByName Str.12 TotallyNotJson.152;
    let TotallyNotJson.1100 : U64 = 0i64;
    let TotallyNotJson.1101 : Int1 = true;
    let TotallyNotJson.154 : {U64, Int1} = Struct {TotallyNotJson.1100, TotallyNotJson.1101};
    let TotallyNotJson.1070 : {} = Struct {};
    inc TotallyNotJson.153;
    let TotallyNotJson.155 : {U64, Int1} = CallByName List.26 TotallyNotJson.153 TotallyNotJson.154 TotallyNotJson.1070;
    let TotallyNotJson.1024 : Int1 = StructAtIndex 1 TotallyNotJson.155;
    let TotallyNotJson.1068 : Int1 = true;
    let TotallyNotJson.1069 : Int1 = lowlevel Eq TotallyNotJson.1068 TotallyNotJson.1024;
    if TotallyNotJson.1069 then
        let TotallyNotJson.1034 : U64 = CallByName List.6 TotallyNotJson.153;
        let TotallyNotJson.1035 : U64 = 2i64;
        let TotallyNotJson.1033 : U64 = CallByName Num.19 TotallyNotJson.1034 TotallyNotJson.1035;
        let TotallyNotJson.1030 : List U8 = CallByName List.68 TotallyNotJson.1033;
        let TotallyNotJson.1032 : U8 = 34i64;
        let TotallyNotJson.1031 : List U8 = Array [TotallyNotJson.1032];
        let TotallyNotJson.1029 : List U8 = CallByName List.8 TotallyNotJson.1030 TotallyNotJson.1031;
        let TotallyNotJson.1026 : List U8 = CallByName List.8 TotallyNotJson.1029 TotallyNotJson.153;
        let TotallyNotJson.1028 : U8 = 34i64;
        let TotallyNotJson.1027 : List U8 = Array [TotallyNotJson.1028];
        let TotallyNotJson.1025 : List U8 = CallByName List.8 TotallyNotJson.1026 TotallyNotJson.1027;
        ret TotallyNotJson.1025;
    else
        inc TotallyNotJson.153;
        let TotallyNotJson.1067 : U64 = StructAtIndex 0 TotallyNotJson.155;
        let TotallyNotJson.1066 : {List U8, List U8} = CallByName List.52 TotallyNotJson.153 TotallyNotJson.1067;
        let TotallyNotJson.179 : List U8 = StructAtIndex 0 TotallyNotJson.1066;
        let TotallyNotJson.181 : List U8 = StructAtIndex 1 TotallyNotJson.1066;
        let TotallyNotJson.1064 : U64 = CallByName List.6 TotallyNotJson.153;
        dec TotallyNotJson.153;
        let TotallyNotJson.1065 : U64 = 120i64;
        let TotallyNotJson.1062 : U64 = CallByName Num.21 TotallyNotJson.1064 TotallyNotJson.1065;
        let TotallyNotJson.1063 : U64 = 100i64;
        let TotallyNotJson.1061 : U64 = CallByName Num.137 TotallyNotJson.1062 TotallyNotJson.1063;
        let TotallyNotJson.1058 : List U8 = CallByName List.68 TotallyNotJson.1061;
        let TotallyNotJson.1060 : U8 = 34i64;
        let TotallyNotJson.1059 : List U8 = Array [TotallyNotJson.1060];
        let TotallyNotJson.1057 : List U8 = CallByName List.8 TotallyNotJson.1058 TotallyNotJson.1059;
        let TotallyNotJson.182 : List U8 = CallByName List.8 TotallyNotJson.1057 TotallyNotJson.179;
        let TotallyNotJson.1040 : {} = Struct {};
        let TotallyNotJson.1037 : List U8 = CallByName List.18 TotallyNotJson.181 TotallyNotJson.182 TotallyNotJson.1040;
        let TotallyNotJson.1039 : U8 = 34i64;
        let TotallyNotJson.1038 : List U8 = Array [TotallyNotJson.1039];
        let TotallyNotJson.1036 : List U8 = CallByName List.8 TotallyNotJson.1037 TotallyNotJson.1038;
        ret TotallyNotJson.1036;

procedure TotallyNotJson.27 (TotallyNotJson.186):
    switch TotallyNotJson.186:
        case 34:
            let TotallyNotJson.1043 : List U8 = Array [92i64, 34i64];
            ret TotallyNotJson.1043;
    
        case 92:
            let TotallyNotJson.1044 : List U8 = Array [92i64, 92i64];
            ret TotallyNotJson.1044;
    
        case 47:
            let TotallyNotJson.1045 : List U8 = Array [92i64, 47i64];
            ret TotallyNotJson.1045;
    
        case 8:
            let TotallyNotJson.1047 : U8 = 98i64;
            let TotallyNotJson.1046 : List U8 = Array [92i64, TotallyNotJson.1047];
            ret TotallyNotJson.1046;
    
        case 12:
            let TotallyNotJson.1049 : U8 = 102i64;
            let TotallyNotJson.1048 : List U8 = Array [92i64, TotallyNotJson.1049];
            ret TotallyNotJson.1048;
    
        case 10:
            let TotallyNotJson.1051 : U8 = 110i64;
            let TotallyNotJson.1050 : List U8 = Array [92i64, TotallyNotJson.1051];
            ret TotallyNotJson.1050;
    
        case 13:
            let TotallyNotJson.1053 : U8 = 114i64;
            let TotallyNotJson.1052 : List U8 = Array [92i64, TotallyNotJson.1053];
            ret TotallyNotJson.1052;
    
        case 9:
            let TotallyNotJson.1055 : U8 = 114i64;
            let TotallyNotJson.1054 : List U8 = Array [92i64, TotallyNotJson.1055];
            ret TotallyNotJson.1054;
    
        default:
            let TotallyNotJson.1056 : List U8 = Array [TotallyNotJson.186];
            ret TotallyNotJson.1056;
    

procedure TotallyNotJson.31 (TotallyNotJson.229, TotallyNotJson.230):
    let TotallyNotJson.1016 : {Str, List Str} = Struct {TotallyNotJson.229, TotallyNotJson.230};
    let TotallyNotJson.1015 : {Str, List Str} = CallByName Encode.23 TotallyNotJson.1016;
    ret TotallyNotJson.1015;

procedure TotallyNotJson.8 ():
    let TotallyNotJson.973 : {} = Struct {};
    ret TotallyNotJson.973;

procedure Test.0 ():
    let Test.12 : {Str, Str} = CallByName Test.3;
    let Test.13 : {} = CallByName TotallyNotJson.8;
    let Test.11 : List U8 = CallByName Encode.26 Test.12 Test.13;
    ret Test.11;
