procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName Test.5 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Json.144 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.123 : List U8 = CallByName Json.102 Encode.99 Encode.101 Encode.107;
    ret Encode.123;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {Str, Str} = CallByName Test.2 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.483 : {} = Struct {};
    ret Json.483;

procedure Json.102 (Json.103, Json.530, Json.101):
    let Json.539 : I64 = 34i64;
    let Json.538 : U8 = CallByName Num.127 Json.539;
    let Json.536 : List U8 = CallByName List.4 Json.103 Json.538;
    let Json.537 : List U8 = CallByName Str.12 Json.101;
    let Json.533 : List U8 = CallByName List.8 Json.536 Json.537;
    let Json.535 : I64 = 34i64;
    let Json.534 : U8 = CallByName Num.127 Json.535;
    let Json.532 : List U8 = CallByName List.4 Json.533 Json.534;
    ret Json.532;

procedure Json.144 (Json.145, Json.486, #Attr.12):
    let Json.143 : List Str = StructAtIndex 1 #Attr.12;
    let Json.142 : Str = StructAtIndex 0 #Attr.12;
    let Json.524 : I64 = 123i64;
    let Json.523 : U8 = CallByName Num.127 Json.524;
    let Json.520 : List U8 = CallByName List.4 Json.145 Json.523;
    let Json.522 : I64 = 34i64;
    let Json.521 : U8 = CallByName Num.127 Json.522;
    let Json.518 : List U8 = CallByName List.4 Json.520 Json.521;
    let Json.519 : List U8 = CallByName Str.12 Json.142;
    let Json.515 : List U8 = CallByName List.8 Json.518 Json.519;
    let Json.517 : I64 = 34i64;
    let Json.516 : U8 = CallByName Num.127 Json.517;
    let Json.512 : List U8 = CallByName List.4 Json.515 Json.516;
    let Json.514 : I64 = 58i64;
    let Json.513 : U8 = CallByName Num.127 Json.514;
    let Json.509 : List U8 = CallByName List.4 Json.512 Json.513;
    let Json.511 : I64 = 91i64;
    let Json.510 : U8 = CallByName Num.127 Json.511;
    let Json.147 : List U8 = CallByName List.4 Json.509 Json.510;
    let Json.508 : U64 = CallByName List.6 Json.143;
    let Json.496 : {List U8, U64} = Struct {Json.147, Json.508};
    let Json.497 : {} = Struct {};
    let Json.495 : {List U8, U64} = CallByName List.18 Json.143 Json.496 Json.497;
    let Json.149 : List U8 = StructAtIndex 0 Json.495;
    let Json.494 : I64 = 93i64;
    let Json.493 : U8 = CallByName Num.127 Json.494;
    let Json.490 : List U8 = CallByName List.4 Json.149 Json.493;
    let Json.492 : I64 = 125i64;
    let Json.491 : U8 = CallByName Num.127 Json.492;
    let Json.489 : List U8 = CallByName List.4 Json.490 Json.491;
    ret Json.489;

procedure Json.146 (Json.488, Json.152):
    let Json.150 : List U8 = StructAtIndex 0 Json.488;
    let Json.151 : U64 = StructAtIndex 1 Json.488;
    let Json.507 : {} = Struct {};
    let Json.153 : List U8 = CallByName Encode.24 Json.150 Json.152 Json.507;
    joinpoint Json.502 Json.154:
        let Json.500 : U64 = 1i64;
        let Json.499 : U64 = CallByName Num.20 Json.151 Json.500;
        let Json.498 : {List U8, U64} = Struct {Json.154, Json.499};
        ret Json.498;
    in
    let Json.506 : U64 = 1i64;
    let Json.503 : Int1 = CallByName Num.24 Json.151 Json.506;
    if Json.503 then
        let Json.505 : I64 = 44i64;
        let Json.504 : U8 = CallByName Num.127 Json.505;
        let Json.501 : List U8 = CallByName List.4 Json.153 Json.504;
        jump Json.502 Json.501;
    else
        jump Json.502 Json.153;

procedure Json.18 (Json.101):
    let Json.540 : Str = CallByName Encode.23 Json.101;
    ret Json.540;

procedure Json.22 (Json.142, Json.143):
    let Json.526 : {Str, List Str} = Struct {Json.142, Json.143};
    let Json.525 : {Str, List Str} = CallByName Encode.23 Json.526;
    ret Json.525;

procedure List.139 (List.140, List.141, List.138):
    let List.545 : {List U8, U64} = CallByName Json.146 List.140 List.141;
    ret List.545;

procedure List.18 (List.136, List.137, List.138):
    let List.526 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.526;

procedure List.4 (List.107, List.108):
    let List.525 : U64 = 1i64;
    let List.524 : List U8 = CallByName List.70 List.107 List.525;
    let List.523 : List U8 = CallByName List.71 List.524 List.108;
    ret List.523;

procedure List.6 (#Attr.2):
    let List.546 : U64 = lowlevel ListLen #Attr.2;
    ret List.546;

procedure List.66 (#Attr.2, #Attr.3):
    let List.542 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.542;

procedure List.70 (#Attr.2, #Attr.3):
    let List.498 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.498;

procedure List.71 (#Attr.2, #Attr.3):
    let List.496 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.496;

procedure List.8 (#Attr.2, #Attr.3):
    let List.548 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.548;

procedure List.80 (List.558, List.559, List.560, List.561, List.562):
    joinpoint List.532 List.433 List.434 List.435 List.436 List.437:
        let List.534 : Int1 = CallByName Num.22 List.436 List.437;
        if List.534 then
            let List.541 : Str = CallByName List.66 List.433 List.436;
            inc List.541;
            let List.535 : {List U8, U64} = CallByName List.139 List.434 List.541 List.435;
            let List.538 : U64 = 1i64;
            let List.537 : U64 = CallByName Num.19 List.436 List.538;
            jump List.532 List.433 List.535 List.435 List.537 List.437;
        else
            dec List.433;
            ret List.434;
    in
    jump List.532 List.558 List.559 List.560 List.561 List.562;

procedure List.92 (List.430, List.431, List.432):
    let List.530 : U64 = 0i64;
    let List.531 : U64 = CallByName List.6 List.430;
    let List.529 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.530 List.531;
    ret List.529;

procedure Num.127 (#Attr.2):
    let Num.290 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.290;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.293;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.294 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.292 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.292;

procedure Str.12 (#Attr.2):
    let Str.299 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.299;

procedure Test.2 (Test.10):
    let Test.15 : {Str, Str} = CallByName Encode.23 Test.10;
    ret Test.15;

procedure Test.3 ():
    let Test.9 : Str = "";
    inc Test.9;
    let Test.14 : {Str, Str} = Struct {Test.9, Test.9};
    ret Test.14;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.20 Test.8:
        let Test.18 : List U8 = CallByName Encode.24 Test.6 Test.8 Test.7;
        ret Test.18;
    in
    let Test.25 : Int1 = CallByName Bool.2;
    if Test.25 then
        let Test.26 : Str = "A";
        let Test.29 : Str = StructAtIndex 0 Test.4;
        let #Derived_gen.0 : Str = StructAtIndex 1 Test.4;
        dec #Derived_gen.0;
        let Test.28 : Str = CallByName Json.18 Test.29;
        let Test.27 : List Str = Array [Test.28];
        let Test.19 : {Str, List Str} = CallByName Json.22 Test.26 Test.27;
        jump Test.20 Test.19;
    else
        let Test.21 : Str = "B";
        let Test.24 : Str = StructAtIndex 1 Test.4;
        let #Derived_gen.1 : Str = StructAtIndex 0 Test.4;
        dec #Derived_gen.1;
        let Test.23 : Str = CallByName Json.18 Test.24;
        let Test.22 : List Str = Array [Test.23];
        let Test.19 : {Str, List Str} = CallByName Json.22 Test.21 Test.22;
        jump Test.20 Test.19;

procedure Test.0 ():
    let Test.12 : {Str, Str} = CallByName Test.3;
    let Test.13 : {} = CallByName Json.1;
    let Test.11 : List U8 = CallByName Encode.26 Test.12 Test.13;
    ret Test.11;
