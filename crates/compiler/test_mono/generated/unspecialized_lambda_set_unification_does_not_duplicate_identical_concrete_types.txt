procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName Test.5 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Json.188 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.123 : List U8 = CallByName Json.146 Encode.99 Encode.101 Encode.107;
    ret Encode.123;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {Str, Str} = CallByName Test.2 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.878 : {} = Struct {};
    ret Json.878;

procedure Json.146 (Json.147, Json.925, Json.145):
    let Json.934 : I64 = 34i64;
    let Json.933 : U8 = CallByName Num.127 Json.934;
    let Json.931 : List U8 = CallByName List.4 Json.147 Json.933;
    let Json.932 : List U8 = CallByName Str.12 Json.145;
    let Json.928 : List U8 = CallByName List.8 Json.931 Json.932;
    let Json.930 : I64 = 34i64;
    let Json.929 : U8 = CallByName Num.127 Json.930;
    let Json.927 : List U8 = CallByName List.4 Json.928 Json.929;
    ret Json.927;

procedure Json.188 (Json.189, Json.881, #Attr.12):
    let Json.187 : List Str = StructAtIndex 1 #Attr.12;
    inc Json.187;
    let Json.186 : Str = StructAtIndex 0 #Attr.12;
    inc Json.186;
    dec #Attr.12;
    let Json.919 : I64 = 123i64;
    let Json.918 : U8 = CallByName Num.127 Json.919;
    let Json.915 : List U8 = CallByName List.4 Json.189 Json.918;
    let Json.917 : I64 = 34i64;
    let Json.916 : U8 = CallByName Num.127 Json.917;
    let Json.913 : List U8 = CallByName List.4 Json.915 Json.916;
    let Json.914 : List U8 = CallByName Str.12 Json.186;
    let Json.910 : List U8 = CallByName List.8 Json.913 Json.914;
    let Json.912 : I64 = 34i64;
    let Json.911 : U8 = CallByName Num.127 Json.912;
    let Json.907 : List U8 = CallByName List.4 Json.910 Json.911;
    let Json.909 : I64 = 58i64;
    let Json.908 : U8 = CallByName Num.127 Json.909;
    let Json.904 : List U8 = CallByName List.4 Json.907 Json.908;
    let Json.906 : I64 = 91i64;
    let Json.905 : U8 = CallByName Num.127 Json.906;
    let Json.191 : List U8 = CallByName List.4 Json.904 Json.905;
    let Json.903 : U64 = CallByName List.6 Json.187;
    let Json.891 : {List U8, U64} = Struct {Json.191, Json.903};
    let Json.892 : {} = Struct {};
    let Json.890 : {List U8, U64} = CallByName List.18 Json.187 Json.891 Json.892;
    dec Json.187;
    let Json.193 : List U8 = StructAtIndex 0 Json.890;
    inc Json.193;
    dec Json.890;
    let Json.889 : I64 = 93i64;
    let Json.888 : U8 = CallByName Num.127 Json.889;
    let Json.885 : List U8 = CallByName List.4 Json.193 Json.888;
    let Json.887 : I64 = 125i64;
    let Json.886 : U8 = CallByName Num.127 Json.887;
    let Json.884 : List U8 = CallByName List.4 Json.885 Json.886;
    ret Json.884;

procedure Json.190 (Json.883, Json.196):
    let Json.194 : List U8 = StructAtIndex 0 Json.883;
    inc Json.194;
    let Json.195 : U64 = StructAtIndex 1 Json.883;
    dec Json.883;
    let Json.902 : {} = Struct {};
    let Json.197 : List U8 = CallByName Encode.24 Json.194 Json.196 Json.902;
    joinpoint Json.897 Json.198:
        let Json.895 : U64 = 1i64;
        let Json.894 : U64 = CallByName Num.20 Json.195 Json.895;
        let Json.893 : {List U8, U64} = Struct {Json.198, Json.894};
        ret Json.893;
    in
    let Json.901 : U64 = 1i64;
    let Json.898 : Int1 = CallByName Num.24 Json.195 Json.901;
    if Json.898 then
        let Json.900 : I64 = 44i64;
        let Json.899 : U8 = CallByName Num.127 Json.900;
        let Json.896 : List U8 = CallByName List.4 Json.197 Json.899;
        jump Json.897 Json.896;
    else
        jump Json.897 Json.197;

procedure Json.23 (Json.145):
    let Json.935 : Str = CallByName Encode.23 Json.145;
    ret Json.935;

procedure Json.27 (Json.186, Json.187):
    let Json.921 : {Str, List Str} = Struct {Json.186, Json.187};
    let Json.920 : {Str, List Str} = CallByName Encode.23 Json.921;
    ret Json.920;

procedure List.139 (List.140, List.141, List.138):
    let List.545 : {List U8, U64} = CallByName Json.190 List.140 List.141;
    ret List.545;

procedure List.18 (List.136, List.137, List.138):
    let List.526 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.526;

procedure List.4 (List.107, List.108):
    let List.525 : U64 = 1i64;
    let List.524 : List U8 = CallByName List.70 List.107 List.525;
    let List.523 : List U8 = CallByName List.71 List.524 List.108;
    ret List.523;

procedure List.6 (#Attr.2):
    let List.546 : U64 = lowlevel ListLen #Attr.2;
    ret List.546;

procedure List.66 (#Attr.2, #Attr.3):
    let List.542 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.542;

procedure List.70 (#Attr.2, #Attr.3):
    let List.498 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.498;

procedure List.71 (#Attr.2, #Attr.3):
    let List.496 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.496;

procedure List.8 (#Attr.2, #Attr.3):
    let List.548 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.548;

procedure List.80 (List.558, List.559, List.560, List.561, List.562):
    joinpoint List.532 List.433 List.434 List.435 List.436 List.437:
        let List.534 : Int1 = CallByName Num.22 List.436 List.437;
        if List.534 then
            let List.541 : Str = CallByName List.66 List.433 List.436;
            let List.535 : {List U8, U64} = CallByName List.139 List.434 List.541 List.435;
            let List.538 : U64 = 1i64;
            let List.537 : U64 = CallByName Num.19 List.436 List.538;
            jump List.532 List.433 List.535 List.435 List.537 List.437;
        else
            ret List.434;
    in
    jump List.532 List.558 List.559 List.560 List.561 List.562;

procedure List.92 (List.430, List.431, List.432):
    let List.530 : U64 = 0i64;
    let List.531 : U64 = CallByName List.6 List.430;
    let List.529 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.530 List.531;
    ret List.529;

procedure Num.127 (#Attr.2):
    let Num.284 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.284;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.287 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.287;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.288 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.286;

procedure Str.12 (#Attr.2):
    let Str.267 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.267;

procedure Test.2 (Test.10):
    let Test.15 : {Str, Str} = CallByName Encode.23 Test.10;
    ret Test.15;

procedure Test.3 ():
    let Test.9 : Str = "";
    inc Test.9;
    let Test.14 : {Str, Str} = Struct {Test.9, Test.9};
    ret Test.14;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.20 Test.8:
        let Test.18 : List U8 = CallByName Encode.24 Test.6 Test.8 Test.7;
        ret Test.18;
    in
    let Test.25 : Int1 = CallByName Bool.2;
    if Test.25 then
        let Test.26 : Str = "A";
        let Test.29 : Str = StructAtIndex 0 Test.4;
        inc Test.29;
        dec Test.4;
        let Test.28 : Str = CallByName Json.23 Test.29;
        let Test.27 : List Str = Array [Test.28];
        let Test.19 : {Str, List Str} = CallByName Json.27 Test.26 Test.27;
        jump Test.20 Test.19;
    else
        let Test.21 : Str = "B";
        let Test.24 : Str = StructAtIndex 1 Test.4;
        inc Test.24;
        dec Test.4;
        let Test.23 : Str = CallByName Json.23 Test.24;
        let Test.22 : List Str = Array [Test.23];
        let Test.19 : {Str, List Str} = CallByName Json.27 Test.21 Test.22;
        jump Test.20 Test.19;

procedure Test.0 ():
    let Test.12 : {Str, Str} = CallByName Test.3;
    let Test.13 : {} = CallByName Json.1;
    let Test.11 : List U8 = CallByName Encode.26 Test.12 Test.13;
    ret Test.11;
