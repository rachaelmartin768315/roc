procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName Test.5 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Json.181 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.123 : List U8 = CallByName Json.139 Encode.99 Encode.101 Encode.107;
    ret Encode.123;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {Str, Str} = CallByName Test.2 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.814 : {} = Struct {};
    ret Json.814;

procedure Json.139 (Json.140, Json.861, Json.138):
    let Json.870 : I64 = 34i64;
    let Json.869 : U8 = CallByName Num.127 Json.870;
    let Json.867 : List U8 = CallByName List.4 Json.140 Json.869;
    let Json.868 : List U8 = CallByName Str.12 Json.138;
    let Json.864 : List U8 = CallByName List.8 Json.867 Json.868;
    let Json.866 : I64 = 34i64;
    let Json.865 : U8 = CallByName Num.127 Json.866;
    let Json.863 : List U8 = CallByName List.4 Json.864 Json.865;
    ret Json.863;

procedure Json.181 (Json.182, Json.817, #Attr.12):
    let Json.180 : List Str = StructAtIndex 1 #Attr.12;
    inc Json.180;
    let Json.179 : Str = StructAtIndex 0 #Attr.12;
    inc Json.179;
    dec #Attr.12;
    let Json.855 : I64 = 123i64;
    let Json.854 : U8 = CallByName Num.127 Json.855;
    let Json.851 : List U8 = CallByName List.4 Json.182 Json.854;
    let Json.853 : I64 = 34i64;
    let Json.852 : U8 = CallByName Num.127 Json.853;
    let Json.849 : List U8 = CallByName List.4 Json.851 Json.852;
    let Json.850 : List U8 = CallByName Str.12 Json.179;
    let Json.846 : List U8 = CallByName List.8 Json.849 Json.850;
    let Json.848 : I64 = 34i64;
    let Json.847 : U8 = CallByName Num.127 Json.848;
    let Json.843 : List U8 = CallByName List.4 Json.846 Json.847;
    let Json.845 : I64 = 58i64;
    let Json.844 : U8 = CallByName Num.127 Json.845;
    let Json.840 : List U8 = CallByName List.4 Json.843 Json.844;
    let Json.842 : I64 = 91i64;
    let Json.841 : U8 = CallByName Num.127 Json.842;
    let Json.184 : List U8 = CallByName List.4 Json.840 Json.841;
    let Json.839 : U64 = CallByName List.6 Json.180;
    let Json.827 : {List U8, U64} = Struct {Json.184, Json.839};
    let Json.828 : {} = Struct {};
    let Json.826 : {List U8, U64} = CallByName List.18 Json.180 Json.827 Json.828;
    dec Json.180;
    let Json.186 : List U8 = StructAtIndex 0 Json.826;
    inc Json.186;
    dec Json.826;
    let Json.825 : I64 = 93i64;
    let Json.824 : U8 = CallByName Num.127 Json.825;
    let Json.821 : List U8 = CallByName List.4 Json.186 Json.824;
    let Json.823 : I64 = 125i64;
    let Json.822 : U8 = CallByName Num.127 Json.823;
    let Json.820 : List U8 = CallByName List.4 Json.821 Json.822;
    ret Json.820;

procedure Json.183 (Json.819, Json.189):
    let Json.187 : List U8 = StructAtIndex 0 Json.819;
    inc Json.187;
    let Json.188 : U64 = StructAtIndex 1 Json.819;
    dec Json.819;
    let Json.838 : {} = Struct {};
    let Json.190 : List U8 = CallByName Encode.24 Json.187 Json.189 Json.838;
    joinpoint Json.833 Json.191:
        let Json.831 : U64 = 1i64;
        let Json.830 : U64 = CallByName Num.20 Json.188 Json.831;
        let Json.829 : {List U8, U64} = Struct {Json.191, Json.830};
        ret Json.829;
    in
    let Json.837 : U64 = 1i64;
    let Json.834 : Int1 = CallByName Num.24 Json.188 Json.837;
    if Json.834 then
        let Json.836 : I64 = 44i64;
        let Json.835 : U8 = CallByName Num.127 Json.836;
        let Json.832 : List U8 = CallByName List.4 Json.190 Json.835;
        jump Json.833 Json.832;
    else
        jump Json.833 Json.190;

procedure Json.22 (Json.138):
    let Json.871 : Str = CallByName Encode.23 Json.138;
    ret Json.871;

procedure Json.26 (Json.179, Json.180):
    let Json.857 : {Str, List Str} = Struct {Json.179, Json.180};
    let Json.856 : {Str, List Str} = CallByName Encode.23 Json.857;
    ret Json.856;

procedure List.139 (List.140, List.141, List.138):
    let List.545 : {List U8, U64} = CallByName Json.183 List.140 List.141;
    ret List.545;

procedure List.18 (List.136, List.137, List.138):
    let List.526 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.526;

procedure List.4 (List.107, List.108):
    let List.525 : U64 = 1i64;
    let List.524 : List U8 = CallByName List.70 List.107 List.525;
    let List.523 : List U8 = CallByName List.71 List.524 List.108;
    ret List.523;

procedure List.6 (#Attr.2):
    let List.546 : U64 = lowlevel ListLen #Attr.2;
    ret List.546;

procedure List.66 (#Attr.2, #Attr.3):
    let List.542 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.542;

procedure List.70 (#Attr.2, #Attr.3):
    let List.498 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.498;

procedure List.71 (#Attr.2, #Attr.3):
    let List.496 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.496;

procedure List.8 (#Attr.2, #Attr.3):
    let List.548 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.548;

procedure List.80 (List.558, List.559, List.560, List.561, List.562):
    joinpoint List.532 List.433 List.434 List.435 List.436 List.437:
        let List.534 : Int1 = CallByName Num.22 List.436 List.437;
        if List.534 then
            let List.541 : Str = CallByName List.66 List.433 List.436;
            let List.535 : {List U8, U64} = CallByName List.139 List.434 List.541 List.435;
            let List.538 : U64 = 1i64;
            let List.537 : U64 = CallByName Num.19 List.436 List.538;
            jump List.532 List.433 List.535 List.435 List.537 List.437;
        else
            ret List.434;
    in
    jump List.532 List.558 List.559 List.560 List.561 List.562;

procedure List.92 (List.430, List.431, List.432):
    let List.530 : U64 = 0i64;
    let List.531 : U64 = CallByName List.6 List.430;
    let List.529 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.530 List.531;
    ret List.529;

procedure Num.127 (#Attr.2):
    let Num.284 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.284;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.287 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.287;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.288 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.286;

procedure Str.12 (#Attr.2):
    let Str.267 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.267;

procedure Test.2 (Test.10):
    let Test.15 : {Str, Str} = CallByName Encode.23 Test.10;
    ret Test.15;

procedure Test.3 ():
    let Test.9 : Str = "";
    inc Test.9;
    let Test.14 : {Str, Str} = Struct {Test.9, Test.9};
    ret Test.14;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.20 Test.8:
        let Test.18 : List U8 = CallByName Encode.24 Test.6 Test.8 Test.7;
        ret Test.18;
    in
    let Test.25 : Int1 = CallByName Bool.2;
    if Test.25 then
        let Test.26 : Str = "A";
        let Test.29 : Str = StructAtIndex 0 Test.4;
        inc Test.29;
        dec Test.4;
        let Test.28 : Str = CallByName Json.22 Test.29;
        let Test.27 : List Str = Array [Test.28];
        let Test.19 : {Str, List Str} = CallByName Json.26 Test.26 Test.27;
        jump Test.20 Test.19;
    else
        let Test.21 : Str = "B";
        let Test.24 : Str = StructAtIndex 1 Test.4;
        inc Test.24;
        dec Test.4;
        let Test.23 : Str = CallByName Json.22 Test.24;
        let Test.22 : List Str = Array [Test.23];
        let Test.19 : {Str, List Str} = CallByName Json.26 Test.21 Test.22;
        jump Test.20 Test.19;

procedure Test.0 ():
    let Test.12 : {Str, Str} = CallByName Test.3;
    let Test.13 : {} = CallByName Json.1;
    let Test.11 : List U8 = CallByName Encode.26 Test.12 Test.13;
    ret Test.11;
