procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName Test.5 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.113 : List U8 = CallByName TotallyNotJson.264 Encode.99 Encode.101 Encode.107;
    ret Encode.113;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName TotallyNotJson.182 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {Str, Str} = CallByName Test.2 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure List.18 (List.154, List.155, List.156):
    let List.580 : U64 = 0i64;
    let List.581 : U64 = CallByName List.6 List.154;
    let List.579 : {List U8, U64} = CallByName List.88 List.154 List.155 List.156 List.580 List.581;
    ret List.579;

procedure List.18 (List.154, List.155, List.156):
    let List.592 : U64 = 0i64;
    let List.593 : U64 = CallByName List.6 List.154;
    let List.591 : List U8 = CallByName List.88 List.154 List.155 List.156 List.592 List.593;
    ret List.591;

procedure List.26 (List.181, List.182, List.183):
    let List.629 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.99 List.181 List.182 List.183;
    let List.632 : U8 = 1i64;
    let List.633 : U8 = GetTagId List.629;
    let List.634 : Int1 = lowlevel Eq List.632 List.633;
    if List.634 then
        let List.184 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.629;
        ret List.184;
    else
        let List.185 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.629;
        ret List.185;

procedure List.4 (List.119, List.120):
    let List.578 : U64 = 1i64;
    let List.577 : List U8 = CallByName List.70 List.119 List.578;
    let List.576 : List U8 = CallByName List.71 List.577 List.120;
    ret List.576;

procedure List.49 (List.400, List.401):
    let List.620 : U64 = StructAtIndex 1 List.401;
    let List.621 : U64 = StructAtIndex 0 List.401;
    let List.619 : List U8 = CallByName List.72 List.400 List.620 List.621;
    ret List.619;

procedure List.52 (List.415, List.416):
    let List.417 : U64 = CallByName List.6 List.415;
    joinpoint List.627 List.418:
        let List.625 : U64 = 0i64;
        let List.624 : {U64, U64} = Struct {List.418, List.625};
        inc List.415;
        let List.419 : List U8 = CallByName List.49 List.415 List.624;
        let List.623 : U64 = CallByName Num.75 List.417 List.418;
        let List.618 : {U64, U64} = Struct {List.623, List.418};
        let List.420 : List U8 = CallByName List.49 List.415 List.618;
        let List.617 : {List U8, List U8} = Struct {List.419, List.420};
        ret List.617;
    in
    let List.628 : Int1 = CallByName Num.24 List.417 List.416;
    if List.628 then
        jump List.627 List.416;
    else
        jump List.627 List.417;

procedure List.6 (#Attr.2):
    let List.603 : U64 = lowlevel ListLen #Attr.2;
    ret List.603;

procedure List.6 (#Attr.2):
    let List.605 : U64 = lowlevel ListLen #Attr.2;
    ret List.605;

procedure List.66 (#Attr.2, #Attr.3):
    let List.589 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.589;

procedure List.66 (#Attr.2, #Attr.3):
    let List.601 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.601;

procedure List.68 (#Attr.2):
    let List.616 : List U8 = lowlevel ListWithCapacity #Attr.2;
    ret List.616;

procedure List.70 (#Attr.2, #Attr.3):
    let List.557 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.557;

procedure List.71 (#Attr.2, #Attr.3):
    let List.555 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.555;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.622 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.622;

procedure List.8 (#Attr.2, #Attr.3):
    let List.614 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.614;

procedure List.80 (#Derived_gen.13, #Derived_gen.14, #Derived_gen.15, #Derived_gen.16, #Derived_gen.17):
    joinpoint List.638 List.471 List.472 List.473 List.474 List.475:
        let List.640 : Int1 = CallByName Num.22 List.474 List.475;
        if List.640 then
            let List.649 : U8 = CallByName List.66 List.471 List.474;
            let List.641 : [C {U64, Int1}, C {U64, Int1}] = CallByName TotallyNotJson.189 List.472 List.649;
            let List.646 : U8 = 1i64;
            let List.647 : U8 = GetTagId List.641;
            let List.648 : Int1 = lowlevel Eq List.646 List.647;
            if List.648 then
                let List.476 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.641;
                let List.644 : U64 = 1i64;
                let List.643 : U64 = CallByName Num.51 List.474 List.644;
                jump List.638 List.471 List.476 List.473 List.643 List.475;
            else
                dec List.471;
                let List.477 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.641;
                let List.645 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) List.477;
                ret List.645;
        else
            dec List.471;
            let List.639 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) List.472;
            ret List.639;
    in
    jump List.638 #Derived_gen.13 #Derived_gen.14 #Derived_gen.15 #Derived_gen.16 #Derived_gen.17;

procedure List.88 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.582 List.157 List.158 List.159 List.160 List.161:
        let List.584 : Int1 = CallByName Num.22 List.160 List.161;
        if List.584 then
            let List.588 : Str = CallByName List.66 List.157 List.160;
            inc List.588;
            let List.162 : {List U8, U64} = CallByName TotallyNotJson.267 List.158 List.588 List.159;
            let List.587 : U64 = 1i64;
            let List.586 : U64 = CallByName Num.51 List.160 List.587;
            jump List.582 List.157 List.162 List.159 List.586 List.161;
        else
            dec List.157;
            ret List.158;
    in
    jump List.582 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure List.88 (#Derived_gen.8, #Derived_gen.9, #Derived_gen.10, #Derived_gen.11, #Derived_gen.12):
    joinpoint List.594 List.157 List.158 List.159 List.160 List.161:
        let List.596 : Int1 = CallByName Num.22 List.160 List.161;
        if List.596 then
            let List.600 : U8 = CallByName List.66 List.157 List.160;
            let List.162 : List U8 = CallByName TotallyNotJson.215 List.158 List.600;
            let List.599 : U64 = 1i64;
            let List.598 : U64 = CallByName Num.51 List.160 List.599;
            jump List.594 List.157 List.162 List.159 List.598 List.161;
        else
            dec List.157;
            ret List.158;
    in
    jump List.594 #Derived_gen.8 #Derived_gen.9 #Derived_gen.10 #Derived_gen.11 #Derived_gen.12;

procedure List.99 (List.468, List.469, List.470):
    let List.636 : U64 = 0i64;
    let List.637 : U64 = CallByName List.6 List.468;
    let List.635 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.80 List.468 List.469 List.470 List.636 List.637;
    ret List.635;

procedure Num.127 (#Attr.2):
    let Num.298 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.298;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.302 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.302;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.299 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.299;

procedure Num.21 (#Attr.2, #Attr.3):
    let Num.304 : U64 = lowlevel NumMul #Attr.2 #Attr.3;
    ret Num.304;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.310 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.310;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.312 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.312;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.307 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.307;

procedure Num.75 (#Attr.2, #Attr.3):
    let Num.311 : U64 = lowlevel NumSubWrap #Attr.2 #Attr.3;
    ret Num.311;

procedure Num.94 (#Attr.2, #Attr.3):
    let Num.303 : U64 = lowlevel NumDivCeilUnchecked #Attr.2 #Attr.3;
    ret Num.303;

procedure Str.12 (#Attr.2):
    let Str.293 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.293;

procedure Test.2 (Test.10):
    let Test.15 : {Str, Str} = CallByName Encode.23 Test.10;
    ret Test.15;

procedure Test.3 ():
    let Test.9 : Str = "";
    inc Test.9;
    let Test.14 : {Str, Str} = Struct {Test.9, Test.9};
    ret Test.14;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.20 Test.8:
        let Test.18 : List U8 = CallByName Encode.24 Test.6 Test.8 Test.7;
        ret Test.18;
    in
    let Test.25 : Int1 = CallByName Bool.2;
    if Test.25 then
        let Test.26 : Str = "A";
        let Test.29 : Str = StructAtIndex 0 Test.4;
        let #Derived_gen.24 : Str = StructAtIndex 1 Test.4;
        dec #Derived_gen.24;
        let Test.28 : Str = CallByName TotallyNotJson.25 Test.29;
        let Test.27 : List Str = Array [Test.28];
        let Test.19 : {Str, List Str} = CallByName TotallyNotJson.32 Test.26 Test.27;
        jump Test.20 Test.19;
    else
        let Test.21 : Str = "B";
        let Test.24 : Str = StructAtIndex 1 Test.4;
        let #Derived_gen.25 : Str = StructAtIndex 0 Test.4;
        dec #Derived_gen.25;
        let Test.23 : Str = CallByName TotallyNotJson.25 Test.24;
        let Test.22 : List Str = Array [Test.23];
        let Test.19 : {Str, List Str} = CallByName TotallyNotJson.32 Test.21 Test.22;
        jump Test.20 Test.19;

procedure TotallyNotJson.182 (TotallyNotJson.183, TotallyNotJson.1219, TotallyNotJson.181):
    let TotallyNotJson.1222 : List U8 = CallByName TotallyNotJson.26 TotallyNotJson.181;
    let TotallyNotJson.1221 : List U8 = CallByName List.8 TotallyNotJson.183 TotallyNotJson.1222;
    ret TotallyNotJson.1221;

procedure TotallyNotJson.189 (TotallyNotJson.1270, TotallyNotJson.192):
    let TotallyNotJson.190 : U64 = StructAtIndex 0 TotallyNotJson.1270;
    let TotallyNotJson.191 : Int1 = StructAtIndex 1 TotallyNotJson.1270;
    switch TotallyNotJson.192:
        case 34:
            let TotallyNotJson.1273 : Int1 = false;
            let TotallyNotJson.1272 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1273};
            let TotallyNotJson.1271 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1272;
            ret TotallyNotJson.1271;
    
        case 92:
            let TotallyNotJson.1276 : Int1 = false;
            let TotallyNotJson.1275 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1276};
            let TotallyNotJson.1274 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1275;
            ret TotallyNotJson.1274;
    
        case 47:
            let TotallyNotJson.1279 : Int1 = false;
            let TotallyNotJson.1278 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1279};
            let TotallyNotJson.1277 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1278;
            ret TotallyNotJson.1277;
    
        case 8:
            let TotallyNotJson.1282 : Int1 = false;
            let TotallyNotJson.1281 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1282};
            let TotallyNotJson.1280 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1281;
            ret TotallyNotJson.1280;
    
        case 12:
            let TotallyNotJson.1285 : Int1 = false;
            let TotallyNotJson.1284 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1285};
            let TotallyNotJson.1283 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1284;
            ret TotallyNotJson.1283;
    
        case 10:
            let TotallyNotJson.1288 : Int1 = false;
            let TotallyNotJson.1287 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1288};
            let TotallyNotJson.1286 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1287;
            ret TotallyNotJson.1286;
    
        case 13:
            let TotallyNotJson.1291 : Int1 = false;
            let TotallyNotJson.1290 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1291};
            let TotallyNotJson.1289 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1290;
            ret TotallyNotJson.1289;
    
        case 9:
            let TotallyNotJson.1294 : Int1 = false;
            let TotallyNotJson.1293 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1294};
            let TotallyNotJson.1292 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1293;
            ret TotallyNotJson.1292;
    
        default:
            let TotallyNotJson.1298 : U64 = 1i64;
            let TotallyNotJson.1297 : U64 = CallByName Num.19 TotallyNotJson.190 TotallyNotJson.1298;
            let TotallyNotJson.1296 : {U64, Int1} = Struct {TotallyNotJson.1297, TotallyNotJson.191};
            let TotallyNotJson.1295 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) TotallyNotJson.1296;
            ret TotallyNotJson.1295;
    

procedure TotallyNotJson.215 (TotallyNotJson.216, TotallyNotJson.217):
    let TotallyNotJson.1241 : List U8 = CallByName TotallyNotJson.27 TotallyNotJson.217;
    let TotallyNotJson.1240 : List U8 = CallByName List.8 TotallyNotJson.216 TotallyNotJson.1241;
    ret TotallyNotJson.1240;

procedure TotallyNotJson.25 (TotallyNotJson.181):
    let TotallyNotJson.1301 : Str = CallByName Encode.23 TotallyNotJson.181;
    ret TotallyNotJson.1301;

procedure TotallyNotJson.26 (TotallyNotJson.184):
    let TotallyNotJson.185 : List U8 = CallByName Str.12 TotallyNotJson.184;
    let TotallyNotJson.1299 : U64 = 0i64;
    let TotallyNotJson.1300 : Int1 = true;
    let TotallyNotJson.186 : {U64, Int1} = Struct {TotallyNotJson.1299, TotallyNotJson.1300};
    let TotallyNotJson.1269 : {} = Struct {};
    inc TotallyNotJson.185;
    let TotallyNotJson.187 : {U64, Int1} = CallByName List.26 TotallyNotJson.185 TotallyNotJson.186 TotallyNotJson.1269;
    let TotallyNotJson.1223 : Int1 = StructAtIndex 1 TotallyNotJson.187;
    let TotallyNotJson.1267 : Int1 = true;
    let TotallyNotJson.1268 : Int1 = lowlevel Eq TotallyNotJson.1267 TotallyNotJson.1223;
    if TotallyNotJson.1268 then
        let TotallyNotJson.1233 : U64 = CallByName List.6 TotallyNotJson.185;
        let TotallyNotJson.1234 : U64 = 2i64;
        let TotallyNotJson.1232 : U64 = CallByName Num.19 TotallyNotJson.1233 TotallyNotJson.1234;
        let TotallyNotJson.1229 : List U8 = CallByName List.68 TotallyNotJson.1232;
        let TotallyNotJson.1231 : U8 = 34i64;
        let TotallyNotJson.1230 : List U8 = Array [TotallyNotJson.1231];
        let TotallyNotJson.1228 : List U8 = CallByName List.8 TotallyNotJson.1229 TotallyNotJson.1230;
        let TotallyNotJson.1225 : List U8 = CallByName List.8 TotallyNotJson.1228 TotallyNotJson.185;
        let TotallyNotJson.1227 : U8 = 34i64;
        let TotallyNotJson.1226 : List U8 = Array [TotallyNotJson.1227];
        let TotallyNotJson.1224 : List U8 = CallByName List.8 TotallyNotJson.1225 TotallyNotJson.1226;
        ret TotallyNotJson.1224;
    else
        inc TotallyNotJson.185;
        let TotallyNotJson.1266 : U64 = StructAtIndex 0 TotallyNotJson.187;
        let TotallyNotJson.1265 : {List U8, List U8} = CallByName List.52 TotallyNotJson.185 TotallyNotJson.1266;
        let TotallyNotJson.211 : List U8 = StructAtIndex 0 TotallyNotJson.1265;
        let TotallyNotJson.213 : List U8 = StructAtIndex 1 TotallyNotJson.1265;
        let TotallyNotJson.1263 : U64 = CallByName List.6 TotallyNotJson.185;
        dec TotallyNotJson.185;
        let TotallyNotJson.1264 : U64 = 120i64;
        let TotallyNotJson.1261 : U64 = CallByName Num.21 TotallyNotJson.1263 TotallyNotJson.1264;
        let TotallyNotJson.1262 : U64 = 100i64;
        let TotallyNotJson.1260 : U64 = CallByName Num.94 TotallyNotJson.1261 TotallyNotJson.1262;
        let TotallyNotJson.1257 : List U8 = CallByName List.68 TotallyNotJson.1260;
        let TotallyNotJson.1259 : U8 = 34i64;
        let TotallyNotJson.1258 : List U8 = Array [TotallyNotJson.1259];
        let TotallyNotJson.1256 : List U8 = CallByName List.8 TotallyNotJson.1257 TotallyNotJson.1258;
        let TotallyNotJson.214 : List U8 = CallByName List.8 TotallyNotJson.1256 TotallyNotJson.211;
        let TotallyNotJson.1239 : {} = Struct {};
        let TotallyNotJson.1236 : List U8 = CallByName List.18 TotallyNotJson.213 TotallyNotJson.214 TotallyNotJson.1239;
        let TotallyNotJson.1238 : U8 = 34i64;
        let TotallyNotJson.1237 : List U8 = Array [TotallyNotJson.1238];
        let TotallyNotJson.1235 : List U8 = CallByName List.8 TotallyNotJson.1236 TotallyNotJson.1237;
        ret TotallyNotJson.1235;

procedure TotallyNotJson.264 (TotallyNotJson.265, TotallyNotJson.1175, #Attr.12):
    let TotallyNotJson.263 : List Str = StructAtIndex 1 #Attr.12;
    let TotallyNotJson.262 : Str = StructAtIndex 0 #Attr.12;
    let TotallyNotJson.1213 : I64 = 123i64;
    let TotallyNotJson.1212 : U8 = CallByName Num.127 TotallyNotJson.1213;
    let TotallyNotJson.1209 : List U8 = CallByName List.4 TotallyNotJson.265 TotallyNotJson.1212;
    let TotallyNotJson.1211 : I64 = 34i64;
    let TotallyNotJson.1210 : U8 = CallByName Num.127 TotallyNotJson.1211;
    let TotallyNotJson.1207 : List U8 = CallByName List.4 TotallyNotJson.1209 TotallyNotJson.1210;
    let TotallyNotJson.1208 : List U8 = CallByName Str.12 TotallyNotJson.262;
    let TotallyNotJson.1204 : List U8 = CallByName List.8 TotallyNotJson.1207 TotallyNotJson.1208;
    let TotallyNotJson.1206 : I64 = 34i64;
    let TotallyNotJson.1205 : U8 = CallByName Num.127 TotallyNotJson.1206;
    let TotallyNotJson.1201 : List U8 = CallByName List.4 TotallyNotJson.1204 TotallyNotJson.1205;
    let TotallyNotJson.1203 : I64 = 58i64;
    let TotallyNotJson.1202 : U8 = CallByName Num.127 TotallyNotJson.1203;
    let TotallyNotJson.1198 : List U8 = CallByName List.4 TotallyNotJson.1201 TotallyNotJson.1202;
    let TotallyNotJson.1200 : I64 = 91i64;
    let TotallyNotJson.1199 : U8 = CallByName Num.127 TotallyNotJson.1200;
    let TotallyNotJson.268 : List U8 = CallByName List.4 TotallyNotJson.1198 TotallyNotJson.1199;
    let TotallyNotJson.1197 : U64 = CallByName List.6 TotallyNotJson.263;
    let TotallyNotJson.1185 : {List U8, U64} = Struct {TotallyNotJson.268, TotallyNotJson.1197};
    let TotallyNotJson.1184 : {List U8, U64} = CallByName List.18 TotallyNotJson.263 TotallyNotJson.1185 TotallyNotJson.1175;
    let TotallyNotJson.270 : List U8 = StructAtIndex 0 TotallyNotJson.1184;
    let TotallyNotJson.1183 : I64 = 93i64;
    let TotallyNotJson.1182 : U8 = CallByName Num.127 TotallyNotJson.1183;
    let TotallyNotJson.1179 : List U8 = CallByName List.4 TotallyNotJson.270 TotallyNotJson.1182;
    let TotallyNotJson.1181 : I64 = 125i64;
    let TotallyNotJson.1180 : U8 = CallByName Num.127 TotallyNotJson.1181;
    let TotallyNotJson.1178 : List U8 = CallByName List.4 TotallyNotJson.1179 TotallyNotJson.1180;
    ret TotallyNotJson.1178;

procedure TotallyNotJson.267 (TotallyNotJson.1177, TotallyNotJson.273, TotallyNotJson.266):
    let TotallyNotJson.271 : List U8 = StructAtIndex 0 TotallyNotJson.1177;
    let TotallyNotJson.272 : U64 = StructAtIndex 1 TotallyNotJson.1177;
    let TotallyNotJson.274 : List U8 = CallByName Encode.24 TotallyNotJson.271 TotallyNotJson.273 TotallyNotJson.266;
    joinpoint TotallyNotJson.1191 TotallyNotJson.275:
        let TotallyNotJson.1189 : U64 = 1i64;
        let TotallyNotJson.1188 : U64 = CallByName Num.20 TotallyNotJson.272 TotallyNotJson.1189;
        let TotallyNotJson.1187 : {List U8, U64} = Struct {TotallyNotJson.275, TotallyNotJson.1188};
        ret TotallyNotJson.1187;
    in
    let TotallyNotJson.1195 : U64 = 1i64;
    let TotallyNotJson.1192 : Int1 = CallByName Num.24 TotallyNotJson.272 TotallyNotJson.1195;
    if TotallyNotJson.1192 then
        let TotallyNotJson.1194 : I64 = 44i64;
        let TotallyNotJson.1193 : U8 = CallByName Num.127 TotallyNotJson.1194;
        let TotallyNotJson.1190 : List U8 = CallByName List.4 TotallyNotJson.274 TotallyNotJson.1193;
        jump TotallyNotJson.1191 TotallyNotJson.1190;
    else
        jump TotallyNotJson.1191 TotallyNotJson.274;

procedure TotallyNotJson.27 (TotallyNotJson.218):
    switch TotallyNotJson.218:
        case 34:
            let TotallyNotJson.1242 : List U8 = Array [92i64, 34i64];
            ret TotallyNotJson.1242;
    
        case 92:
            let TotallyNotJson.1243 : List U8 = Array [92i64, 92i64];
            ret TotallyNotJson.1243;
    
        case 47:
            let TotallyNotJson.1244 : List U8 = Array [92i64, 47i64];
            ret TotallyNotJson.1244;
    
        case 8:
            let TotallyNotJson.1246 : U8 = 98i64;
            let TotallyNotJson.1245 : List U8 = Array [92i64, TotallyNotJson.1246];
            ret TotallyNotJson.1245;
    
        case 12:
            let TotallyNotJson.1248 : U8 = 102i64;
            let TotallyNotJson.1247 : List U8 = Array [92i64, TotallyNotJson.1248];
            ret TotallyNotJson.1247;
    
        case 10:
            let TotallyNotJson.1250 : U8 = 110i64;
            let TotallyNotJson.1249 : List U8 = Array [92i64, TotallyNotJson.1250];
            ret TotallyNotJson.1249;
    
        case 13:
            let TotallyNotJson.1252 : U8 = 114i64;
            let TotallyNotJson.1251 : List U8 = Array [92i64, TotallyNotJson.1252];
            ret TotallyNotJson.1251;
    
        case 9:
            let TotallyNotJson.1254 : U8 = 114i64;
            let TotallyNotJson.1253 : List U8 = Array [92i64, TotallyNotJson.1254];
            ret TotallyNotJson.1253;
    
        default:
            let TotallyNotJson.1255 : List U8 = Array [TotallyNotJson.218];
            ret TotallyNotJson.1255;
    

procedure TotallyNotJson.32 (TotallyNotJson.262, TotallyNotJson.263):
    let TotallyNotJson.1215 : {Str, List Str} = Struct {TotallyNotJson.262, TotallyNotJson.263};
    let TotallyNotJson.1214 : {Str, List Str} = CallByName Encode.23 TotallyNotJson.1215;
    ret TotallyNotJson.1214;

procedure TotallyNotJson.8 ():
    let TotallyNotJson.1172 : [C , C [], C , C , C , C ] = TagId(2) ;
    ret TotallyNotJson.1172;

procedure Test.0 ():
    let Test.12 : {Str, Str} = CallByName Test.3;
    let Test.13 : [C , C [], C , C , C , C ] = CallByName TotallyNotJson.8;
    let Test.11 : List U8 = CallByName Encode.26 Test.12 Test.13;
    ret Test.11;
