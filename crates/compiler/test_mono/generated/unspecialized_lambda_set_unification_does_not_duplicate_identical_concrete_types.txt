procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName Test.5 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.113 : List U8 = CallByName TotallyNotJson.228 Encode.99 Encode.101 Encode.107;
    ret Encode.113;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName TotallyNotJson.150 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {Str, Str} = CallByName Test.2 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure List.102 (List.486, List.487, List.488):
    let List.654 : U64 = 0i64;
    let List.655 : U64 = CallByName List.6 List.486;
    let List.653 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.80 List.486 List.487 List.488 List.654 List.655;
    ret List.653;

procedure List.18 (List.158, List.159, List.160):
    let List.598 : U64 = 0i64;
    let List.599 : U64 = CallByName List.6 List.158;
    let List.597 : {List U8, U64} = CallByName List.90 List.158 List.159 List.160 List.598 List.599;
    ret List.597;

procedure List.18 (List.158, List.159, List.160):
    let List.610 : U64 = 0i64;
    let List.611 : U64 = CallByName List.6 List.158;
    let List.609 : List U8 = CallByName List.90 List.158 List.159 List.160 List.610 List.611;
    ret List.609;

procedure List.26 (List.199, List.200, List.201):
    let List.647 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.102 List.199 List.200 List.201;
    let List.650 : U8 = 1i64;
    let List.651 : U8 = GetTagId List.647;
    let List.652 : Int1 = lowlevel Eq List.650 List.651;
    if List.652 then
        let List.202 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.647;
        ret List.202;
    else
        let List.203 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.647;
        ret List.203;

procedure List.4 (List.122, List.123):
    let List.596 : U64 = 1i64;
    let List.595 : List U8 = CallByName List.70 List.122 List.596;
    let List.594 : List U8 = CallByName List.71 List.595 List.123;
    ret List.594;

procedure List.49 (List.418, List.419):
    let List.638 : U64 = StructAtIndex 1 List.419;
    let List.639 : U64 = StructAtIndex 0 List.419;
    let List.637 : List U8 = CallByName List.72 List.418 List.638 List.639;
    ret List.637;

procedure List.52 (List.433, List.434):
    let List.435 : U64 = CallByName List.6 List.433;
    joinpoint List.645 List.436:
        let List.643 : U64 = 0i64;
        let List.642 : {U64, U64} = Struct {List.436, List.643};
        inc List.433;
        let List.437 : List U8 = CallByName List.49 List.433 List.642;
        let List.641 : U64 = CallByName Num.75 List.435 List.436;
        let List.636 : {U64, U64} = Struct {List.641, List.436};
        let List.438 : List U8 = CallByName List.49 List.433 List.636;
        let List.635 : {List U8, List U8} = Struct {List.437, List.438};
        ret List.635;
    in
    let List.646 : Int1 = CallByName Num.24 List.435 List.434;
    if List.646 then
        jump List.645 List.434;
    else
        jump List.645 List.435;

procedure List.6 (#Attr.2):
    let List.621 : U64 = lowlevel ListLen #Attr.2;
    ret List.621;

procedure List.6 (#Attr.2):
    let List.623 : U64 = lowlevel ListLen #Attr.2;
    ret List.623;

procedure List.66 (#Attr.2, #Attr.3):
    let List.607 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.607;

procedure List.66 (#Attr.2, #Attr.3):
    let List.619 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.619;

procedure List.68 (#Attr.2):
    let List.634 : List U8 = lowlevel ListWithCapacity #Attr.2;
    ret List.634;

procedure List.70 (#Attr.2, #Attr.3):
    let List.575 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.575;

procedure List.71 (#Attr.2, #Attr.3):
    let List.573 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.573;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.640 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.640;

procedure List.8 (#Attr.2, #Attr.3):
    let List.632 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.632;

procedure List.80 (#Derived_gen.6, #Derived_gen.7, #Derived_gen.8, #Derived_gen.9, #Derived_gen.10):
    joinpoint List.656 List.489 List.490 List.491 List.492 List.493:
        let List.658 : Int1 = CallByName Num.22 List.492 List.493;
        if List.658 then
            let List.667 : U8 = CallByName List.66 List.489 List.492;
            let List.659 : [C {U64, Int1}, C {U64, Int1}] = CallByName TotallyNotJson.157 List.490 List.667;
            let List.664 : U8 = 1i64;
            let List.665 : U8 = GetTagId List.659;
            let List.666 : Int1 = lowlevel Eq List.664 List.665;
            if List.666 then
                let List.494 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.659;
                let List.662 : U64 = 1i64;
                let List.661 : U64 = CallByName Num.51 List.492 List.662;
                jump List.656 List.489 List.494 List.491 List.661 List.493;
            else
                dec List.489;
                let List.495 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.659;
                let List.663 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) List.495;
                ret List.663;
        else
            dec List.489;
            let List.657 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) List.490;
            ret List.657;
    in
    jump List.656 #Derived_gen.6 #Derived_gen.7 #Derived_gen.8 #Derived_gen.9 #Derived_gen.10;

procedure List.90 (#Derived_gen.11, #Derived_gen.12, #Derived_gen.13, #Derived_gen.14, #Derived_gen.15):
    joinpoint List.600 List.161 List.162 List.163 List.164 List.165:
        let List.602 : Int1 = CallByName Num.22 List.164 List.165;
        if List.602 then
            let List.606 : Str = CallByName List.66 List.161 List.164;
            inc List.606;
            let List.166 : {List U8, U64} = CallByName TotallyNotJson.230 List.162 List.606;
            let List.605 : U64 = 1i64;
            let List.604 : U64 = CallByName Num.51 List.164 List.605;
            jump List.600 List.161 List.166 List.163 List.604 List.165;
        else
            dec List.161;
            ret List.162;
    in
    jump List.600 #Derived_gen.11 #Derived_gen.12 #Derived_gen.13 #Derived_gen.14 #Derived_gen.15;

procedure List.90 (#Derived_gen.19, #Derived_gen.20, #Derived_gen.21, #Derived_gen.22, #Derived_gen.23):
    joinpoint List.612 List.161 List.162 List.163 List.164 List.165:
        let List.614 : Int1 = CallByName Num.22 List.164 List.165;
        if List.614 then
            let List.618 : U8 = CallByName List.66 List.161 List.164;
            let List.166 : List U8 = CallByName TotallyNotJson.183 List.162 List.618;
            let List.617 : U64 = 1i64;
            let List.616 : U64 = CallByName Num.51 List.164 List.617;
            jump List.612 List.161 List.166 List.163 List.616 List.165;
        else
            dec List.161;
            ret List.162;
    in
    jump List.612 #Derived_gen.19 #Derived_gen.20 #Derived_gen.21 #Derived_gen.22 #Derived_gen.23;

procedure Num.127 (#Attr.2):
    let Num.298 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.298;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.302 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.302;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.299 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.299;

procedure Num.21 (#Attr.2, #Attr.3):
    let Num.304 : U64 = lowlevel NumMul #Attr.2 #Attr.3;
    ret Num.304;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.310 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.310;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.312 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.312;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.307 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.307;

procedure Num.75 (#Attr.2, #Attr.3):
    let Num.311 : U64 = lowlevel NumSubWrap #Attr.2 #Attr.3;
    ret Num.311;

procedure Num.94 (#Attr.2, #Attr.3):
    let Num.303 : U64 = lowlevel NumDivCeilUnchecked #Attr.2 #Attr.3;
    ret Num.303;

procedure Str.12 (#Attr.2):
    let Str.252 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.252;

procedure Test.2 (Test.10):
    let Test.15 : {Str, Str} = CallByName Encode.23 Test.10;
    ret Test.15;

procedure Test.3 ():
    let Test.9 : Str = "";
    inc Test.9;
    let Test.14 : {Str, Str} = Struct {Test.9, Test.9};
    ret Test.14;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.20 Test.8:
        let Test.18 : List U8 = CallByName Encode.24 Test.6 Test.8 Test.7;
        ret Test.18;
    in
    let Test.25 : Int1 = CallByName Bool.2;
    if Test.25 then
        let Test.26 : Str = "A";
        let Test.29 : Str = StructAtIndex 0 Test.4;
        let #Derived_gen.24 : Str = StructAtIndex 1 Test.4;
        dec #Derived_gen.24;
        let Test.28 : Str = CallByName TotallyNotJson.25 Test.29;
        let Test.27 : List Str = Array [Test.28];
        let Test.19 : {Str, List Str} = CallByName TotallyNotJson.31 Test.26 Test.27;
        jump Test.20 Test.19;
    else
        let Test.21 : Str = "B";
        let Test.24 : Str = StructAtIndex 1 Test.4;
        let #Derived_gen.25 : Str = StructAtIndex 0 Test.4;
        dec #Derived_gen.25;
        let Test.23 : Str = CallByName TotallyNotJson.25 Test.24;
        let Test.22 : List Str = Array [Test.23];
        let Test.19 : {Str, List Str} = CallByName TotallyNotJson.31 Test.21 Test.22;
        jump Test.20 Test.19;

procedure TotallyNotJson.150 (TotallyNotJson.151, TotallyNotJson.1017, TotallyNotJson.149):
    let TotallyNotJson.1020 : List U8 = CallByName TotallyNotJson.26 TotallyNotJson.149;
    let TotallyNotJson.1019 : List U8 = CallByName List.8 TotallyNotJson.151 TotallyNotJson.1020;
    ret TotallyNotJson.1019;

procedure TotallyNotJson.157 (TotallyNotJson.1068, TotallyNotJson.160):
    let TotallyNotJson.158 : U64 = StructAtIndex 0 TotallyNotJson.1068;
    let TotallyNotJson.159 : Int1 = StructAtIndex 1 TotallyNotJson.1068;
    switch TotallyNotJson.160:
        case 34:
            let TotallyNotJson.1071 : Int1 = false;
            let TotallyNotJson.1070 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1071};
            let TotallyNotJson.1069 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1070;
            ret TotallyNotJson.1069;
    
        case 92:
            let TotallyNotJson.1074 : Int1 = false;
            let TotallyNotJson.1073 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1074};
            let TotallyNotJson.1072 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1073;
            ret TotallyNotJson.1072;
    
        case 47:
            let TotallyNotJson.1077 : Int1 = false;
            let TotallyNotJson.1076 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1077};
            let TotallyNotJson.1075 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1076;
            ret TotallyNotJson.1075;
    
        case 8:
            let TotallyNotJson.1080 : Int1 = false;
            let TotallyNotJson.1079 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1080};
            let TotallyNotJson.1078 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1079;
            ret TotallyNotJson.1078;
    
        case 12:
            let TotallyNotJson.1083 : Int1 = false;
            let TotallyNotJson.1082 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1083};
            let TotallyNotJson.1081 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1082;
            ret TotallyNotJson.1081;
    
        case 10:
            let TotallyNotJson.1086 : Int1 = false;
            let TotallyNotJson.1085 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1086};
            let TotallyNotJson.1084 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1085;
            ret TotallyNotJson.1084;
    
        case 13:
            let TotallyNotJson.1089 : Int1 = false;
            let TotallyNotJson.1088 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1089};
            let TotallyNotJson.1087 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1088;
            ret TotallyNotJson.1087;
    
        case 9:
            let TotallyNotJson.1092 : Int1 = false;
            let TotallyNotJson.1091 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1092};
            let TotallyNotJson.1090 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1091;
            ret TotallyNotJson.1090;
    
        default:
            let TotallyNotJson.1096 : U64 = 1i64;
            let TotallyNotJson.1095 : U64 = CallByName Num.19 TotallyNotJson.158 TotallyNotJson.1096;
            let TotallyNotJson.1094 : {U64, Int1} = Struct {TotallyNotJson.1095, TotallyNotJson.159};
            let TotallyNotJson.1093 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) TotallyNotJson.1094;
            ret TotallyNotJson.1093;
    

procedure TotallyNotJson.183 (TotallyNotJson.184, TotallyNotJson.185):
    let TotallyNotJson.1039 : List U8 = CallByName TotallyNotJson.27 TotallyNotJson.185;
    let TotallyNotJson.1038 : List U8 = CallByName List.8 TotallyNotJson.184 TotallyNotJson.1039;
    ret TotallyNotJson.1038;

procedure TotallyNotJson.228 (TotallyNotJson.229, TotallyNotJson.973, #Attr.12):
    let TotallyNotJson.227 : List Str = StructAtIndex 1 #Attr.12;
    let TotallyNotJson.226 : Str = StructAtIndex 0 #Attr.12;
    let TotallyNotJson.1011 : I64 = 123i64;
    let TotallyNotJson.1010 : U8 = CallByName Num.127 TotallyNotJson.1011;
    let TotallyNotJson.1007 : List U8 = CallByName List.4 TotallyNotJson.229 TotallyNotJson.1010;
    let TotallyNotJson.1009 : I64 = 34i64;
    let TotallyNotJson.1008 : U8 = CallByName Num.127 TotallyNotJson.1009;
    let TotallyNotJson.1005 : List U8 = CallByName List.4 TotallyNotJson.1007 TotallyNotJson.1008;
    let TotallyNotJson.1006 : List U8 = CallByName Str.12 TotallyNotJson.226;
    let TotallyNotJson.1002 : List U8 = CallByName List.8 TotallyNotJson.1005 TotallyNotJson.1006;
    let TotallyNotJson.1004 : I64 = 34i64;
    let TotallyNotJson.1003 : U8 = CallByName Num.127 TotallyNotJson.1004;
    let TotallyNotJson.999 : List U8 = CallByName List.4 TotallyNotJson.1002 TotallyNotJson.1003;
    let TotallyNotJson.1001 : I64 = 58i64;
    let TotallyNotJson.1000 : U8 = CallByName Num.127 TotallyNotJson.1001;
    let TotallyNotJson.996 : List U8 = CallByName List.4 TotallyNotJson.999 TotallyNotJson.1000;
    let TotallyNotJson.998 : I64 = 91i64;
    let TotallyNotJson.997 : U8 = CallByName Num.127 TotallyNotJson.998;
    let TotallyNotJson.231 : List U8 = CallByName List.4 TotallyNotJson.996 TotallyNotJson.997;
    let TotallyNotJson.995 : U64 = CallByName List.6 TotallyNotJson.227;
    let TotallyNotJson.983 : {List U8, U64} = Struct {TotallyNotJson.231, TotallyNotJson.995};
    let TotallyNotJson.984 : {} = Struct {};
    let TotallyNotJson.982 : {List U8, U64} = CallByName List.18 TotallyNotJson.227 TotallyNotJson.983 TotallyNotJson.984;
    let TotallyNotJson.233 : List U8 = StructAtIndex 0 TotallyNotJson.982;
    let TotallyNotJson.981 : I64 = 93i64;
    let TotallyNotJson.980 : U8 = CallByName Num.127 TotallyNotJson.981;
    let TotallyNotJson.977 : List U8 = CallByName List.4 TotallyNotJson.233 TotallyNotJson.980;
    let TotallyNotJson.979 : I64 = 125i64;
    let TotallyNotJson.978 : U8 = CallByName Num.127 TotallyNotJson.979;
    let TotallyNotJson.976 : List U8 = CallByName List.4 TotallyNotJson.977 TotallyNotJson.978;
    ret TotallyNotJson.976;

procedure TotallyNotJson.230 (TotallyNotJson.975, TotallyNotJson.236):
    let TotallyNotJson.234 : List U8 = StructAtIndex 0 TotallyNotJson.975;
    let TotallyNotJson.235 : U64 = StructAtIndex 1 TotallyNotJson.975;
    let TotallyNotJson.994 : {} = Struct {};
    let TotallyNotJson.237 : List U8 = CallByName Encode.24 TotallyNotJson.234 TotallyNotJson.236 TotallyNotJson.994;
    joinpoint TotallyNotJson.989 TotallyNotJson.238:
        let TotallyNotJson.987 : U64 = 1i64;
        let TotallyNotJson.986 : U64 = CallByName Num.20 TotallyNotJson.235 TotallyNotJson.987;
        let TotallyNotJson.985 : {List U8, U64} = Struct {TotallyNotJson.238, TotallyNotJson.986};
        ret TotallyNotJson.985;
    in
    let TotallyNotJson.993 : U64 = 1i64;
    let TotallyNotJson.990 : Int1 = CallByName Num.24 TotallyNotJson.235 TotallyNotJson.993;
    if TotallyNotJson.990 then
        let TotallyNotJson.992 : I64 = 44i64;
        let TotallyNotJson.991 : U8 = CallByName Num.127 TotallyNotJson.992;
        let TotallyNotJson.988 : List U8 = CallByName List.4 TotallyNotJson.237 TotallyNotJson.991;
        jump TotallyNotJson.989 TotallyNotJson.988;
    else
        jump TotallyNotJson.989 TotallyNotJson.237;

procedure TotallyNotJson.25 (TotallyNotJson.149):
    let TotallyNotJson.1099 : Str = CallByName Encode.23 TotallyNotJson.149;
    ret TotallyNotJson.1099;

procedure TotallyNotJson.26 (TotallyNotJson.152):
    let TotallyNotJson.153 : List U8 = CallByName Str.12 TotallyNotJson.152;
    let TotallyNotJson.1097 : U64 = 0i64;
    let TotallyNotJson.1098 : Int1 = true;
    let TotallyNotJson.154 : {U64, Int1} = Struct {TotallyNotJson.1097, TotallyNotJson.1098};
    let TotallyNotJson.1067 : {} = Struct {};
    inc TotallyNotJson.153;
    let TotallyNotJson.155 : {U64, Int1} = CallByName List.26 TotallyNotJson.153 TotallyNotJson.154 TotallyNotJson.1067;
    let TotallyNotJson.1021 : Int1 = StructAtIndex 1 TotallyNotJson.155;
    let TotallyNotJson.1065 : Int1 = true;
    let TotallyNotJson.1066 : Int1 = lowlevel Eq TotallyNotJson.1065 TotallyNotJson.1021;
    if TotallyNotJson.1066 then
        let TotallyNotJson.1031 : U64 = CallByName List.6 TotallyNotJson.153;
        let TotallyNotJson.1032 : U64 = 2i64;
        let TotallyNotJson.1030 : U64 = CallByName Num.19 TotallyNotJson.1031 TotallyNotJson.1032;
        let TotallyNotJson.1027 : List U8 = CallByName List.68 TotallyNotJson.1030;
        let TotallyNotJson.1029 : U8 = 34i64;
        let TotallyNotJson.1028 : List U8 = Array [TotallyNotJson.1029];
        let TotallyNotJson.1026 : List U8 = CallByName List.8 TotallyNotJson.1027 TotallyNotJson.1028;
        let TotallyNotJson.1023 : List U8 = CallByName List.8 TotallyNotJson.1026 TotallyNotJson.153;
        let TotallyNotJson.1025 : U8 = 34i64;
        let TotallyNotJson.1024 : List U8 = Array [TotallyNotJson.1025];
        let TotallyNotJson.1022 : List U8 = CallByName List.8 TotallyNotJson.1023 TotallyNotJson.1024;
        ret TotallyNotJson.1022;
    else
        inc TotallyNotJson.153;
        let TotallyNotJson.1064 : U64 = StructAtIndex 0 TotallyNotJson.155;
        let TotallyNotJson.1063 : {List U8, List U8} = CallByName List.52 TotallyNotJson.153 TotallyNotJson.1064;
        let TotallyNotJson.179 : List U8 = StructAtIndex 0 TotallyNotJson.1063;
        let TotallyNotJson.181 : List U8 = StructAtIndex 1 TotallyNotJson.1063;
        let TotallyNotJson.1061 : U64 = CallByName List.6 TotallyNotJson.153;
        dec TotallyNotJson.153;
        let TotallyNotJson.1062 : U64 = 120i64;
        let TotallyNotJson.1059 : U64 = CallByName Num.21 TotallyNotJson.1061 TotallyNotJson.1062;
        let TotallyNotJson.1060 : U64 = 100i64;
        let TotallyNotJson.1058 : U64 = CallByName Num.94 TotallyNotJson.1059 TotallyNotJson.1060;
        let TotallyNotJson.1055 : List U8 = CallByName List.68 TotallyNotJson.1058;
        let TotallyNotJson.1057 : U8 = 34i64;
        let TotallyNotJson.1056 : List U8 = Array [TotallyNotJson.1057];
        let TotallyNotJson.1054 : List U8 = CallByName List.8 TotallyNotJson.1055 TotallyNotJson.1056;
        let TotallyNotJson.182 : List U8 = CallByName List.8 TotallyNotJson.1054 TotallyNotJson.179;
        let TotallyNotJson.1037 : {} = Struct {};
        let TotallyNotJson.1034 : List U8 = CallByName List.18 TotallyNotJson.181 TotallyNotJson.182 TotallyNotJson.1037;
        let TotallyNotJson.1036 : U8 = 34i64;
        let TotallyNotJson.1035 : List U8 = Array [TotallyNotJson.1036];
        let TotallyNotJson.1033 : List U8 = CallByName List.8 TotallyNotJson.1034 TotallyNotJson.1035;
        ret TotallyNotJson.1033;

procedure TotallyNotJson.27 (TotallyNotJson.186):
    switch TotallyNotJson.186:
        case 34:
            let TotallyNotJson.1040 : List U8 = Array [92i64, 34i64];
            ret TotallyNotJson.1040;
    
        case 92:
            let TotallyNotJson.1041 : List U8 = Array [92i64, 92i64];
            ret TotallyNotJson.1041;
    
        case 47:
            let TotallyNotJson.1042 : List U8 = Array [92i64, 47i64];
            ret TotallyNotJson.1042;
    
        case 8:
            let TotallyNotJson.1044 : U8 = 98i64;
            let TotallyNotJson.1043 : List U8 = Array [92i64, TotallyNotJson.1044];
            ret TotallyNotJson.1043;
    
        case 12:
            let TotallyNotJson.1046 : U8 = 102i64;
            let TotallyNotJson.1045 : List U8 = Array [92i64, TotallyNotJson.1046];
            ret TotallyNotJson.1045;
    
        case 10:
            let TotallyNotJson.1048 : U8 = 110i64;
            let TotallyNotJson.1047 : List U8 = Array [92i64, TotallyNotJson.1048];
            ret TotallyNotJson.1047;
    
        case 13:
            let TotallyNotJson.1050 : U8 = 114i64;
            let TotallyNotJson.1049 : List U8 = Array [92i64, TotallyNotJson.1050];
            ret TotallyNotJson.1049;
    
        case 9:
            let TotallyNotJson.1052 : U8 = 114i64;
            let TotallyNotJson.1051 : List U8 = Array [92i64, TotallyNotJson.1052];
            ret TotallyNotJson.1051;
    
        default:
            let TotallyNotJson.1053 : List U8 = Array [TotallyNotJson.186];
            ret TotallyNotJson.1053;
    

procedure TotallyNotJson.31 (TotallyNotJson.226, TotallyNotJson.227):
    let TotallyNotJson.1013 : {Str, List Str} = Struct {TotallyNotJson.226, TotallyNotJson.227};
    let TotallyNotJson.1012 : {Str, List Str} = CallByName Encode.23 TotallyNotJson.1013;
    ret TotallyNotJson.1012;

procedure TotallyNotJson.8 ():
    let TotallyNotJson.970 : {} = Struct {};
    ret TotallyNotJson.970;

procedure Test.0 ():
    let Test.12 : {Str, Str} = CallByName Test.3;
    let Test.13 : {} = CallByName TotallyNotJson.8;
    let Test.11 : List U8 = CallByName Encode.26 Test.12 Test.13;
    ret Test.11;
