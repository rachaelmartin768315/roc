procedure List.18 (List.168, List.169, List.170):
    let List.642 : U64 = 0i64;
    let List.643 : U64 = CallByName List.6 List.168;
    let List.641 : List [] = CallByName List.97 List.168 List.169 List.170 List.642 List.643;
    ret List.641;

procedure List.280 (List.281, List.282, List.278):
    let List.655 : [] = CallByName Test.2 List.282;
    let List.654 : List [] = CallByName List.71 List.281 List.655;
    ret List.654;

procedure List.5 (List.277, List.278):
    let List.279 : U64 = CallByName List.6 List.277;
    let List.639 : List [] = CallByName List.68 List.279;
    let List.638 : List [] = CallByName List.18 List.277 List.639 List.278;
    ret List.638;

procedure List.6 (#Attr.2):
    let List.652 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.652;

procedure List.66 (#Attr.2, #Attr.3):
    let List.651 : [] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.651;

procedure List.68 (#Attr.2):
    let List.657 : List [] = lowlevel ListWithCapacity #Attr.2;
    ret List.657;

procedure List.71 (#Attr.2, #Attr.3):
    let List.656 : List [] = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.656;

procedure List.97 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.644 List.171 List.172 List.173 List.174 List.175:
        let List.646 : Int1 = CallByName Num.22 List.174 List.175;
        if List.646 then
            let List.650 : [] = CallByName List.66 List.171 List.174;
            let List.176 : List [] = CallByName List.280 List.172 List.650 List.173;
            let List.649 : U64 = 1i64;
            let List.648 : U64 = CallByName Num.51 List.174 List.649;
            jump List.644 List.171 List.176 List.173 List.648 List.175;
        else
            dec List.171;
            ret List.172;
    in
    inc #Derived_gen.0;
    jump List.644 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.2 (Test.3):
    let Test.7 : {} = Struct {};
    let Test.8 : Str = "a Lambda Set is empty. Most likely there is a type error in your program.";
    Crash Test.8

procedure Test.0 ():
    let Test.1 : List [] = Array [];
    let Test.5 : {} = Struct {};
    let Test.4 : List [] = CallByName List.5 Test.1 Test.5;
    dec Test.1;
    ret Test.4;
