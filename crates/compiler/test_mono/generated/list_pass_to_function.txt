procedure List.3 (List.83, List.84, List.85):
    let List.262 : {List I64, I64} = CallByName List.57 List.83 List.84 List.85;
    let List.261 : List I64 = StructAtIndex 0 List.262;
    inc List.261;
    dec List.262;
    ret List.261;

procedure List.57 (List.80, List.81, List.82):
    let List.268 : U64 = CallByName List.6 List.80;
    let List.265 : Int1 = CallByName Num.22 List.81 List.268;
    if List.265 then
        let List.266 : {List I64, I64} = CallByName List.61 List.80 List.81 List.82;
        ret List.266;
    else
        let List.264 : {List I64, I64} = Struct {List.80, List.82};
        ret List.264;

procedure List.6 (#Attr.2):
    let List.269 : U64 = lowlevel ListLen #Attr.2;
    ret List.269;

procedure List.61 (#Attr.2, #Attr.3, #Attr.4):
    let List.267 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.267;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.273 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.273;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
