procedure List.3 (List.84, List.85, List.86):
    let List.285 : {List I64, I64} = CallByName List.57 List.84 List.85 List.86;
    let List.284 : List I64 = StructAtIndex 0 List.285;
    inc List.284;
    dec List.285;
    ret List.284;

procedure List.57 (List.81, List.82, List.83):
    let List.291 : U64 = CallByName List.6 List.81;
    let List.288 : Int1 = CallByName Num.22 List.82 List.291;
    if List.288 then
        let List.289 : {List I64, I64} = CallByName List.61 List.81 List.82 List.83;
        ret List.289;
    else
        let List.287 : {List I64, I64} = Struct {List.81, List.83};
        ret List.287;

procedure List.6 (#Attr.2):
    let List.292 : U64 = lowlevel ListLen #Attr.2;
    ret List.292;

procedure List.61 (#Attr.2, #Attr.3, #Attr.4):
    let List.290 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.290;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.273 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.273;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
