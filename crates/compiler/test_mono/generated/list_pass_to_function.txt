procedure List.3 (List.128, List.129, List.130):
    let List.667 : {List I64, I64} = CallByName List.64 List.128 List.129 List.130;
    let List.666 : List I64 = StructAtIndex 0 List.667;
    ret List.666;

procedure List.6 (#Attr.2):
    let List.673 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.673;

procedure List.64 (List.125, List.126, List.127):
    let List.672 : U64 = CallByName List.6 List.125;
    let List.669 : Int1 = CallByName Num.22 List.126 List.672;
    if List.669 then
        let List.670 : {List I64, I64} = CallByName List.67 List.125 List.126 List.127;
        ret List.670;
    else
        let List.668 : {List I64, I64} = Struct {List.125, List.127};
        ret List.668;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.671 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.671;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.281 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
