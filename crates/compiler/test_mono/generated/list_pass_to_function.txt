procedure List.3 (List.116, List.117, List.118):
    let List.575 : {List I64, I64} = CallByName List.64 List.116 List.117 List.118;
    let List.574 : List I64 = StructAtIndex 0 List.575;
    ret List.574;

procedure List.6 (#Attr.2):
    let List.581 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.581;

procedure List.64 (List.113, List.114, List.115):
    let List.580 : U64 = CallByName List.6 List.113;
    let List.577 : Int1 = CallByName Num.22 List.114 List.580;
    if List.577 then
        let List.578 : {List I64, I64} = CallByName List.67 List.113 List.114 List.115;
        ret List.578;
    else
        let List.576 : {List I64, I64} = Struct {List.113, List.115};
        ret List.576;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.579 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.579;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.279 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.279;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
