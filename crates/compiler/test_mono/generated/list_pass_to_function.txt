procedure List.3 (List.85, List.86, List.87):
    let List.293 : {List I64, I64} = CallByName List.57 List.85 List.86 List.87;
    let List.292 : List I64 = StructAtIndex 0 List.293;
    inc List.292;
    dec List.293;
    ret List.292;

procedure List.57 (List.82, List.83, List.84):
    let List.299 : U64 = CallByName List.6 List.82;
    let List.296 : Int1 = CallByName Num.22 List.83 List.299;
    if List.296 then
        let List.297 : {List I64, I64} = CallByName List.61 List.82 List.83 List.84;
        ret List.297;
    else
        let List.295 : {List I64, I64} = Struct {List.82, List.84};
        ret List.295;

procedure List.6 (#Attr.2):
    let List.300 : U64 = lowlevel ListLen #Attr.2;
    ret List.300;

procedure List.61 (#Attr.2, #Attr.3, #Attr.4):
    let List.298 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.298;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.257 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.257;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
