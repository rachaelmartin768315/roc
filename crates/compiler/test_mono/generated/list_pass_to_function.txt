procedure List.3 (List.110, List.111, List.112):
    let List.546 : {List I64, I64} = CallByName List.64 List.110 List.111 List.112;
    let List.545 : List I64 = StructAtIndex 0 List.546;
    ret List.545;

procedure List.6 (#Attr.2):
    let List.552 : U64 = lowlevel ListLen #Attr.2;
    ret List.552;

procedure List.64 (List.107, List.108, List.109):
    let List.551 : U64 = CallByName List.6 List.107;
    let List.548 : Int1 = CallByName Num.22 List.108 List.551;
    if List.548 then
        let List.549 : {List I64, I64} = CallByName List.67 List.107 List.108 List.109;
        ret List.549;
    else
        let List.547 : {List I64, I64} = Struct {List.107, List.109};
        ret List.547;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.550 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.550;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.291 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.291;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
