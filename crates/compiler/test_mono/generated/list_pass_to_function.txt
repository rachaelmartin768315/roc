procedure List.3 (List.126, List.127, List.128):
    let List.654 : {List I64, I64} = CallByName List.64 List.126 List.127 List.128;
    let List.653 : List I64 = StructAtIndex 0 List.654;
    ret List.653;

procedure List.6 (#Attr.2):
    let List.660 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.660;

procedure List.64 (List.123, List.124, List.125):
    let List.659 : U64 = CallByName List.6 List.123;
    let List.656 : Int1 = CallByName Num.22 List.124 List.659;
    if List.656 then
        let List.657 : {List I64, I64} = CallByName List.67 List.123 List.124 List.125;
        ret List.657;
    else
        let List.655 : {List I64, I64} = Struct {List.123, List.125};
        ret List.655;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.658 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.658;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.281 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
