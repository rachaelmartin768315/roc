procedure List.3 (List.108, List.109, List.110):
    let List.535 : {List I64, I64} = CallByName List.64 List.108 List.109 List.110;
    let List.534 : List I64 = StructAtIndex 0 List.535;
    ret List.534;

procedure List.6 (#Attr.2):
    let List.541 : U64 = lowlevel ListLen #Attr.2;
    ret List.541;

procedure List.64 (List.105, List.106, List.107):
    let List.540 : U64 = CallByName List.6 List.105;
    let List.537 : Int1 = CallByName Num.22 List.106 List.540;
    if List.537 then
        let List.538 : {List I64, I64} = CallByName List.67 List.105 List.106 List.107;
        ret List.538;
    else
        let List.536 : {List I64, I64} = Struct {List.105, List.107};
        ret List.536;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.539 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.539;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.292 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.292;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
