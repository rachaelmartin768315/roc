procedure List.3 (List.123, List.124, List.125):
    let List.627 : {List I64, I64} = CallByName List.64 List.123 List.124 List.125;
    let List.626 : List I64 = StructAtIndex 0 List.627;
    ret List.626;

procedure List.6 (#Attr.2):
    let List.633 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.633;

procedure List.64 (List.120, List.121, List.122):
    let List.632 : U64 = CallByName List.6 List.120;
    let List.629 : Int1 = CallByName Num.22 List.121 List.632;
    if List.629 then
        let List.630 : {List I64, I64} = CallByName List.67 List.120 List.121 List.122;
        ret List.630;
    else
        let List.628 : {List I64, I64} = Struct {List.120, List.122};
        ret List.628;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.631 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.631;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.281 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
