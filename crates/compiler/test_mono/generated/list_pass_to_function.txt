procedure List.3 (List.111, List.112, List.113):
    let List.554 : {List I64, I64} = CallByName List.64 List.111 List.112 List.113;
    let List.553 : List I64 = StructAtIndex 0 List.554;
    ret List.553;

procedure List.6 (#Attr.2):
    let List.560 : U64 = lowlevel ListLen #Attr.2;
    ret List.560;

procedure List.64 (List.108, List.109, List.110):
    let List.559 : U64 = CallByName List.6 List.108;
    let List.556 : Int1 = CallByName Num.22 List.109 List.559;
    if List.556 then
        let List.557 : {List I64, I64} = CallByName List.67 List.108 List.109 List.110;
        ret List.557;
    else
        let List.555 : {List I64, I64} = Struct {List.108, List.110};
        ret List.555;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.558 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.558;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.291 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.291;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
