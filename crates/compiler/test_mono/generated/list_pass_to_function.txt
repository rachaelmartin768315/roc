procedure List.3 (List.82, List.83, List.84):
    let List.267 : {List I64, I64} = CallByName List.57 List.82 List.83 List.84;
    let List.266 : List I64 = StructAtIndex 0 List.267;
    inc List.266;
    dec List.267;
    ret List.266;

procedure List.57 (List.79, List.80, List.81):
    let List.273 : U64 = CallByName List.6 List.79;
    let List.270 : Int1 = CallByName Num.22 List.80 List.273;
    if List.270 then
        let List.271 : {List I64, I64} = CallByName List.61 List.79 List.80 List.81;
        ret List.271;
    else
        let List.269 : {List I64, I64} = Struct {List.79, List.81};
        ret List.269;

procedure List.6 (#Attr.2):
    let List.274 : U64 = lowlevel ListLen #Attr.2;
    ret List.274;

procedure List.61 (#Attr.2, #Attr.3, #Attr.4):
    let List.272 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.272;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.188 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.188;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
