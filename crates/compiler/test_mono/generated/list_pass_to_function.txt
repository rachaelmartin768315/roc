procedure List.3 (List.65, List.66, List.67):
    let List.153 : {List I64, I64} = CallByName List.57 List.65 List.66 List.67;
    let List.152 : List I64 = StructAtIndex 0 List.153;
    inc List.152;
    dec List.153;
    ret List.152;

procedure List.57 (#Attr.2, #Attr.3, #Attr.4):
    let List.158 : U64 = lowlevel ListLen #Attr.2;
    let List.156 : Int1 = lowlevel NumLt #Attr.3 List.158;
    if List.156 then
        let List.157 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
        ret List.157;
    else
        let List.155 : {List I64, I64} = Struct {#Attr.2, #Attr.4};
        ret List.155;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
