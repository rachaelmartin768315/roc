procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : List I64 = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.2):
    let #Derived_gen.7 : I64 = CallByName Inspect.57 #Derived.2;
    ret #Derived_gen.7;

procedure #Derived.4 (#Derived.5, #Derived.1):
    let #Derived_gen.5 : {} = Struct {};
    let #Derived_gen.6 : {} = Struct {};
    let #Derived_gen.4 : {List I64, {}, {}} = CallByName Inspect.40 #Derived.1 #Derived_gen.5 #Derived_gen.6;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.5;
    ret #Derived_gen.3;

procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Inspect.156 (Inspect.157, #Attr.12):
    let Inspect.155 : {} = StructAtIndex 2 #Attr.12;
    let Inspect.154 : {} = StructAtIndex 1 #Attr.12;
    let Inspect.153 : List I64 = StructAtIndex 0 #Attr.12;
    let Inspect.332 : Str = "[";
    let Inspect.158 : Str = CallByName Inspect.63 Inspect.157 Inspect.332;
    dec Inspect.332;
    let Inspect.331 : Int1 = CallByName Bool.1;
    let Inspect.317 : {Str, Int1} = Struct {Inspect.158, Inspect.331};
    let Inspect.316 : {Str, Int1} = CallByName List.18 Inspect.153 Inspect.317 Inspect.155;
    dec Inspect.153;
    let Inspect.159 : Str = StructAtIndex 0 Inspect.316;
    let Inspect.313 : Str = "]";
    let Inspect.312 : Str = CallByName Inspect.63 Inspect.159 Inspect.313;
    dec Inspect.313;
    ret Inspect.312;

procedure Inspect.160 (Inspect.319, Inspect.163, Inspect.155):
    let Inspect.161 : Str = StructAtIndex 0 Inspect.319;
    let Inspect.162 : Int1 = StructAtIndex 1 Inspect.319;
    joinpoint Inspect.329 Inspect.164:
        let Inspect.326 : I64 = CallByName #Derived.3 Inspect.163;
        let Inspect.322 : Str = CallByName Inspect.31 Inspect.326 Inspect.164;
        let Inspect.323 : {} = Struct {};
        let Inspect.321 : {Str, Int1} = CallByName Inspect.165 Inspect.322;
        dec Inspect.322;
        ret Inspect.321;
    in
    if Inspect.162 then
        let Inspect.330 : Str = ", ";
        let Inspect.328 : Str = CallByName Inspect.63 Inspect.161 Inspect.330;
        dec Inspect.330;
        jump Inspect.329 Inspect.328;
    else
        jump Inspect.329 Inspect.161;

procedure Inspect.165 (Inspect.166):
    let Inspect.325 : Int1 = CallByName Bool.2;
    inc Inspect.166;
    let Inspect.324 : {Str, Int1} = Struct {Inspect.166, Inspect.325};
    ret Inspect.324;

procedure Inspect.272 (Inspect.273, Inspect.271):
    let Inspect.338 : Str = CallByName Num.96 Inspect.271;
    let Inspect.337 : Str = CallByName Inspect.63 Inspect.273 Inspect.338;
    dec Inspect.338;
    ret Inspect.337;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.297, Inspect.149):
    let Inspect.308 : Str = CallByName Inspect.156 Inspect.149 Inspect.297;
    ret Inspect.308;

procedure Inspect.31 (Inspect.297, Inspect.149):
    let Inspect.327 : Str = CallByName Inspect.272 Inspect.149 Inspect.297;
    ret Inspect.327;

procedure Inspect.33 (Inspect.152):
    let Inspect.299 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.298 : Str = CallByName Inspect.64 Inspect.299;
    ret Inspect.298;

procedure Inspect.39 (Inspect.295):
    let Inspect.305 : Str = "";
    ret Inspect.305;

procedure Inspect.40 (Inspect.153, Inspect.154, Inspect.155):
    inc Inspect.153;
    let Inspect.310 : {List I64, {}, {}} = Struct {Inspect.153, Inspect.154, Inspect.155};
    let Inspect.309 : {List I64, {}, {}} = CallByName Inspect.30 Inspect.310;
    ret Inspect.309;

procedure Inspect.5 (Inspect.150):
    let Inspect.306 : List I64 = CallByName #Derived.0 Inspect.150;
    let Inspect.303 : {} = Struct {};
    let Inspect.302 : Str = CallByName Inspect.39 Inspect.303;
    let Inspect.301 : Str = CallByName #Derived.4 Inspect.302 Inspect.306;
    dec Inspect.306;
    ret Inspect.301;

procedure Inspect.57 (Inspect.271):
    let Inspect.333 : I64 = CallByName Inspect.30 Inspect.271;
    ret Inspect.333;

procedure Inspect.63 (Inspect.294, Inspect.290):
    let Inspect.315 : Str = CallByName Str.3 Inspect.294 Inspect.290;
    ret Inspect.315;

procedure Inspect.64 (Inspect.296):
    ret Inspect.296;

procedure List.100 (#Derived_gen.8, #Derived_gen.9, #Derived_gen.10, #Derived_gen.11, #Derived_gen.12):
    joinpoint List.668 List.174 List.175 List.176 List.177 List.178:
        let List.670 : Int1 = CallByName Num.22 List.177 List.178;
        if List.670 then
            let List.674 : I64 = CallByName List.66 List.174 List.177;
            let List.179 : {Str, Int1} = CallByName Inspect.160 List.175 List.674 List.176;
            let List.673 : U64 = 1i64;
            let List.672 : U64 = CallByName Num.51 List.177 List.673;
            jump List.668 List.174 List.179 List.176 List.672 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.8;
    jump List.668 #Derived_gen.8 #Derived_gen.9 #Derived_gen.10 #Derived_gen.11 #Derived_gen.12;

procedure List.18 (List.171, List.172, List.173):
    let List.666 : U64 = 0i64;
    let List.667 : U64 = CallByName List.6 List.171;
    let List.665 : {Str, Int1} = CallByName List.100 List.171 List.172 List.173 List.666 List.667;
    ret List.665;

procedure List.6 (#Attr.2):
    let List.676 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.676;

procedure List.66 (#Attr.2, #Attr.3):
    let List.675 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.675;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.285 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.284 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.96 (#Attr.2):
    let Num.283 : Str = lowlevel NumToStr #Attr.2;
    ret Num.283;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.246 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.246;

procedure Test.0 ():
    let Test.2 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.1 : Str = CallByName Inspect.33 Test.2;
    ret Test.1;
