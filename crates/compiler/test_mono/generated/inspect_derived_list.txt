procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : List I64 = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.2):
    let #Derived_gen.7 : I64 = CallByName Inspect.54 #Derived.2;
    ret #Derived_gen.7;

procedure #Derived.4 (#Derived.5, #Derived.1):
    let #Derived_gen.5 : {} = Struct {};
    let #Derived_gen.6 : {} = Struct {};
    let #Derived_gen.4 : {List I64, {}, {}} = CallByName Inspect.37 #Derived.1 #Derived_gen.5 #Derived_gen.6;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.5;
    ret #Derived_gen.3;

procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Inspect.155 (Inspect.156, #Attr.12):
    let Inspect.154 : {} = StructAtIndex 2 #Attr.12;
    let Inspect.153 : {} = StructAtIndex 1 #Attr.12;
    let Inspect.152 : List I64 = StructAtIndex 0 #Attr.12;
    let Inspect.347 : Str = "[";
    let Inspect.328 : Str = CallByName Inspect.61 Inspect.156 Inspect.347;
    let Inspect.329 : {List I64, {}, {}} = Struct {Inspect.152, Inspect.153, Inspect.154};
    let Inspect.324 : {Str, Int1} = CallByName Inspect.157 Inspect.328 Inspect.329;
    let Inspect.325 : {} = Struct {};
    let Inspect.320 : Str = CallByName Inspect.166 Inspect.324;
    let Inspect.321 : Str = "]";
    let Inspect.319 : Str = CallByName Inspect.61 Inspect.320 Inspect.321;
    ret Inspect.319;

procedure Inspect.157 (Inspect.158, #Attr.12):
    let Inspect.154 : {} = StructAtIndex 2 #Attr.12;
    let Inspect.153 : {} = StructAtIndex 1 #Attr.12;
    let Inspect.152 : List I64 = StructAtIndex 0 #Attr.12;
    let Inspect.346 : Int1 = CallByName Bool.1;
    let Inspect.332 : {Str, Int1} = Struct {Inspect.158, Inspect.346};
    let Inspect.331 : {Str, Int1} = CallByName List.18 Inspect.152 Inspect.332 Inspect.154;
    ret Inspect.331;

procedure Inspect.159 (Inspect.334, Inspect.162, Inspect.154):
    let Inspect.160 : Str = StructAtIndex 0 Inspect.334;
    let Inspect.161 : Int1 = StructAtIndex 1 Inspect.334;
    joinpoint Inspect.344 Inspect.163:
        let Inspect.341 : I64 = CallByName #Derived.3 Inspect.162;
        let Inspect.337 : Str = CallByName Inspect.31 Inspect.341 Inspect.163;
        let Inspect.338 : {} = Struct {};
        let Inspect.336 : {Str, Int1} = CallByName Inspect.164 Inspect.337;
        ret Inspect.336;
    in
    if Inspect.161 then
        let Inspect.345 : Str = ", ";
        let Inspect.343 : Str = CallByName Inspect.61 Inspect.160 Inspect.345;
        jump Inspect.344 Inspect.343;
    else
        jump Inspect.344 Inspect.160;

procedure Inspect.164 (Inspect.165):
    let Inspect.340 : Int1 = CallByName Bool.2;
    let Inspect.339 : {Str, Int1} = Struct {Inspect.165, Inspect.340};
    ret Inspect.339;

procedure Inspect.166 (Inspect.326):
    let Inspect.327 : Str = StructAtIndex 0 Inspect.326;
    ret Inspect.327;

procedure Inspect.277 (Inspect.278, Inspect.276):
    let Inspect.353 : Str = CallByName Num.96 Inspect.276;
    let Inspect.352 : Str = CallByName Inspect.61 Inspect.278 Inspect.353;
    ret Inspect.352;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.305, Inspect.149):
    let Inspect.314 : Str = CallByName Inspect.155 Inspect.149 Inspect.305;
    ret Inspect.314;

procedure Inspect.31 (Inspect.305, Inspect.149):
    let Inspect.342 : Str = CallByName Inspect.277 Inspect.149 Inspect.305;
    ret Inspect.342;

procedure Inspect.35 (Inspect.300):
    ret Inspect.300;

procedure Inspect.36 (Inspect.304):
    let Inspect.311 : Str = "";
    ret Inspect.311;

procedure Inspect.37 (Inspect.152, Inspect.153, Inspect.154):
    let Inspect.316 : {List I64, {}, {}} = Struct {Inspect.152, Inspect.153, Inspect.154};
    let Inspect.315 : {List I64, {}, {}} = CallByName Inspect.30 Inspect.316;
    ret Inspect.315;

procedure Inspect.5 (Inspect.150):
    let Inspect.312 : List I64 = CallByName #Derived.0 Inspect.150;
    let Inspect.309 : {} = Struct {};
    let Inspect.308 : Str = CallByName Inspect.36 Inspect.309;
    let Inspect.307 : Str = CallByName #Derived.4 Inspect.308 Inspect.312;
    ret Inspect.307;

procedure Inspect.54 (Inspect.276):
    let Inspect.348 : I64 = CallByName Inspect.30 Inspect.276;
    ret Inspect.348;

procedure Inspect.61 (Inspect.303, Inspect.298):
    let Inspect.323 : Str = CallByName Str.3 Inspect.303 Inspect.298;
    dec Inspect.298;
    ret Inspect.323;

procedure List.18 (List.154, List.155, List.156):
    let List.554 : U64 = 0i64;
    let List.555 : U64 = CallByName List.6 List.154;
    let List.553 : {Str, Int1} = CallByName List.88 List.154 List.155 List.156 List.554 List.555;
    ret List.553;

procedure List.6 (#Attr.2):
    let List.564 : U64 = lowlevel ListLen #Attr.2;
    ret List.564;

procedure List.66 (#Attr.2, #Attr.3):
    let List.563 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.563;

procedure List.88 (#Derived_gen.17, #Derived_gen.18, #Derived_gen.19, #Derived_gen.20, #Derived_gen.21):
    joinpoint List.556 List.157 List.158 List.159 List.160 List.161:
        let List.558 : Int1 = CallByName Num.22 List.160 List.161;
        if List.558 then
            let List.562 : I64 = CallByName List.66 List.157 List.160;
            let List.162 : {Str, Int1} = CallByName Inspect.159 List.158 List.562 List.159;
            let List.561 : U64 = 1i64;
            let List.560 : U64 = CallByName Num.51 List.160 List.561;
            jump List.556 List.157 List.162 List.159 List.560 List.161;
        else
            dec List.157;
            ret List.158;
    in
    jump List.556 #Derived_gen.17 #Derived_gen.18 #Derived_gen.19 #Derived_gen.20 #Derived_gen.21;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.293 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.293;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.292 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.292;

procedure Num.96 (#Attr.2):
    let Num.291 : Str = lowlevel NumToStr #Attr.2;
    ret Num.291;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.292 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.292;

procedure Test.0 ():
    let Test.3 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.2 : Str = CallByName Inspect.5 Test.3;
    let Test.1 : Str = CallByName Inspect.35 Test.2;
    ret Test.1;
