procedure Num.96 (#Attr.2):
    let Num.290 : Str = lowlevel NumToStr #Attr.2;
    ret Num.290;

procedure Num.96 (#Attr.2):
    let Num.291 : Str = lowlevel NumToStr #Attr.2;
    ret Num.291;

procedure Test.1 (Test.4):
    let Test.13 : [C U8, C U64] = TagId(1) Test.4;
    ret Test.13;

procedure Test.1 (Test.4):
    let Test.19 : [C U8, C U64] = TagId(0) Test.4;
    ret Test.19;

procedure Test.5 (Test.14, #Attr.12):
    let Test.4 : U64 = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Test.16 : Str = CallByName Num.96 Test.4;
    ret Test.16;

procedure Test.5 (Test.14, #Attr.12):
    let Test.4 : U8 = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Test.22 : Str = CallByName Num.96 Test.4;
    ret Test.22;

procedure Test.0 ():
    let Test.2 : Int1 = true;
    joinpoint Test.10 Test.3:
        let Test.8 : {} = Struct {};
        let Test.9 : U8 = GetTagId Test.3;
        switch Test.9:
            case 0:
                let Test.7 : Str = CallByName Test.5 Test.8 Test.3;
                ret Test.7;
        
            default:
                let Test.7 : Str = CallByName Test.5 Test.8 Test.3;
                ret Test.7;
        
    in
    let Test.23 : Int1 = true;
    let Test.24 : Int1 = lowlevel Eq Test.23 Test.2;
    if Test.24 then
        let Test.12 : U64 = 123i64;
        let Test.11 : [C U8, C U64] = CallByName Test.1 Test.12;
        jump Test.10 Test.11;
    else
        let Test.18 : U8 = 18i64;
        let Test.17 : [C U8, C U64] = CallByName Test.1 Test.18;
        jump Test.10 Test.17;
