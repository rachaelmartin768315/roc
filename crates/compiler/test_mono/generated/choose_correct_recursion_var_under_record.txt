procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure List.100 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.687 List.174 List.175 List.176 List.177 List.178:
        let List.689 : Int1 = CallByName Num.22 List.177 List.178;
        if List.689 then
            let List.693 : [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = CallByName List.66 List.174 List.177;
            inc List.693;
            let List.179 : List Str = CallByName List.283 List.175 List.693 List.176;
            let List.692 : U64 = 1i64;
            let List.691 : U64 = CallByName Num.51 List.177 List.692;
            jump List.687 List.174 List.179 List.176 List.691 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.0;
    jump List.687 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure List.18 (List.171, List.172, List.173):
    let List.685 : U64 = 0i64;
    let List.686 : U64 = CallByName List.6 List.171;
    let List.684 : List Str = CallByName List.100 List.171 List.172 List.173 List.685 List.686;
    ret List.684;

procedure List.2 (List.119, List.120):
    let List.679 : U64 = CallByName List.6 List.119;
    let List.675 : Int1 = CallByName Num.22 List.120 List.679;
    if List.675 then
        let List.677 : Str = CallByName List.66 List.119 List.120;
        inc List.677;
        let List.676 : [C {}, C Str] = TagId(1) List.677;
        ret List.676;
    else
        let List.674 : {} = Struct {};
        let List.673 : [C {}, C Str] = TagId(0) List.674;
        ret List.673;

procedure List.283 (List.284, List.285, List.281):
    let List.698 : Str = CallByName Test.10 List.285;
    let List.697 : List Str = CallByName List.71 List.284 List.698;
    ret List.697;

procedure List.5 (List.280, List.281):
    let List.282 : U64 = CallByName List.6 List.280;
    let List.682 : List Str = CallByName List.68 List.282;
    let List.681 : List Str = CallByName List.18 List.280 List.682 List.281;
    ret List.681;

procedure List.6 (#Attr.2):
    let List.680 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.680;

procedure List.6 (#Attr.2):
    let List.695 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.695;

procedure List.66 (#Attr.2, #Attr.3):
    let List.678 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.678;

procedure List.66 (#Attr.2, #Attr.3):
    let List.694 : [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.694;

procedure List.68 (#Attr.2):
    let List.700 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.700;

procedure List.71 (#Attr.2, #Attr.3):
    let List.699 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.699;

procedure List.9 (List.391):
    let List.672 : U64 = 0i64;
    let List.665 : [C {}, C Str] = CallByName List.2 List.391 List.672;
    let List.669 : U8 = 1i64;
    let List.670 : U8 = GetTagId List.665;
    let List.671 : Int1 = lowlevel Eq List.669 List.670;
    if List.671 then
        let List.392 : Str = UnionAtIndex (Id 1) (Index 0) List.665;
        let List.666 : [C {}, C Str] = TagId(1) List.392;
        ret List.666;
    else
        dec List.665;
        let List.668 : {} = Struct {};
        let List.667 : [C {}, C Str] = TagId(0) List.668;
        ret List.667;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.285;

procedure Result.5 (Result.14, Result.15):
    let Result.63 : U8 = 1i64;
    let Result.64 : U8 = GetTagId Result.14;
    let Result.65 : Int1 = lowlevel Eq Result.63 Result.64;
    if Result.65 then
        dec Result.15;
        let Result.16 : Str = UnionAtIndex (Id 1) (Index 0) Result.14;
        ret Result.16;
    else
        dec Result.14;
        ret Result.15;

procedure Test.10 (Test.11):
    let Test.12 : Str = CallByName Test.2 Test.11;
    let Test.26 : Int1 = CallByName Bool.1;
    if Test.26 then
        ret Test.12;
    else
        dec Test.12;
        let Test.25 : Str = "foo";
        ret Test.25;

procedure Test.2 (Test.6):
    let Test.29 : U8 = 1i64;
    let Test.30 : U8 = GetTagId Test.6;
    let Test.31 : Int1 = lowlevel Eq Test.29 Test.30;
    if Test.31 then
        let Test.7 : [<r>C List *self, C *self] = UnionAtIndex (Id 1) (Index 0) Test.6;
        joinpoint #Derived_gen.9:
            let Test.8 : Str = CallByName Test.2 Test.7;
            let Test.18 : Int1 = CallByName Bool.1;
            if Test.18 then
                ret Test.8;
            else
                dec Test.8;
                let Test.17 : Str = "foo";
                ret Test.17;
        in
        let #Derived_gen.10 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.10 then
            free Test.6;
            jump #Derived_gen.9;
        else
            inc Test.7;
            decref Test.6;
            jump #Derived_gen.9;
    else
        let Test.9 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = UnionAtIndex (Id 0) (Index 0) Test.6;
        joinpoint #Derived_gen.11:
            let Test.24 : {} = Struct {};
            let Test.23 : List Str = CallByName List.5 Test.9 Test.24;
            dec Test.9;
            let Test.21 : [C {}, C Str] = CallByName List.9 Test.23;
            dec Test.23;
            let Test.22 : Str = "foo";
            let Test.20 : Str = CallByName Result.5 Test.21 Test.22;
            ret Test.20;
        in
        let #Derived_gen.12 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.12 then
            free Test.6;
            jump #Derived_gen.11;
        else
            inc Test.9;
            decref Test.6;
            jump #Derived_gen.11;

procedure Test.0 ():
    let Test.32 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = Array [];
    let Test.15 : [<r>C List *self, C *self] = TagId(0) Test.32;
    let Test.14 : Str = CallByName Test.2 Test.15;
    ret Test.14;
