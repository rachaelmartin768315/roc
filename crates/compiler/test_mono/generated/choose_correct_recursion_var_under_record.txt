procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure List.18 (List.168, List.169, List.170):
    let List.658 : U64 = 0i64;
    let List.659 : U64 = CallByName List.6 List.168;
    let List.657 : List Str = CallByName List.97 List.168 List.169 List.170 List.658 List.659;
    ret List.657;

procedure List.2 (List.116, List.117):
    let List.652 : U64 = CallByName List.6 List.116;
    let List.648 : Int1 = CallByName Num.22 List.117 List.652;
    if List.648 then
        let List.650 : Str = CallByName List.66 List.116 List.117;
        inc List.650;
        let List.649 : [C {}, C Str] = TagId(1) List.650;
        ret List.649;
    else
        let List.647 : {} = Struct {};
        let List.646 : [C {}, C Str] = TagId(0) List.647;
        ret List.646;

procedure List.280 (List.281, List.282, List.278):
    let List.671 : Str = CallByName Test.10 List.282;
    let List.670 : List Str = CallByName List.71 List.281 List.671;
    ret List.670;

procedure List.5 (List.277, List.278):
    let List.279 : U64 = CallByName List.6 List.277;
    let List.655 : List Str = CallByName List.68 List.279;
    let List.654 : List Str = CallByName List.18 List.277 List.655 List.278;
    ret List.654;

procedure List.6 (#Attr.2):
    let List.653 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.653;

procedure List.6 (#Attr.2):
    let List.668 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.668;

procedure List.66 (#Attr.2, #Attr.3):
    let List.651 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.651;

procedure List.66 (#Attr.2, #Attr.3):
    let List.667 : [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.667;

procedure List.68 (#Attr.2):
    let List.673 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.673;

procedure List.71 (#Attr.2, #Attr.3):
    let List.672 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.672;

procedure List.9 (List.388):
    let List.645 : U64 = 0i64;
    let List.638 : [C {}, C Str] = CallByName List.2 List.388 List.645;
    let List.642 : U8 = 1i64;
    let List.643 : U8 = GetTagId List.638;
    let List.644 : Int1 = lowlevel Eq List.642 List.643;
    if List.644 then
        let List.389 : Str = UnionAtIndex (Id 1) (Index 0) List.638;
        let List.639 : [C {}, C Str] = TagId(1) List.389;
        ret List.639;
    else
        dec List.638;
        let List.641 : {} = Struct {};
        let List.640 : [C {}, C Str] = TagId(0) List.641;
        ret List.640;

procedure List.97 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.660 List.171 List.172 List.173 List.174 List.175:
        let List.662 : Int1 = CallByName Num.22 List.174 List.175;
        if List.662 then
            let List.666 : [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = CallByName List.66 List.171 List.174;
            inc List.666;
            let List.176 : List Str = CallByName List.280 List.172 List.666 List.173;
            let List.665 : U64 = 1i64;
            let List.664 : U64 = CallByName Num.51 List.174 List.665;
            jump List.660 List.171 List.176 List.173 List.664 List.175;
        else
            dec List.171;
            ret List.172;
    in
    inc #Derived_gen.0;
    jump List.660 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Result.5 (Result.14, Result.15):
    let Result.63 : U8 = 1i64;
    let Result.64 : U8 = GetTagId Result.14;
    let Result.65 : Int1 = lowlevel Eq Result.63 Result.64;
    if Result.65 then
        dec Result.15;
        let Result.16 : Str = UnionAtIndex (Id 1) (Index 0) Result.14;
        ret Result.16;
    else
        dec Result.14;
        ret Result.15;

procedure Test.10 (Test.11):
    let Test.12 : Str = CallByName Test.2 Test.11;
    let Test.26 : Int1 = CallByName Bool.1;
    if Test.26 then
        ret Test.12;
    else
        dec Test.12;
        let Test.25 : Str = "foo";
        ret Test.25;

procedure Test.2 (Test.6):
    let Test.29 : U8 = 1i64;
    let Test.30 : U8 = GetTagId Test.6;
    let Test.31 : Int1 = lowlevel Eq Test.29 Test.30;
    if Test.31 then
        let Test.7 : [<r>C List *self, C *self] = UnionAtIndex (Id 1) (Index 0) Test.6;
        joinpoint #Derived_gen.9:
            let Test.8 : Str = CallByName Test.2 Test.7;
            let Test.18 : Int1 = CallByName Bool.1;
            if Test.18 then
                ret Test.8;
            else
                dec Test.8;
                let Test.17 : Str = "foo";
                ret Test.17;
        in
        let #Derived_gen.10 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.10 then
            free Test.6;
            jump #Derived_gen.9;
        else
            inc Test.7;
            decref Test.6;
            jump #Derived_gen.9;
    else
        let Test.9 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = UnionAtIndex (Id 0) (Index 0) Test.6;
        joinpoint #Derived_gen.11:
            let Test.24 : {} = Struct {};
            let Test.23 : List Str = CallByName List.5 Test.9 Test.24;
            dec Test.9;
            let Test.21 : [C {}, C Str] = CallByName List.9 Test.23;
            dec Test.23;
            let Test.22 : Str = "foo";
            let Test.20 : Str = CallByName Result.5 Test.21 Test.22;
            ret Test.20;
        in
        let #Derived_gen.12 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.12 then
            free Test.6;
            jump #Derived_gen.11;
        else
            inc Test.9;
            decref Test.6;
            jump #Derived_gen.11;

procedure Test.0 ():
    let Test.32 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = Array [];
    let Test.15 : [<r>C List *self, C *self] = TagId(0) Test.32;
    let Test.14 : Str = CallByName Test.2 Test.15;
    ret Test.14;
