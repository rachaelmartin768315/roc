procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure List.18 (List.167, List.168, List.169):
    let List.646 : U64 = 0i64;
    let List.647 : U64 = CallByName List.6 List.167;
    let List.645 : List Str = CallByName List.96 List.167 List.168 List.169 List.646 List.647;
    ret List.645;

procedure List.2 (List.115, List.116):
    let List.640 : U64 = CallByName List.6 List.115;
    let List.636 : Int1 = CallByName Num.22 List.116 List.640;
    if List.636 then
        let List.638 : Str = CallByName List.66 List.115 List.116;
        inc List.638;
        let List.637 : [C {}, C Str] = TagId(1) List.638;
        ret List.637;
    else
        let List.635 : {} = Struct {};
        let List.634 : [C {}, C Str] = TagId(0) List.635;
        ret List.634;

procedure List.279 (List.280, List.281, List.277):
    let List.659 : Str = CallByName Test.10 List.281;
    let List.658 : List Str = CallByName List.71 List.280 List.659;
    ret List.658;

procedure List.5 (List.276, List.277):
    let List.278 : U64 = CallByName List.6 List.276;
    let List.643 : List Str = CallByName List.68 List.278;
    let List.642 : List Str = CallByName List.18 List.276 List.643 List.277;
    ret List.642;

procedure List.6 (#Attr.2):
    let List.641 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.641;

procedure List.6 (#Attr.2):
    let List.656 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.656;

procedure List.66 (#Attr.2, #Attr.3):
    let List.639 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.639;

procedure List.66 (#Attr.2, #Attr.3):
    let List.655 : [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.655;

procedure List.68 (#Attr.2):
    let List.661 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.661;

procedure List.71 (#Attr.2, #Attr.3):
    let List.660 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.660;

procedure List.9 (List.387):
    let List.633 : U64 = 0i64;
    let List.626 : [C {}, C Str] = CallByName List.2 List.387 List.633;
    let List.630 : U8 = 1i64;
    let List.631 : U8 = GetTagId List.626;
    let List.632 : Int1 = lowlevel Eq List.630 List.631;
    if List.632 then
        let List.388 : Str = UnionAtIndex (Id 1) (Index 0) List.626;
        let List.627 : [C {}, C Str] = TagId(1) List.388;
        ret List.627;
    else
        dec List.626;
        let List.629 : {} = Struct {};
        let List.628 : [C {}, C Str] = TagId(0) List.629;
        ret List.628;

procedure List.96 (#Derived_gen.3, #Derived_gen.4, #Derived_gen.5, #Derived_gen.6, #Derived_gen.7):
    joinpoint List.648 List.170 List.171 List.172 List.173 List.174:
        let List.650 : Int1 = CallByName Num.22 List.173 List.174;
        if List.650 then
            let List.654 : [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = CallByName List.66 List.170 List.173;
            inc List.654;
            let List.175 : List Str = CallByName List.279 List.171 List.654 List.172;
            let List.653 : U64 = 1i64;
            let List.652 : U64 = CallByName Num.51 List.173 List.653;
            jump List.648 List.170 List.175 List.172 List.652 List.174;
        else
            dec List.170;
            ret List.171;
    in
    inc #Derived_gen.3;
    jump List.648 #Derived_gen.3 #Derived_gen.4 #Derived_gen.5 #Derived_gen.6 #Derived_gen.7;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Result.5 (Result.13, Result.14):
    let Result.57 : U8 = 1i64;
    let Result.58 : U8 = GetTagId Result.13;
    let Result.59 : Int1 = lowlevel Eq Result.57 Result.58;
    if Result.59 then
        dec Result.14;
        let Result.15 : Str = UnionAtIndex (Id 1) (Index 0) Result.13;
        ret Result.15;
    else
        dec Result.13;
        ret Result.14;

procedure Test.10 (Test.11):
    let Test.12 : Str = CallByName Test.2 Test.11;
    let Test.26 : Int1 = CallByName Bool.1;
    if Test.26 then
        ret Test.12;
    else
        dec Test.12;
        let Test.25 : Str = "foo";
        ret Test.25;

procedure Test.2 (Test.6):
    let Test.29 : U8 = 1i64;
    let Test.30 : U8 = GetTagId Test.6;
    let Test.31 : Int1 = lowlevel Eq Test.29 Test.30;
    if Test.31 then
        let Test.7 : [<r>C List *self, C *self] = UnionAtIndex (Id 1) (Index 0) Test.6;
        joinpoint #Derived_gen.9:
            let Test.8 : Str = CallByName Test.2 Test.7;
            let Test.18 : Int1 = CallByName Bool.1;
            if Test.18 then
                ret Test.8;
            else
                dec Test.8;
                let Test.17 : Str = "foo";
                ret Test.17;
        in
        let #Derived_gen.10 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.10 then
            free Test.6;
            jump #Derived_gen.9;
        else
            inc Test.7;
            decref Test.6;
            jump #Derived_gen.9;
    else
        let Test.9 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = UnionAtIndex (Id 0) (Index 0) Test.6;
        joinpoint #Derived_gen.11:
            let Test.24 : {} = Struct {};
            let Test.23 : List Str = CallByName List.5 Test.9 Test.24;
            dec Test.9;
            let Test.21 : [C {}, C Str] = CallByName List.9 Test.23;
            dec Test.23;
            let Test.22 : Str = "foo";
            let Test.20 : Str = CallByName Result.5 Test.21 Test.22;
            ret Test.20;
        in
        let #Derived_gen.12 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.12 then
            free Test.6;
            jump #Derived_gen.11;
        else
            inc Test.9;
            decref Test.6;
            jump #Derived_gen.11;

procedure Test.0 ():
    let Test.32 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = Array [];
    let Test.15 : [<r>C List *self, C *self] = TagId(0) Test.32;
    let Test.14 : Str = CallByName Test.2 Test.15;
    ret Test.14;
