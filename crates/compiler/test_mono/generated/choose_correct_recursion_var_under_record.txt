procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure List.101 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.688 List.175 List.176 List.177 List.178 List.179:
        let List.690 : Int1 = CallByName Num.22 List.178 List.179;
        if List.690 then
            let List.694 : [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = CallByName List.66 List.175 List.178;
            inc List.694;
            let List.180 : List Str = CallByName List.284 List.176 List.694 List.177;
            let List.693 : U64 = 1i64;
            let List.692 : U64 = CallByName Num.51 List.178 List.693;
            jump List.688 List.175 List.180 List.177 List.692 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc #Derived_gen.0;
    jump List.688 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure List.18 (List.172, List.173, List.174):
    let List.686 : U64 = 0i64;
    let List.687 : U64 = CallByName List.6 List.172;
    let List.685 : List Str = CallByName List.101 List.172 List.173 List.174 List.686 List.687;
    ret List.685;

procedure List.2 (List.120, List.121):
    let List.680 : U64 = CallByName List.6 List.120;
    let List.676 : Int1 = CallByName Num.22 List.121 List.680;
    if List.676 then
        let List.678 : Str = CallByName List.66 List.120 List.121;
        inc List.678;
        let List.677 : [C {}, C Str] = TagId(1) List.678;
        ret List.677;
    else
        let List.675 : {} = Struct {};
        let List.674 : [C {}, C Str] = TagId(0) List.675;
        ret List.674;

procedure List.284 (List.285, List.286, List.282):
    let List.699 : Str = CallByName Test.10 List.286;
    let List.698 : List Str = CallByName List.71 List.285 List.699;
    ret List.698;

procedure List.5 (List.281, List.282):
    let List.283 : U64 = CallByName List.6 List.281;
    let List.683 : List Str = CallByName List.68 List.283;
    let List.682 : List Str = CallByName List.18 List.281 List.683 List.282;
    ret List.682;

procedure List.6 (#Attr.2):
    let List.681 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.681;

procedure List.6 (#Attr.2):
    let List.696 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.696;

procedure List.66 (#Attr.2, #Attr.3):
    let List.679 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.679;

procedure List.66 (#Attr.2, #Attr.3):
    let List.695 : [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.695;

procedure List.68 (#Attr.2):
    let List.701 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.701;

procedure List.71 (#Attr.2, #Attr.3):
    let List.700 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.700;

procedure List.9 (List.392):
    let List.673 : U64 = 0i64;
    let List.666 : [C {}, C Str] = CallByName List.2 List.392 List.673;
    let List.670 : U8 = 1i64;
    let List.671 : U8 = GetTagId List.666;
    let List.672 : Int1 = lowlevel Eq List.670 List.671;
    if List.672 then
        let List.393 : Str = UnionAtIndex (Id 1) (Index 0) List.666;
        let List.667 : [C {}, C Str] = TagId(1) List.393;
        ret List.667;
    else
        dec List.666;
        let List.669 : {} = Struct {};
        let List.668 : [C {}, C Str] = TagId(0) List.669;
        ret List.668;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Result.5 (Result.14, Result.15):
    let Result.63 : U8 = 1i64;
    let Result.64 : U8 = GetTagId Result.14;
    let Result.65 : Int1 = lowlevel Eq Result.63 Result.64;
    if Result.65 then
        dec Result.15;
        let Result.16 : Str = UnionAtIndex (Id 1) (Index 0) Result.14;
        ret Result.16;
    else
        dec Result.14;
        ret Result.15;

procedure Test.10 (Test.11):
    let Test.12 : Str = CallByName Test.2 Test.11;
    let Test.26 : Int1 = CallByName Bool.1;
    if Test.26 then
        ret Test.12;
    else
        dec Test.12;
        let Test.25 : Str = "foo";
        ret Test.25;

procedure Test.2 (Test.6):
    let Test.29 : U8 = 1i64;
    let Test.30 : U8 = GetTagId Test.6;
    let Test.31 : Int1 = lowlevel Eq Test.29 Test.30;
    if Test.31 then
        let Test.7 : [<r>C List *self, C *self] = UnionAtIndex (Id 1) (Index 0) Test.6;
        joinpoint #Derived_gen.9:
            let Test.8 : Str = CallByName Test.2 Test.7;
            let Test.18 : Int1 = CallByName Bool.1;
            if Test.18 then
                ret Test.8;
            else
                dec Test.8;
                let Test.17 : Str = "foo";
                ret Test.17;
        in
        let #Derived_gen.10 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.10 then
            free Test.6;
            jump #Derived_gen.9;
        else
            inc Test.7;
            decref Test.6;
            jump #Derived_gen.9;
    else
        let Test.9 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = UnionAtIndex (Id 0) (Index 0) Test.6;
        joinpoint #Derived_gen.11:
            let Test.24 : {} = Struct {};
            let Test.23 : List Str = CallByName List.5 Test.9 Test.24;
            dec Test.9;
            let Test.21 : [C {}, C Str] = CallByName List.9 Test.23;
            dec Test.23;
            let Test.22 : Str = "foo";
            let Test.20 : Str = CallByName Result.5 Test.21 Test.22;
            ret Test.20;
        in
        let #Derived_gen.12 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.12 then
            free Test.6;
            jump #Derived_gen.11;
        else
            inc Test.9;
            decref Test.6;
            jump #Derived_gen.11;

procedure Test.0 ():
    let Test.32 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = Array [];
    let Test.15 : [<r>C List *self, C *self] = TagId(0) Test.32;
    let Test.14 : Str = CallByName Test.2 Test.15;
    ret Test.14;
