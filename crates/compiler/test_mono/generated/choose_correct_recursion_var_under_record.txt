procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure List.18 (List.163, List.164, List.165):
    let List.642 : U64 = 0i64;
    let List.643 : U64 = CallByName List.6 List.163;
    let List.641 : List Str = CallByName List.92 List.163 List.164 List.165 List.642 List.643;
    ret List.641;

procedure List.2 (List.111, List.112):
    let List.636 : U64 = CallByName List.6 List.111;
    let List.632 : Int1 = CallByName Num.22 List.112 List.636;
    if List.632 then
        let List.634 : Str = CallByName List.66 List.111 List.112;
        inc List.634;
        let List.633 : [C {}, C Str] = TagId(1) List.634;
        ret List.633;
    else
        let List.631 : {} = Struct {};
        let List.630 : [C {}, C Str] = TagId(0) List.631;
        ret List.630;

procedure List.275 (List.276, List.277, List.273):
    let List.655 : Str = CallByName Test.10 List.277;
    let List.654 : List Str = CallByName List.71 List.276 List.655;
    ret List.654;

procedure List.5 (List.272, List.273):
    let List.274 : U64 = CallByName List.6 List.272;
    let List.639 : List Str = CallByName List.68 List.274;
    let List.638 : List Str = CallByName List.18 List.272 List.639 List.273;
    ret List.638;

procedure List.6 (#Attr.2):
    let List.637 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.637;

procedure List.6 (#Attr.2):
    let List.652 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.652;

procedure List.66 (#Attr.2, #Attr.3):
    let List.635 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.635;

procedure List.66 (#Attr.2, #Attr.3):
    let List.651 : [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.651;

procedure List.68 (#Attr.2):
    let List.657 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.657;

procedure List.71 (#Attr.2, #Attr.3):
    let List.656 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.656;

procedure List.9 (List.383):
    let List.629 : U64 = 0i64;
    let List.622 : [C {}, C Str] = CallByName List.2 List.383 List.629;
    let List.626 : U8 = 1i64;
    let List.627 : U8 = GetTagId List.622;
    let List.628 : Int1 = lowlevel Eq List.626 List.627;
    if List.628 then
        let List.384 : Str = UnionAtIndex (Id 1) (Index 0) List.622;
        let List.623 : [C {}, C Str] = TagId(1) List.384;
        ret List.623;
    else
        dec List.622;
        let List.625 : {} = Struct {};
        let List.624 : [C {}, C Str] = TagId(0) List.625;
        ret List.624;

procedure List.92 (#Derived_gen.4, #Derived_gen.5, #Derived_gen.6, #Derived_gen.7, #Derived_gen.8):
    joinpoint List.644 List.166 List.167 List.168 List.169 List.170:
        let List.646 : Int1 = CallByName Num.22 List.169 List.170;
        if List.646 then
            let List.650 : [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = CallByName List.66 List.166 List.169;
            inc List.650;
            let List.171 : List Str = CallByName List.275 List.167 List.650 List.168;
            let List.649 : U64 = 1i64;
            let List.648 : U64 = CallByName Num.51 List.169 List.649;
            jump List.644 List.166 List.171 List.168 List.648 List.170;
        else
            dec List.166;
            ret List.167;
    in
    inc #Derived_gen.4;
    jump List.644 #Derived_gen.4 #Derived_gen.5 #Derived_gen.6 #Derived_gen.7 #Derived_gen.8;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.280 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.280;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Result.5 (Result.10, Result.11):
    let Result.37 : U8 = 1i64;
    let Result.38 : U8 = GetTagId Result.10;
    let Result.39 : Int1 = lowlevel Eq Result.37 Result.38;
    if Result.39 then
        dec Result.11;
        let Result.12 : Str = UnionAtIndex (Id 1) (Index 0) Result.10;
        ret Result.12;
    else
        dec Result.10;
        ret Result.11;

procedure Test.10 (Test.11):
    let Test.12 : Str = CallByName Test.2 Test.11;
    let Test.26 : Int1 = CallByName Bool.1;
    if Test.26 then
        ret Test.12;
    else
        dec Test.12;
        let Test.25 : Str = "foo";
        ret Test.25;

procedure Test.2 (Test.6):
    let Test.29 : U8 = 1i64;
    let Test.30 : U8 = GetTagId Test.6;
    let Test.31 : Int1 = lowlevel Eq Test.29 Test.30;
    if Test.31 then
        let Test.7 : [<r>C List *self, C *self] = UnionAtIndex (Id 1) (Index 0) Test.6;
        joinpoint #Derived_gen.9:
            let Test.8 : Str = CallByName Test.2 Test.7;
            let Test.18 : Int1 = CallByName Bool.1;
            if Test.18 then
                ret Test.8;
            else
                dec Test.8;
                let Test.17 : Str = "foo";
                ret Test.17;
        in
        let #Derived_gen.10 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.10 then
            free Test.6;
            jump #Derived_gen.9;
        else
            inc Test.7;
            decref Test.6;
            jump #Derived_gen.9;
    else
        let Test.9 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = UnionAtIndex (Id 0) (Index 0) Test.6;
        joinpoint #Derived_gen.11:
            let Test.24 : {} = Struct {};
            let Test.23 : List Str = CallByName List.5 Test.9 Test.24;
            dec Test.9;
            let Test.21 : [C {}, C Str] = CallByName List.9 Test.23;
            dec Test.23;
            let Test.22 : Str = "foo";
            let Test.20 : Str = CallByName Result.5 Test.21 Test.22;
            ret Test.20;
        in
        let #Derived_gen.12 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.12 then
            free Test.6;
            jump #Derived_gen.11;
        else
            inc Test.9;
            decref Test.6;
            jump #Derived_gen.11;

procedure Test.0 ():
    let Test.32 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = Array [];
    let Test.15 : [<r>C List *self, C *self] = TagId(0) Test.32;
    let Test.14 : Str = CallByName Test.2 Test.15;
    ret Test.14;
