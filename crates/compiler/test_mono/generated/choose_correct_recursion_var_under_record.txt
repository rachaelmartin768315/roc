procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure List.18 (List.170, List.171, List.172):
    let List.673 : U64 = 0i64;
    let List.674 : U64 = CallByName List.6 List.170;
    let List.672 : List Str = CallByName List.99 List.170 List.171 List.172 List.673 List.674;
    ret List.672;

procedure List.2 (List.118, List.119):
    let List.667 : U64 = CallByName List.6 List.118;
    let List.663 : Int1 = CallByName Num.22 List.119 List.667;
    if List.663 then
        let List.665 : Str = CallByName List.66 List.118 List.119;
        inc List.665;
        let List.664 : [C {}, C Str] = TagId(1) List.665;
        ret List.664;
    else
        let List.662 : {} = Struct {};
        let List.661 : [C {}, C Str] = TagId(0) List.662;
        ret List.661;

procedure List.282 (List.283, List.284, List.280):
    let List.686 : Str = CallByName Test.10 List.284;
    let List.685 : List Str = CallByName List.71 List.283 List.686;
    ret List.685;

procedure List.5 (List.279, List.280):
    let List.281 : U64 = CallByName List.6 List.279;
    let List.670 : List Str = CallByName List.68 List.281;
    let List.669 : List Str = CallByName List.18 List.279 List.670 List.280;
    ret List.669;

procedure List.6 (#Attr.2):
    let List.668 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.668;

procedure List.6 (#Attr.2):
    let List.683 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.683;

procedure List.66 (#Attr.2, #Attr.3):
    let List.666 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.666;

procedure List.66 (#Attr.2, #Attr.3):
    let List.682 : [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.682;

procedure List.68 (#Attr.2):
    let List.688 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.688;

procedure List.71 (#Attr.2, #Attr.3):
    let List.687 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.687;

procedure List.9 (List.390):
    let List.660 : U64 = 0i64;
    let List.653 : [C {}, C Str] = CallByName List.2 List.390 List.660;
    let List.657 : U8 = 1i64;
    let List.658 : U8 = GetTagId List.653;
    let List.659 : Int1 = lowlevel Eq List.657 List.658;
    if List.659 then
        let List.391 : Str = UnionAtIndex (Id 1) (Index 0) List.653;
        let List.654 : [C {}, C Str] = TagId(1) List.391;
        ret List.654;
    else
        dec List.653;
        let List.656 : {} = Struct {};
        let List.655 : [C {}, C Str] = TagId(0) List.656;
        ret List.655;

procedure List.99 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.675 List.173 List.174 List.175 List.176 List.177:
        let List.677 : Int1 = CallByName Num.22 List.176 List.177;
        if List.677 then
            let List.681 : [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = CallByName List.66 List.173 List.176;
            inc List.681;
            let List.178 : List Str = CallByName List.282 List.174 List.681 List.175;
            let List.680 : U64 = 1i64;
            let List.679 : U64 = CallByName Num.51 List.176 List.680;
            jump List.675 List.173 List.178 List.175 List.679 List.177;
        else
            dec List.173;
            ret List.174;
    in
    inc #Derived_gen.0;
    jump List.675 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Result.5 (Result.13, Result.14):
    let Result.57 : U8 = 1i64;
    let Result.58 : U8 = GetTagId Result.13;
    let Result.59 : Int1 = lowlevel Eq Result.57 Result.58;
    if Result.59 then
        dec Result.14;
        let Result.15 : Str = UnionAtIndex (Id 1) (Index 0) Result.13;
        ret Result.15;
    else
        dec Result.13;
        ret Result.14;

procedure Test.10 (Test.11):
    let Test.12 : Str = CallByName Test.2 Test.11;
    let Test.26 : Int1 = CallByName Bool.1;
    if Test.26 then
        ret Test.12;
    else
        dec Test.12;
        let Test.25 : Str = "foo";
        ret Test.25;

procedure Test.2 (Test.6):
    let Test.29 : U8 = 1i64;
    let Test.30 : U8 = GetTagId Test.6;
    let Test.31 : Int1 = lowlevel Eq Test.29 Test.30;
    if Test.31 then
        let Test.7 : [<r>C List *self, C *self] = UnionAtIndex (Id 1) (Index 0) Test.6;
        joinpoint #Derived_gen.9:
            let Test.8 : Str = CallByName Test.2 Test.7;
            let Test.18 : Int1 = CallByName Bool.1;
            if Test.18 then
                ret Test.8;
            else
                dec Test.8;
                let Test.17 : Str = "foo";
                ret Test.17;
        in
        let #Derived_gen.10 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.10 then
            free Test.6;
            jump #Derived_gen.9;
        else
            inc Test.7;
            decref Test.6;
            jump #Derived_gen.9;
    else
        let Test.9 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = UnionAtIndex (Id 0) (Index 0) Test.6;
        joinpoint #Derived_gen.11:
            let Test.24 : {} = Struct {};
            let Test.23 : List Str = CallByName List.5 Test.9 Test.24;
            dec Test.9;
            let Test.21 : [C {}, C Str] = CallByName List.9 Test.23;
            dec Test.23;
            let Test.22 : Str = "foo";
            let Test.20 : Str = CallByName Result.5 Test.21 Test.22;
            ret Test.20;
        in
        let #Derived_gen.12 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.12 then
            free Test.6;
            jump #Derived_gen.11;
        else
            inc Test.9;
            decref Test.6;
            jump #Derived_gen.11;

procedure Test.0 ():
    let Test.32 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = Array [];
    let Test.15 : [<r>C List *self, C *self] = TagId(0) Test.32;
    let Test.14 : Str = CallByName Test.2 Test.15;
    ret Test.14;
