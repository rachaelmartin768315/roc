procedure Test.0 ():
    let Test.29 : Int1 = false;
    let Test.30 : Int1 = true;
    let Test.1 : List Int1 = Array [Test.29, Test.30];
    joinpoint Test.19:
        let Test.8 : Str = "E";
        ret Test.8;
    in
    joinpoint Test.17:
        let Test.7 : Str = "D";
        ret Test.7;
    in
    joinpoint Test.14:
        let Test.6 : Str = "C";
        ret Test.6;
    in
    joinpoint Test.11:
        let Test.5 : Str = "B";
        ret Test.5;
    in
    joinpoint Test.9:
        let Test.4 : Str = "A";
        ret Test.4;
    in
    let Test.26 : U64 = lowlevel ListLen Test.1;
    let Test.27 : U64 = 0i64;
    let Test.28 : Int1 = lowlevel Eq Test.26 Test.27;
    if Test.28 then
        dec Test.1;
        jump Test.9;
    else
        let Test.23 : U64 = lowlevel ListLen Test.1;
        let Test.24 : U64 = 1i64;
        let Test.25 : Int1 = lowlevel Eq Test.23 Test.24;
        if Test.25 then
            dec Test.1;
            jump Test.9;
        else
            let Test.20 : U64 = lowlevel ListLen Test.1;
            dec Test.1;
            let Test.21 : U64 = 2i64;
            let Test.22 : Int1 = lowlevel NumGte Test.20 Test.21;
            if Test.22 then
                jump Test.9;
            else
                jump Test.9;
