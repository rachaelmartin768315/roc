procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.4 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Inspect.45 #Derived_gen.5;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.3;
    dec #Derived_gen.4;
    ret #Derived_gen.3;

procedure #Derived.4 (#Derived.5):
    let #Derived_gen.10 : Str = CallByName Inspect.30 #Derived.5;
    ret #Derived_gen.10;

procedure #Derived.6 (#Derived.7, #Derived.5):
    let #Derived_gen.17 : Str = "b";
    let #Derived_gen.18 : Str = CallByName Inspect.47 #Derived.5;
    let #Derived_gen.16 : {Str, Str} = Struct {#Derived_gen.17, #Derived_gen.18};
    let #Derived_gen.15 : List {Str, Str} = Array [#Derived_gen.16];
    let #Derived_gen.14 : List {Str, Str} = CallByName Inspect.45 #Derived_gen.15;
    let #Derived_gen.13 : Str = CallByName Inspect.31 #Derived_gen.14 #Derived.7;
    dec #Derived_gen.14;
    ret #Derived_gen.13;

procedure Bool.1 ():
    let Bool.26 : Int1 = false;
    ret Bool.26;

procedure Bool.2 ():
    let Bool.25 : Int1 = true;
    ret Bool.25;

procedure Inspect.229 (Inspect.230, Inspect.228):
    let Inspect.351 : Str = "{";
    let Inspect.327 : Str = CallByName Inspect.63 Inspect.230 Inspect.351;
    dec Inspect.351;
    let Inspect.323 : {Str, Int1} = CallByName Inspect.231 Inspect.327 Inspect.228;
    dec Inspect.327;
    let Inspect.324 : {} = Struct {};
    let Inspect.319 : Str = CallByName Inspect.243 Inspect.323;
    let Inspect.320 : Str = "}";
    let Inspect.318 : Str = CallByName Inspect.63 Inspect.319 Inspect.320;
    dec Inspect.320;
    ret Inspect.318;

procedure Inspect.229 (Inspect.230, Inspect.228):
    let Inspect.391 : Str = "{";
    let Inspect.367 : Str = CallByName Inspect.63 Inspect.230 Inspect.391;
    dec Inspect.391;
    let Inspect.363 : {Str, Int1} = CallByName Inspect.231 Inspect.367 Inspect.228;
    dec Inspect.367;
    let Inspect.364 : {} = Struct {};
    let Inspect.359 : Str = CallByName Inspect.243 Inspect.363;
    let Inspect.360 : Str = "}";
    let Inspect.358 : Str = CallByName Inspect.63 Inspect.359 Inspect.360;
    dec Inspect.360;
    ret Inspect.358;

procedure Inspect.231 (Inspect.232, Inspect.228):
    let Inspect.350 : Int1 = CallByName Bool.1;
    inc Inspect.232;
    let Inspect.331 : {Str, Int1} = Struct {Inspect.232, Inspect.350};
    let Inspect.332 : {} = Struct {};
    let Inspect.330 : {Str, Int1} = CallByName List.18 Inspect.228 Inspect.331 Inspect.332;
    ret Inspect.330;

procedure Inspect.231 (Inspect.232, Inspect.228):
    let Inspect.390 : Int1 = CallByName Bool.1;
    inc Inspect.232;
    let Inspect.371 : {Str, Int1} = Struct {Inspect.232, Inspect.390};
    let Inspect.372 : {} = Struct {};
    let Inspect.370 : {Str, Int1} = CallByName List.18 Inspect.228 Inspect.371 Inspect.372;
    ret Inspect.370;

procedure Inspect.233 (Inspect.333, Inspect.334):
    let Inspect.236 : Str = StructAtIndex 0 Inspect.334;
    let Inspect.237 : Str = StructAtIndex 1 Inspect.334;
    let Inspect.234 : Str = StructAtIndex 0 Inspect.333;
    let Inspect.235 : Int1 = StructAtIndex 1 Inspect.333;
    joinpoint Inspect.348 Inspect.238:
        let Inspect.345 : Str = CallByName Inspect.63 Inspect.238 Inspect.236;
        dec Inspect.236;
        let Inspect.346 : Str = ": ";
        let Inspect.340 : Str = CallByName Inspect.63 Inspect.345 Inspect.346;
        dec Inspect.346;
        let Inspect.336 : Str = CallByName Inspect.239 Inspect.340 Inspect.237;
        let Inspect.337 : {} = Struct {};
        let Inspect.335 : {Str, Int1} = CallByName Inspect.241 Inspect.336;
        dec Inspect.336;
        ret Inspect.335;
    in
    if Inspect.235 then
        let Inspect.349 : Str = ", ";
        let Inspect.347 : Str = CallByName Inspect.63 Inspect.234 Inspect.349;
        dec Inspect.349;
        jump Inspect.348 Inspect.347;
    else
        jump Inspect.348 Inspect.234;

procedure Inspect.233 (Inspect.333, Inspect.334):
    let Inspect.236 : Str = StructAtIndex 0 Inspect.334;
    let Inspect.237 : Str = StructAtIndex 1 Inspect.334;
    let Inspect.234 : Str = StructAtIndex 0 Inspect.333;
    let Inspect.235 : Int1 = StructAtIndex 1 Inspect.333;
    joinpoint Inspect.388 Inspect.238:
        let Inspect.385 : Str = CallByName Inspect.63 Inspect.238 Inspect.236;
        dec Inspect.236;
        let Inspect.386 : Str = ": ";
        let Inspect.380 : Str = CallByName Inspect.63 Inspect.385 Inspect.386;
        dec Inspect.386;
        let Inspect.376 : Str = CallByName Inspect.239 Inspect.380 Inspect.237;
        dec Inspect.237;
        let Inspect.377 : {} = Struct {};
        let Inspect.375 : {Str, Int1} = CallByName Inspect.241 Inspect.376;
        dec Inspect.376;
        ret Inspect.375;
    in
    if Inspect.235 then
        let Inspect.389 : Str = ", ";
        let Inspect.387 : Str = CallByName Inspect.63 Inspect.234 Inspect.389;
        dec Inspect.389;
        jump Inspect.388 Inspect.387;
    else
        jump Inspect.388 Inspect.234;

procedure Inspect.239 (Inspect.240, Inspect.237):
    let Inspect.343 : Str = CallByName Inspect.31 Inspect.237 Inspect.240;
    ret Inspect.343;

procedure Inspect.239 (Inspect.240, Inspect.237):
    let Inspect.383 : Str = CallByName Inspect.31 Inspect.237 Inspect.240;
    ret Inspect.383;

procedure Inspect.241 (Inspect.242):
    let Inspect.379 : Int1 = CallByName Bool.2;
    inc Inspect.242;
    let Inspect.378 : {Str, Int1} = Struct {Inspect.242, Inspect.379};
    ret Inspect.378;

procedure Inspect.243 (Inspect.325):
    let Inspect.366 : Str = StructAtIndex 0 Inspect.325;
    ret Inspect.366;

procedure Inspect.249 (Inspect.250, Inspect.248):
    let Inspect.400 : Str = "\"";
    let Inspect.399 : Str = CallByName Inspect.63 Inspect.250 Inspect.400;
    dec Inspect.400;
    let Inspect.397 : Str = CallByName Inspect.63 Inspect.399 Inspect.248;
    let Inspect.398 : Str = "\"";
    let Inspect.396 : Str = CallByName Inspect.63 Inspect.397 Inspect.398;
    dec Inspect.398;
    ret Inspect.396;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.302, Inspect.149):
    let Inspect.313 : Str = CallByName Inspect.229 Inspect.149 Inspect.302;
    ret Inspect.313;

procedure Inspect.31 (Inspect.302, Inspect.149):
    let Inspect.344 : Str = CallByName #Derived.6 Inspect.149 Inspect.302;
    ret Inspect.344;

procedure Inspect.31 (Inspect.302, Inspect.149):
    let Inspect.353 : Str = CallByName Inspect.229 Inspect.149 Inspect.302;
    ret Inspect.353;

procedure Inspect.31 (Inspect.302, Inspect.149):
    let Inspect.384 : Str = CallByName Inspect.249 Inspect.149 Inspect.302;
    ret Inspect.384;

procedure Inspect.33 (Inspect.152):
    let Inspect.304 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.303 : Str = CallByName Inspect.64 Inspect.304;
    ret Inspect.303;

procedure Inspect.39 (Inspect.300):
    let Inspect.310 : Str = "";
    ret Inspect.310;

procedure Inspect.45 (Inspect.228):
    let Inspect.314 : List {Str, Str} = CallByName Inspect.30 Inspect.228;
    ret Inspect.314;

procedure Inspect.45 (Inspect.228):
    let Inspect.354 : List {Str, Str} = CallByName Inspect.30 Inspect.228;
    ret Inspect.354;

procedure Inspect.47 (Inspect.248):
    let Inspect.392 : Str = CallByName Inspect.30 Inspect.248;
    ret Inspect.392;

procedure Inspect.5 (Inspect.150):
    let Inspect.311 : Str = CallByName #Derived.0 Inspect.150;
    let Inspect.308 : {} = Struct {};
    let Inspect.307 : Str = CallByName Inspect.39 Inspect.308;
    let Inspect.306 : Str = CallByName #Derived.2 Inspect.307 Inspect.311;
    ret Inspect.306;

procedure Inspect.63 (Inspect.299, Inspect.295):
    let Inspect.362 : Str = CallByName Str.3 Inspect.299 Inspect.295;
    ret Inspect.362;

procedure Inspect.64 (Inspect.301):
    ret Inspect.301;

procedure List.100 (#Derived_gen.32, #Derived_gen.33, #Derived_gen.34, #Derived_gen.35, #Derived_gen.36):
    joinpoint List.668 List.174 List.175 List.176 List.177 List.178:
        let List.670 : Int1 = CallByName Num.22 List.177 List.178;
        if List.670 then
            let List.674 : {Str, Str} = CallByName List.66 List.174 List.177;
            inc List.674;
            let List.179 : {Str, Int1} = CallByName Inspect.233 List.175 List.674;
            let List.673 : U64 = 1i64;
            let List.672 : U64 = CallByName Num.51 List.177 List.673;
            jump List.668 List.174 List.179 List.176 List.672 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.32;
    jump List.668 #Derived_gen.32 #Derived_gen.33 #Derived_gen.34 #Derived_gen.35 #Derived_gen.36;

procedure List.100 (#Derived_gen.43, #Derived_gen.44, #Derived_gen.45, #Derived_gen.46, #Derived_gen.47):
    joinpoint List.680 List.174 List.175 List.176 List.177 List.178:
        let List.682 : Int1 = CallByName Num.22 List.177 List.178;
        if List.682 then
            let List.686 : {Str, Str} = CallByName List.66 List.174 List.177;
            inc List.686;
            let List.179 : {Str, Int1} = CallByName Inspect.233 List.175 List.686;
            let List.685 : U64 = 1i64;
            let List.684 : U64 = CallByName Num.51 List.177 List.685;
            jump List.680 List.174 List.179 List.176 List.684 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.43;
    jump List.680 #Derived_gen.43 #Derived_gen.44 #Derived_gen.45 #Derived_gen.46 #Derived_gen.47;

procedure List.18 (List.171, List.172, List.173):
    let List.666 : U64 = 0i64;
    let List.667 : U64 = CallByName List.6 List.171;
    let List.665 : {Str, Int1} = CallByName List.100 List.171 List.172 List.173 List.666 List.667;
    ret List.665;

procedure List.18 (List.171, List.172, List.173):
    let List.678 : U64 = 0i64;
    let List.679 : U64 = CallByName List.6 List.171;
    let List.677 : {Str, Int1} = CallByName List.100 List.171 List.172 List.173 List.678 List.679;
    ret List.677;

procedure List.6 (#Attr.2):
    let List.676 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.676;

procedure List.6 (#Attr.2):
    let List.688 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.688;

procedure List.66 (#Attr.2, #Attr.3):
    let List.675 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.675;

procedure List.66 (#Attr.2, #Attr.3):
    let List.687 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.687;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.285;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.247 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.247;

procedure Test.0 ():
    let Test.4 : Str = "bar";
    let Test.1 : Str = CallByName Inspect.33 Test.4;
    ret Test.1;
