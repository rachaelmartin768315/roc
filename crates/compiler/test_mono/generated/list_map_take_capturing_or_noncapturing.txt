procedure List.18 (List.170, List.171, List.172):
    let List.657 : U64 = 0i64;
    let List.658 : U64 = CallByName List.6 List.170;
    let List.656 : List U8 = CallByName List.99 List.170 List.171 List.172 List.657 List.658;
    ret List.656;

procedure List.282 (List.283, List.284, List.280):
    let List.672 : U8 = GetTagId List.280;
    joinpoint List.673 List.670:
        let List.669 : List U8 = CallByName List.71 List.283 List.670;
        ret List.669;
    in
    switch List.672:
        case 0:
            let List.674 : U8 = CallByName Test.4 List.284 List.280;
            jump List.673 List.674;
    
        case 1:
            let List.674 : U8 = CallByName Test.6 List.284 List.280;
            jump List.673 List.674;
    
        default:
            let List.674 : U8 = CallByName Test.8 List.284;
            jump List.673 List.674;
    

procedure List.5 (List.279, List.280):
    let List.281 : U64 = CallByName List.6 List.279;
    let List.654 : List U8 = CallByName List.68 List.281;
    let List.653 : List U8 = CallByName List.18 List.279 List.654 List.280;
    ret List.653;

procedure List.6 (#Attr.2):
    let List.667 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.667;

procedure List.66 (#Attr.2, #Attr.3):
    let List.666 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.666;

procedure List.68 (#Attr.2):
    let List.675 : List U8 = lowlevel ListWithCapacity #Attr.2;
    ret List.675;

procedure List.71 (#Attr.2, #Attr.3):
    let List.671 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.671;

procedure List.99 (#Derived_gen.3, #Derived_gen.4, #Derived_gen.5, #Derived_gen.6, #Derived_gen.7):
    joinpoint List.659 List.173 List.174 List.175 List.176 List.177:
        let List.661 : Int1 = CallByName Num.22 List.176 List.177;
        if List.661 then
            let List.665 : U8 = CallByName List.66 List.173 List.176;
            let List.178 : List U8 = CallByName List.282 List.174 List.665 List.175;
            let List.664 : U64 = 1i64;
            let List.663 : U64 = CallByName Num.51 List.176 List.664;
            jump List.659 List.173 List.178 List.175 List.663 List.177;
        else
            dec List.173;
            ret List.174;
    in
    inc #Derived_gen.3;
    jump List.659 #Derived_gen.3 #Derived_gen.4 #Derived_gen.5 #Derived_gen.6 #Derived_gen.7;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.283 : U8 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.285 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.284 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.284;

procedure Test.4 (Test.5, #Attr.12):
    let Test.16 : U8 = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Test.15 : U8 = CallByName Num.19 Test.5 Test.16;
    ret Test.15;

procedure Test.6 (Test.7, #Attr.12):
    let Test.19 : U8 = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Test.18 : U8 = CallByName Num.19 Test.7 Test.19;
    ret Test.18;

procedure Test.8 (Test.9):
    let Test.21 : U8 = CallByName Num.19 Test.9 Test.9;
    ret Test.21;

procedure Test.0 ():
    let Test.1 : U8 = 1i64;
    let Test.2 : U8 = 2i64;
    joinpoint Test.13 Test.3:
        let Test.11 : List U8 = Array [1i64, 2i64, 3i64];
        let Test.10 : List U8 = CallByName List.5 Test.11 Test.3;
        dec Test.11;
        ret Test.10;
    in
    let Test.12 : Str = "";
    let Test.24 : Str = "A";
    let Test.25 : Int1 = lowlevel Eq Test.24 Test.12;
    dec Test.24;
    if Test.25 then
        dec Test.12;
        let Test.14 : [C U8, C U8, C ] = TagId(0) Test.1;
        jump Test.13 Test.14;
    else
        let Test.22 : Str = "B";
        let Test.23 : Int1 = lowlevel Eq Test.22 Test.12;
        dec Test.12;
        dec Test.22;
        if Test.23 then
            let Test.17 : [C U8, C U8, C ] = TagId(1) Test.2;
            jump Test.13 Test.17;
        else
            let Test.20 : [C U8, C U8, C ] = TagId(2) ;
            jump Test.13 Test.20;
