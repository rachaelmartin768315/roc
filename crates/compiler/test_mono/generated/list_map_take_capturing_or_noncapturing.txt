procedure List.5 (#Attr.2, #Attr.3):
    let List.495 : U8 = GetTagId #Attr.3;
    joinpoint List.496 List.494:
        ret List.494;
    in
    switch List.495:
        case 0:
            let List.497 : List U8 = lowlevel ListMap { xs: `#Attr.#arg1` } #Attr.2 Test.4 #Attr.3;
            decref #Attr.2;
            jump List.496 List.497;
    
        case 1:
            let List.498 : List U8 = lowlevel ListMap { xs: `#Attr.#arg1` } #Attr.2 Test.6 #Attr.3;
            decref #Attr.2;
            jump List.496 List.498;
    
        default:
            let List.499 : List U8 = lowlevel ListMap { xs: `#Attr.#arg1` } #Attr.2 Test.8 #Attr.3;
            decref #Attr.2;
            jump List.496 List.499;
    

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.277 : U8 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.277;

procedure Test.4 (Test.5, #Attr.12):
    let Test.1 : U8 = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Test.15 : U8 = CallByName Num.19 Test.5 Test.1;
    ret Test.15;

procedure Test.6 (Test.7, #Attr.12):
    let Test.2 : U8 = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Test.17 : U8 = CallByName Num.19 Test.7 Test.2;
    ret Test.17;

procedure Test.8 (Test.9):
    let Test.19 : U8 = CallByName Num.19 Test.9 Test.9;
    ret Test.19;

procedure Test.0 ():
    let Test.1 : U8 = 1i64;
    let Test.2 : U8 = 2i64;
    joinpoint Test.13 Test.3:
        let Test.11 : List U8 = Array [1i64, 2i64, 3i64];
        let Test.10 : List U8 = CallByName List.5 Test.11 Test.3;
        ret Test.10;
    in
    let Test.12 : Str = "";
    let Test.22 : Str = "A";
    let Test.23 : Int1 = lowlevel Eq Test.22 Test.12;
    dec Test.22;
    if Test.23 then
        dec Test.12;
        let Test.14 : [C U8, C U8, C ] = TagId(0) Test.1;
        jump Test.13 Test.14;
    else
        let Test.20 : Str = "B";
        let Test.21 : Int1 = lowlevel Eq Test.20 Test.12;
        dec Test.20;
        dec Test.12;
        if Test.21 then
            let Test.16 : [C U8, C U8, C ] = TagId(1) Test.2;
            jump Test.13 Test.16;
        else
            let Test.18 : [C U8, C U8, C ] = TagId(2) ;
            jump Test.13 Test.18;
