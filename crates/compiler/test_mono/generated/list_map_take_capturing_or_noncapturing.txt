procedure List.18 (List.168, List.169, List.170):
    let List.637 : U64 = 0i64;
    let List.638 : U64 = CallByName List.6 List.168;
    let List.636 : List U8 = CallByName List.97 List.168 List.169 List.170 List.637 List.638;
    ret List.636;

procedure List.280 (List.281, List.282, List.278):
    let List.652 : U8 = GetTagId List.278;
    joinpoint List.653 List.650:
        let List.649 : List U8 = CallByName List.71 List.281 List.650;
        ret List.649;
    in
    switch List.652:
        case 0:
            let List.654 : U8 = CallByName Test.4 List.282 List.278;
            jump List.653 List.654;
    
        case 1:
            let List.654 : U8 = CallByName Test.6 List.282 List.278;
            jump List.653 List.654;
    
        default:
            let List.654 : U8 = CallByName Test.8 List.282;
            jump List.653 List.654;
    

procedure List.5 (List.277, List.278):
    let List.279 : U64 = CallByName List.6 List.277;
    let List.634 : List U8 = CallByName List.68 List.279;
    let List.633 : List U8 = CallByName List.18 List.277 List.634 List.278;
    ret List.633;

procedure List.6 (#Attr.2):
    let List.647 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.647;

procedure List.66 (#Attr.2, #Attr.3):
    let List.646 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.646;

procedure List.68 (#Attr.2):
    let List.655 : List U8 = lowlevel ListWithCapacity #Attr.2;
    ret List.655;

procedure List.71 (#Attr.2, #Attr.3):
    let List.651 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.651;

procedure List.97 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.639 List.171 List.172 List.173 List.174 List.175:
        let List.641 : Int1 = CallByName Num.22 List.174 List.175;
        if List.641 then
            let List.645 : U8 = CallByName List.66 List.171 List.174;
            let List.176 : List U8 = CallByName List.280 List.172 List.645 List.173;
            let List.644 : U64 = 1i64;
            let List.643 : U64 = CallByName Num.51 List.174 List.644;
            jump List.639 List.171 List.176 List.173 List.643 List.175;
        else
            dec List.171;
            ret List.172;
    in
    inc #Derived_gen.0;
    jump List.639 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.283 : U8 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.285 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.284 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.284;

procedure Test.4 (Test.5, #Attr.12):
    let Test.16 : U8 = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Test.15 : U8 = CallByName Num.19 Test.5 Test.16;
    ret Test.15;

procedure Test.6 (Test.7, #Attr.12):
    let Test.19 : U8 = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Test.18 : U8 = CallByName Num.19 Test.7 Test.19;
    ret Test.18;

procedure Test.8 (Test.9):
    let Test.21 : U8 = CallByName Num.19 Test.9 Test.9;
    ret Test.21;

procedure Test.0 ():
    let Test.1 : U8 = 1i64;
    let Test.2 : U8 = 2i64;
    joinpoint Test.13 Test.3:
        let Test.11 : List U8 = Array [1i64, 2i64, 3i64];
        let Test.10 : List U8 = CallByName List.5 Test.11 Test.3;
        dec Test.11;
        ret Test.10;
    in
    let Test.12 : Str = "";
    let Test.24 : Str = "A";
    let Test.25 : Int1 = lowlevel Eq Test.24 Test.12;
    dec Test.24;
    if Test.25 then
        dec Test.12;
        let Test.14 : [C U8, C U8, C ] = TagId(0) Test.1;
        jump Test.13 Test.14;
    else
        let Test.22 : Str = "B";
        let Test.23 : Int1 = lowlevel Eq Test.22 Test.12;
        dec Test.12;
        dec Test.22;
        if Test.23 then
            let Test.17 : [C U8, C U8, C ] = TagId(1) Test.2;
            jump Test.13 Test.17;
        else
            let Test.20 : [C U8, C U8, C ] = TagId(2) ;
            jump Test.13 Test.20;
