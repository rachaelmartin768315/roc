procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure List.116 (List.569, List.570, List.571):
    let List.684 : U64 = 0i64;
    let List.685 : U64 = CallByName List.6 List.569;
    let List.683 : [C U64, C U64] = CallByName List.80 List.569 List.570 List.571 List.684 List.685;
    ret List.683;

procedure List.26 (List.213, List.214, List.215):
    let List.677 : [C U64, C U64] = CallByName List.116 List.213 List.214 List.215;
    let List.680 : U8 = 1i64;
    let List.681 : U8 = GetTagId List.677;
    let List.682 : Int1 = lowlevel Eq List.680 List.681;
    if List.682 then
        let List.216 : U64 = UnionAtIndex (Id 1) (Index 0) List.677;
        ret List.216;
    else
        let List.217 : U64 = UnionAtIndex (Id 0) (Index 0) List.677;
        ret List.217;

procedure List.38 (List.401, List.402):
    let List.676 : U64 = CallByName List.6 List.401;
    let List.403 : U64 = CallByName Num.77 List.676 List.402;
    let List.666 : List U8 = CallByName List.43 List.401 List.403;
    ret List.666;

procedure List.43 (List.399, List.400):
    let List.674 : U64 = CallByName List.6 List.399;
    let List.673 : U64 = CallByName Num.77 List.674 List.400;
    let List.668 : {U64, U64} = Struct {List.400, List.673};
    let List.667 : List U8 = CallByName List.49 List.399 List.668;
    ret List.667;

procedure List.49 (List.477, List.478):
    let List.670 : U64 = StructAtIndex 1 List.478;
    let List.671 : U64 = StructAtIndex 0 List.478;
    let List.669 : List U8 = CallByName List.72 List.477 List.670 List.671;
    ret List.669;

procedure List.6 (#Attr.2):
    let List.675 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.675;

procedure List.66 (#Attr.2, #Attr.3):
    let List.698 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.698;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.672 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.672;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.686 List.572 List.573 List.574 List.575 List.576:
        let List.688 : Int1 = CallByName Num.22 List.575 List.576;
        if List.688 then
            let List.697 : U8 = CallByName List.66 List.572 List.575;
            let List.689 : [C U64, C U64] = CallByName Test.3 List.573 List.697;
            let List.694 : U8 = 1i64;
            let List.695 : U8 = GetTagId List.689;
            let List.696 : Int1 = lowlevel Eq List.694 List.695;
            if List.696 then
                let List.577 : U64 = UnionAtIndex (Id 1) (Index 0) List.689;
                let List.692 : U64 = 1i64;
                let List.691 : U64 = CallByName Num.51 List.575 List.692;
                jump List.686 List.572 List.577 List.574 List.691 List.576;
            else
                dec List.572;
                let List.578 : U64 = UnionAtIndex (Id 0) (Index 0) List.689;
                let List.693 : [C U64, C U64] = TagId(0) List.578;
                ret List.693;
        else
            dec List.572;
            let List.687 : [C U64, C U64] = TagId(1) List.573;
            ret List.687;
    in
    inc #Derived_gen.0;
    jump List.686 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.282 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.282;

procedure Test.3 (Test.4, Test.12):
    let Test.13 : [C U64, C U64] = TagId(0) Test.4;
    ret Test.13;

procedure Test.0 (Test.1):
    let Test.10 : U64 = 0i64;
    let Test.11 : {} = Struct {};
    let Test.2 : U64 = CallByName List.26 Test.1 Test.10 Test.11;
    let Test.9 : U64 = 0i64;
    let Test.7 : Int1 = CallByName Bool.11 Test.2 Test.9;
    if Test.7 then
        ret Test.1;
    else
        let Test.6 : List U8 = CallByName List.38 Test.1 Test.2;
        ret Test.6;
