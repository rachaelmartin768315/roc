procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.24 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.24;

procedure List.26 (List.153, List.154, List.155):
    let List.509 : [C U64, C U64] = CallByName List.92 List.153 List.154 List.155;
    let List.512 : U8 = 1i64;
    let List.513 : U8 = GetTagId List.509;
    let List.514 : Int1 = lowlevel Eq List.512 List.513;
    if List.514 then
        let List.156 : U64 = UnionAtIndex (Id 1) (Index 0) List.509;
        ret List.156;
    else
        let List.157 : U64 = UnionAtIndex (Id 0) (Index 0) List.509;
        ret List.157;

procedure List.29 (List.298, List.299):
    let List.508 : U64 = CallByName List.6 List.298;
    let List.300 : U64 = CallByName Num.77 List.508 List.299;
    let List.494 : List U8 = CallByName List.43 List.298 List.300;
    ret List.494;

procedure List.43 (List.296, List.297):
    let List.506 : U64 = CallByName List.6 List.296;
    let List.505 : U64 = CallByName Num.77 List.506 List.297;
    let List.496 : {U64, U64} = Struct {List.297, List.505};
    let List.495 : List U8 = CallByName List.49 List.296 List.496;
    ret List.495;

procedure List.49 (List.370, List.371):
    let List.503 : U64 = StructAtIndex 0 List.371;
    let List.504 : U64 = 0i64;
    let List.501 : Int1 = CallByName Bool.11 List.503 List.504;
    if List.501 then
        dec List.370;
        let List.502 : List U8 = Array [];
        ret List.502;
    else
        let List.498 : U64 = StructAtIndex 1 List.371;
        let List.499 : U64 = StructAtIndex 0 List.371;
        let List.497 : List U8 = CallByName List.72 List.370 List.498 List.499;
        ret List.497;

procedure List.6 (#Attr.2):
    let List.507 : U64 = lowlevel ListLen #Attr.2;
    ret List.507;

procedure List.66 (#Attr.2, #Attr.3):
    let List.530 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.530;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.500 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.500;

procedure List.80 (List.544, List.545, List.546, List.547, List.548):
    joinpoint List.518 List.433 List.434 List.435 List.436 List.437:
        let List.520 : Int1 = CallByName Num.22 List.436 List.437;
        if List.520 then
            let List.529 : U8 = CallByName List.66 List.433 List.436;
            let List.521 : [C U64, C U64] = CallByName Test.3 List.434 List.529;
            let List.526 : U8 = 1i64;
            let List.527 : U8 = GetTagId List.521;
            let List.528 : Int1 = lowlevel Eq List.526 List.527;
            if List.528 then
                let List.438 : U64 = UnionAtIndex (Id 1) (Index 0) List.521;
                let List.524 : U64 = 1i64;
                let List.523 : U64 = CallByName Num.19 List.436 List.524;
                jump List.518 List.433 List.438 List.435 List.523 List.437;
            else
                dec List.433;
                let List.439 : U64 = UnionAtIndex (Id 0) (Index 0) List.521;
                let List.525 : [C U64, C U64] = TagId(0) List.439;
                ret List.525;
        else
            dec List.433;
            let List.519 : [C U64, C U64] = TagId(1) List.434;
            ret List.519;
    in
    jump List.518 List.544 List.545 List.546 List.547 List.548;

procedure List.92 (List.430, List.431, List.432):
    let List.516 : U64 = 0i64;
    let List.517 : U64 = CallByName List.6 List.430;
    let List.515 : [C U64, C U64] = CallByName List.80 List.430 List.431 List.432 List.516 List.517;
    ret List.515;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.282 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.282;

procedure Test.3 (Test.4, Test.12):
    let Test.13 : [C U64, C U64] = TagId(0) Test.4;
    ret Test.13;

procedure Test.0 (Test.1):
    let Test.10 : U64 = 0i64;
    let Test.11 : {} = Struct {};
    inc Test.1;
    let Test.2 : U64 = CallByName List.26 Test.1 Test.10 Test.11;
    let Test.9 : U64 = 0i64;
    let Test.7 : Int1 = CallByName Bool.11 Test.2 Test.9;
    if Test.7 then
        ret Test.1;
    else
        let Test.6 : List U8 = CallByName List.29 Test.1 Test.2;
        ret Test.6;
