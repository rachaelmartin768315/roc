procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure List.107 (List.491, List.492, List.493):
    let List.595 : U64 = 0i64;
    let List.596 : U64 = CallByName List.6 List.491;
    let List.594 : [C U64, C U64] = CallByName List.80 List.491 List.492 List.493 List.595 List.596;
    ret List.594;

procedure List.26 (List.204, List.205, List.206):
    let List.588 : [C U64, C U64] = CallByName List.107 List.204 List.205 List.206;
    let List.591 : U8 = 1i64;
    let List.592 : U8 = GetTagId List.588;
    let List.593 : Int1 = lowlevel Eq List.591 List.592;
    if List.593 then
        let List.207 : U64 = UnionAtIndex (Id 1) (Index 0) List.588;
        ret List.207;
    else
        let List.208 : U64 = UnionAtIndex (Id 0) (Index 0) List.588;
        ret List.208;

procedure List.38 (List.347, List.348):
    let List.587 : U64 = CallByName List.6 List.347;
    let List.349 : U64 = CallByName Num.77 List.587 List.348;
    let List.577 : List U8 = CallByName List.43 List.347 List.349;
    ret List.577;

procedure List.43 (List.345, List.346):
    let List.585 : U64 = CallByName List.6 List.345;
    let List.584 : U64 = CallByName Num.77 List.585 List.346;
    let List.579 : {U64, U64} = Struct {List.346, List.584};
    let List.578 : List U8 = CallByName List.49 List.345 List.579;
    ret List.578;

procedure List.49 (List.423, List.424):
    let List.581 : U64 = StructAtIndex 1 List.424;
    let List.582 : U64 = StructAtIndex 0 List.424;
    let List.580 : List U8 = CallByName List.72 List.423 List.581 List.582;
    ret List.580;

procedure List.6 (#Attr.2):
    let List.586 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.586;

procedure List.66 (#Attr.2, #Attr.3):
    let List.609 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.609;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.583 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.583;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.597 List.494 List.495 List.496 List.497 List.498:
        let List.599 : Int1 = CallByName Num.22 List.497 List.498;
        if List.599 then
            let List.608 : U8 = CallByName List.66 List.494 List.497;
            let List.600 : [C U64, C U64] = CallByName Test.3 List.495 List.608;
            let List.605 : U8 = 1i64;
            let List.606 : U8 = GetTagId List.600;
            let List.607 : Int1 = lowlevel Eq List.605 List.606;
            if List.607 then
                let List.499 : U64 = UnionAtIndex (Id 1) (Index 0) List.600;
                let List.603 : U64 = 1i64;
                let List.602 : U64 = CallByName Num.51 List.497 List.603;
                jump List.597 List.494 List.499 List.496 List.602 List.498;
            else
                dec List.494;
                let List.500 : U64 = UnionAtIndex (Id 0) (Index 0) List.600;
                let List.604 : [C U64, C U64] = TagId(0) List.500;
                ret List.604;
        else
            dec List.494;
            let List.598 : [C U64, C U64] = TagId(1) List.495;
            ret List.598;
    in
    jump List.597 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.282 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.282;

procedure Test.3 (Test.4, Test.12):
    let Test.13 : [C U64, C U64] = TagId(0) Test.4;
    ret Test.13;

procedure Test.0 (Test.1):
    let Test.10 : U64 = 0i64;
    let Test.11 : {} = Struct {};
    inc Test.1;
    let Test.2 : U64 = CallByName List.26 Test.1 Test.10 Test.11;
    let Test.9 : U64 = 0i64;
    let Test.7 : Int1 = CallByName Bool.11 Test.2 Test.9;
    if Test.7 then
        ret Test.1;
    else
        let Test.6 : List U8 = CallByName List.38 Test.1 Test.2;
        ret Test.6;
