procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure List.111 (List.540, List.541, List.542):
    let List.644 : U64 = 0i64;
    let List.645 : U64 = CallByName List.6 List.540;
    let List.643 : [C U64, C U64] = CallByName List.80 List.540 List.541 List.542 List.644 List.645;
    ret List.643;

procedure List.26 (List.208, List.209, List.210):
    let List.637 : [C U64, C U64] = CallByName List.111 List.208 List.209 List.210;
    let List.640 : U8 = 1i64;
    let List.641 : U8 = GetTagId List.637;
    let List.642 : Int1 = lowlevel Eq List.640 List.641;
    if List.642 then
        let List.211 : U64 = UnionAtIndex (Id 1) (Index 0) List.637;
        ret List.211;
    else
        let List.212 : U64 = UnionAtIndex (Id 0) (Index 0) List.637;
        ret List.212;

procedure List.38 (List.396, List.397):
    let List.636 : U64 = CallByName List.6 List.396;
    let List.398 : U64 = CallByName Num.77 List.636 List.397;
    let List.626 : List U8 = CallByName List.43 List.396 List.398;
    ret List.626;

procedure List.43 (List.394, List.395):
    let List.634 : U64 = CallByName List.6 List.394;
    let List.633 : U64 = CallByName Num.77 List.634 List.395;
    let List.628 : {U64, U64} = Struct {List.395, List.633};
    let List.627 : List U8 = CallByName List.49 List.394 List.628;
    ret List.627;

procedure List.49 (List.472, List.473):
    let List.630 : U64 = StructAtIndex 1 List.473;
    let List.631 : U64 = StructAtIndex 0 List.473;
    let List.629 : List U8 = CallByName List.72 List.472 List.630 List.631;
    ret List.629;

procedure List.6 (#Attr.2):
    let List.635 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.635;

procedure List.66 (#Attr.2, #Attr.3):
    let List.658 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.658;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.632 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.632;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.646 List.543 List.544 List.545 List.546 List.547:
        let List.648 : Int1 = CallByName Num.22 List.546 List.547;
        if List.648 then
            let List.657 : U8 = CallByName List.66 List.543 List.546;
            let List.649 : [C U64, C U64] = CallByName Test.3 List.544 List.657;
            let List.654 : U8 = 1i64;
            let List.655 : U8 = GetTagId List.649;
            let List.656 : Int1 = lowlevel Eq List.654 List.655;
            if List.656 then
                let List.548 : U64 = UnionAtIndex (Id 1) (Index 0) List.649;
                let List.652 : U64 = 1i64;
                let List.651 : U64 = CallByName Num.51 List.546 List.652;
                jump List.646 List.543 List.548 List.545 List.651 List.547;
            else
                dec List.543;
                let List.549 : U64 = UnionAtIndex (Id 0) (Index 0) List.649;
                let List.653 : [C U64, C U64] = TagId(0) List.549;
                ret List.653;
        else
            dec List.543;
            let List.647 : [C U64, C U64] = TagId(1) List.544;
            ret List.647;
    in
    inc #Derived_gen.0;
    jump List.646 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.282 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.282;

procedure Test.3 (Test.4, Test.12):
    let Test.13 : [C U64, C U64] = TagId(0) Test.4;
    ret Test.13;

procedure Test.0 (Test.1):
    let Test.10 : U64 = 0i64;
    let Test.11 : {} = Struct {};
    let Test.2 : U64 = CallByName List.26 Test.1 Test.10 Test.11;
    let Test.9 : U64 = 0i64;
    let Test.7 : Int1 = CallByName Bool.11 Test.2 Test.9;
    if Test.7 then
        ret Test.1;
    else
        let Test.6 : List U8 = CallByName List.38 Test.1 Test.2;
        ret Test.6;
