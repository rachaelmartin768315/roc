procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.24 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.24;

procedure List.26 (List.172, List.173, List.174):
    let List.549 : [C U64, C U64] = CallByName List.96 List.172 List.173 List.174;
    let List.552 : U8 = 1i64;
    let List.553 : U8 = GetTagId List.549;
    let List.554 : Int1 = lowlevel Eq List.552 List.553;
    if List.554 then
        let List.175 : U64 = UnionAtIndex (Id 1) (Index 0) List.549;
        ret List.175;
    else
        let List.176 : U64 = UnionAtIndex (Id 0) (Index 0) List.549;
        ret List.176;

procedure List.29 (List.317, List.318):
    let List.548 : U64 = CallByName List.6 List.317;
    let List.319 : U64 = CallByName Num.77 List.548 List.318;
    let List.534 : List U8 = CallByName List.43 List.317 List.319;
    ret List.534;

procedure List.43 (List.315, List.316):
    let List.546 : U64 = CallByName List.6 List.315;
    let List.545 : U64 = CallByName Num.77 List.546 List.316;
    let List.536 : {U64, U64} = Struct {List.316, List.545};
    let List.535 : List U8 = CallByName List.49 List.315 List.536;
    ret List.535;

procedure List.49 (List.389, List.390):
    let List.543 : U64 = StructAtIndex 0 List.390;
    let List.544 : U64 = 0i64;
    let List.541 : Int1 = CallByName Bool.11 List.543 List.544;
    if List.541 then
        dec List.389;
        let List.542 : List U8 = Array [];
        ret List.542;
    else
        let List.538 : U64 = StructAtIndex 1 List.390;
        let List.539 : U64 = StructAtIndex 0 List.390;
        let List.537 : List U8 = CallByName List.72 List.389 List.538 List.539;
        ret List.537;

procedure List.6 (#Attr.2):
    let List.547 : U64 = lowlevel ListLen #Attr.2;
    ret List.547;

procedure List.66 (#Attr.2, #Attr.3):
    let List.570 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.570;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.540 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.540;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.558 List.452 List.453 List.454 List.455 List.456:
        let List.560 : Int1 = CallByName Num.22 List.455 List.456;
        if List.560 then
            let List.569 : U8 = CallByName List.66 List.452 List.455;
            let List.561 : [C U64, C U64] = CallByName Test.3 List.453 List.569;
            let List.566 : U8 = 1i64;
            let List.567 : U8 = GetTagId List.561;
            let List.568 : Int1 = lowlevel Eq List.566 List.567;
            if List.568 then
                let List.457 : U64 = UnionAtIndex (Id 1) (Index 0) List.561;
                let List.564 : U64 = 1i64;
                let List.563 : U64 = CallByName Num.19 List.455 List.564;
                jump List.558 List.452 List.457 List.454 List.563 List.456;
            else
                dec List.452;
                let List.458 : U64 = UnionAtIndex (Id 0) (Index 0) List.561;
                let List.565 : [C U64, C U64] = TagId(0) List.458;
                ret List.565;
        else
            dec List.452;
            let List.559 : [C U64, C U64] = TagId(1) List.453;
            ret List.559;
    in
    jump List.558 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure List.96 (List.449, List.450, List.451):
    let List.556 : U64 = 0i64;
    let List.557 : U64 = CallByName List.6 List.449;
    let List.555 : [C U64, C U64] = CallByName List.80 List.449 List.450 List.451 List.556 List.557;
    ret List.555;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.294 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.295 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.295;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.293;

procedure Test.3 (Test.4, Test.12):
    let Test.13 : [C U64, C U64] = TagId(0) Test.4;
    ret Test.13;

procedure Test.0 (Test.1):
    let Test.10 : U64 = 0i64;
    let Test.11 : {} = Struct {};
    inc Test.1;
    let Test.2 : U64 = CallByName List.26 Test.1 Test.10 Test.11;
    let Test.9 : U64 = 0i64;
    let Test.7 : Int1 = CallByName Bool.11 Test.2 Test.9;
    if Test.7 then
        ret Test.1;
    else
        let Test.6 : List U8 = CallByName List.29 Test.1 Test.2;
        ret Test.6;
