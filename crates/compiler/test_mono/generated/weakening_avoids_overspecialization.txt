procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.24 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.24;

procedure List.26 (List.159, List.160, List.161):
    let List.536 : [C U64, C U64] = CallByName List.93 List.159 List.160 List.161;
    let List.539 : U8 = 1i64;
    let List.540 : U8 = GetTagId List.536;
    let List.541 : Int1 = lowlevel Eq List.539 List.540;
    if List.541 then
        let List.162 : U64 = UnionAtIndex (Id 1) (Index 0) List.536;
        ret List.162;
    else
        let List.163 : U64 = UnionAtIndex (Id 0) (Index 0) List.536;
        ret List.163;

procedure List.29 (List.304, List.305):
    let List.535 : U64 = CallByName List.6 List.304;
    let List.306 : U64 = CallByName Num.77 List.535 List.305;
    let List.521 : List U8 = CallByName List.43 List.304 List.306;
    ret List.521;

procedure List.43 (List.302, List.303):
    let List.533 : U64 = CallByName List.6 List.302;
    let List.532 : U64 = CallByName Num.77 List.533 List.303;
    let List.523 : {U64, U64} = Struct {List.303, List.532};
    let List.522 : List U8 = CallByName List.49 List.302 List.523;
    ret List.522;

procedure List.49 (List.376, List.377):
    let List.530 : U64 = StructAtIndex 0 List.377;
    let List.531 : U64 = 0i64;
    let List.528 : Int1 = CallByName Bool.11 List.530 List.531;
    if List.528 then
        dec List.376;
        let List.529 : List U8 = Array [];
        ret List.529;
    else
        let List.525 : U64 = StructAtIndex 1 List.377;
        let List.526 : U64 = StructAtIndex 0 List.377;
        let List.524 : List U8 = CallByName List.72 List.376 List.525 List.526;
        ret List.524;

procedure List.6 (#Attr.2):
    let List.534 : U64 = lowlevel ListLen #Attr.2;
    ret List.534;

procedure List.66 (#Attr.2, #Attr.3):
    let List.557 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.557;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.527 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.527;

procedure List.80 (List.571, List.572, List.573, List.574, List.575):
    joinpoint List.545 List.439 List.440 List.441 List.442 List.443:
        let List.547 : Int1 = CallByName Num.22 List.442 List.443;
        if List.547 then
            let List.556 : U8 = CallByName List.66 List.439 List.442;
            let List.548 : [C U64, C U64] = CallByName Test.3 List.440 List.556;
            let List.553 : U8 = 1i64;
            let List.554 : U8 = GetTagId List.548;
            let List.555 : Int1 = lowlevel Eq List.553 List.554;
            if List.555 then
                let List.444 : U64 = UnionAtIndex (Id 1) (Index 0) List.548;
                let List.551 : U64 = 1i64;
                let List.550 : U64 = CallByName Num.19 List.442 List.551;
                jump List.545 List.439 List.444 List.441 List.550 List.443;
            else
                dec List.439;
                let List.445 : U64 = UnionAtIndex (Id 0) (Index 0) List.548;
                let List.552 : [C U64, C U64] = TagId(0) List.445;
                ret List.552;
        else
            dec List.439;
            let List.546 : [C U64, C U64] = TagId(1) List.440;
            ret List.546;
    in
    jump List.545 List.571 List.572 List.573 List.574 List.575;

procedure List.93 (List.436, List.437, List.438):
    let List.543 : U64 = 0i64;
    let List.544 : U64 = CallByName List.6 List.436;
    let List.542 : [C U64, C U64] = CallByName List.80 List.436 List.437 List.438 List.543 List.544;
    ret List.542;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.294 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.295 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.295;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.293;

procedure Test.3 (Test.4, Test.12):
    let Test.13 : [C U64, C U64] = TagId(0) Test.4;
    ret Test.13;

procedure Test.0 (Test.1):
    let Test.10 : U64 = 0i64;
    let Test.11 : {} = Struct {};
    inc Test.1;
    let Test.2 : U64 = CallByName List.26 Test.1 Test.10 Test.11;
    let Test.9 : U64 = 0i64;
    let Test.7 : Int1 = CallByName Bool.11 Test.2 Test.9;
    if Test.7 then
        ret Test.1;
    else
        let Test.6 : List U8 = CallByName List.29 Test.1 Test.2;
        ret Test.6;
