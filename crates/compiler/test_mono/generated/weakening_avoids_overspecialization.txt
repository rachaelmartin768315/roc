procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.24 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.24;

procedure List.26 (List.152, List.153, List.154):
    let List.508 : [C U64, C U64] = CallByName List.91 List.152 List.153 List.154;
    let List.511 : U8 = 1i64;
    let List.512 : U8 = GetTagId List.508;
    let List.513 : Int1 = lowlevel Eq List.511 List.512;
    if List.513 then
        let List.155 : U64 = UnionAtIndex (Id 1) (Index 0) List.508;
        ret List.155;
    else
        let List.156 : U64 = UnionAtIndex (Id 0) (Index 0) List.508;
        ret List.156;

procedure List.29 (List.297, List.298):
    let List.507 : U64 = CallByName List.6 List.297;
    let List.299 : U64 = CallByName Num.77 List.507 List.298;
    let List.493 : List U8 = CallByName List.43 List.297 List.299;
    ret List.493;

procedure List.43 (List.295, List.296):
    let List.505 : U64 = CallByName List.6 List.295;
    let List.504 : U64 = CallByName Num.77 List.505 List.296;
    let List.495 : {U64, U64} = Struct {List.296, List.504};
    let List.494 : List U8 = CallByName List.49 List.295 List.495;
    ret List.494;

procedure List.49 (List.369, List.370):
    let List.502 : U64 = StructAtIndex 0 List.370;
    let List.503 : U64 = 0i64;
    let List.500 : Int1 = CallByName Bool.11 List.502 List.503;
    if List.500 then
        dec List.369;
        let List.501 : List U8 = Array [];
        ret List.501;
    else
        let List.497 : U64 = StructAtIndex 1 List.370;
        let List.498 : U64 = StructAtIndex 0 List.370;
        let List.496 : List U8 = CallByName List.72 List.369 List.497 List.498;
        ret List.496;

procedure List.6 (#Attr.2):
    let List.506 : U64 = lowlevel ListLen #Attr.2;
    ret List.506;

procedure List.66 (#Attr.2, #Attr.3):
    let List.529 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.529;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.499 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.499;

procedure List.80 (List.543, List.544, List.545, List.546, List.547):
    joinpoint List.517 List.432 List.433 List.434 List.435 List.436:
        let List.519 : Int1 = CallByName Num.22 List.435 List.436;
        if List.519 then
            let List.528 : U8 = CallByName List.66 List.432 List.435;
            let List.520 : [C U64, C U64] = CallByName Test.3 List.433 List.528;
            let List.525 : U8 = 1i64;
            let List.526 : U8 = GetTagId List.520;
            let List.527 : Int1 = lowlevel Eq List.525 List.526;
            if List.527 then
                let List.437 : U64 = UnionAtIndex (Id 1) (Index 0) List.520;
                let List.523 : U64 = 1i64;
                let List.522 : U64 = CallByName Num.19 List.435 List.523;
                jump List.517 List.432 List.437 List.434 List.522 List.436;
            else
                let List.438 : U64 = UnionAtIndex (Id 0) (Index 0) List.520;
                let List.524 : [C U64, C U64] = TagId(0) List.438;
                ret List.524;
        else
            let List.518 : [C U64, C U64] = TagId(1) List.433;
            ret List.518;
    in
    jump List.517 List.543 List.544 List.545 List.546 List.547;

procedure List.91 (List.429, List.430, List.431):
    let List.515 : U64 = 0i64;
    let List.516 : U64 = CallByName List.6 List.429;
    let List.514 : [C U64, C U64] = CallByName List.80 List.429 List.430 List.431 List.515 List.516;
    ret List.514;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.258 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.258;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.259 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.259;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.257 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.257;

procedure Test.3 (Test.4, Test.12):
    let Test.13 : [C U64, C U64] = TagId(0) Test.4;
    ret Test.13;

procedure Test.0 (Test.1):
    let Test.10 : U64 = 0i64;
    let Test.11 : {} = Struct {};
    let Test.2 : U64 = CallByName List.26 Test.1 Test.10 Test.11;
    let Test.9 : U64 = 0i64;
    let Test.7 : Int1 = CallByName Bool.11 Test.2 Test.9;
    if Test.7 then
        ret Test.1;
    else
        let Test.6 : List U8 = CallByName List.29 Test.1 Test.2;
        ret Test.6;
