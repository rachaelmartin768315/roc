procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure List.107 (List.536, List.537, List.538):
    let List.640 : U64 = 0i64;
    let List.641 : U64 = CallByName List.6 List.536;
    let List.639 : [C U64, C U64] = CallByName List.80 List.536 List.537 List.538 List.640 List.641;
    ret List.639;

procedure List.26 (List.204, List.205, List.206):
    let List.633 : [C U64, C U64] = CallByName List.107 List.204 List.205 List.206;
    let List.636 : U8 = 1i64;
    let List.637 : U8 = GetTagId List.633;
    let List.638 : Int1 = lowlevel Eq List.636 List.637;
    if List.638 then
        let List.207 : U64 = UnionAtIndex (Id 1) (Index 0) List.633;
        ret List.207;
    else
        let List.208 : U64 = UnionAtIndex (Id 0) (Index 0) List.633;
        ret List.208;

procedure List.38 (List.392, List.393):
    let List.632 : U64 = CallByName List.6 List.392;
    let List.394 : U64 = CallByName Num.77 List.632 List.393;
    let List.622 : List U8 = CallByName List.43 List.392 List.394;
    ret List.622;

procedure List.43 (List.390, List.391):
    let List.630 : U64 = CallByName List.6 List.390;
    let List.629 : U64 = CallByName Num.77 List.630 List.391;
    let List.624 : {U64, U64} = Struct {List.391, List.629};
    let List.623 : List U8 = CallByName List.49 List.390 List.624;
    ret List.623;

procedure List.49 (List.468, List.469):
    let List.626 : U64 = StructAtIndex 1 List.469;
    let List.627 : U64 = StructAtIndex 0 List.469;
    let List.625 : List U8 = CallByName List.72 List.468 List.626 List.627;
    ret List.625;

procedure List.6 (#Attr.2):
    let List.631 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.631;

procedure List.66 (#Attr.2, #Attr.3):
    let List.654 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.654;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.628 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.628;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.642 List.539 List.540 List.541 List.542 List.543:
        let List.644 : Int1 = CallByName Num.22 List.542 List.543;
        if List.644 then
            let List.653 : U8 = CallByName List.66 List.539 List.542;
            let List.645 : [C U64, C U64] = CallByName Test.3 List.540 List.653;
            let List.650 : U8 = 1i64;
            let List.651 : U8 = GetTagId List.645;
            let List.652 : Int1 = lowlevel Eq List.650 List.651;
            if List.652 then
                let List.544 : U64 = UnionAtIndex (Id 1) (Index 0) List.645;
                let List.648 : U64 = 1i64;
                let List.647 : U64 = CallByName Num.51 List.542 List.648;
                jump List.642 List.539 List.544 List.541 List.647 List.543;
            else
                dec List.539;
                let List.545 : U64 = UnionAtIndex (Id 0) (Index 0) List.645;
                let List.649 : [C U64, C U64] = TagId(0) List.545;
                ret List.649;
        else
            dec List.539;
            let List.643 : [C U64, C U64] = TagId(1) List.540;
            ret List.643;
    in
    inc #Derived_gen.0;
    jump List.642 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.280 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.280;

procedure Test.3 (Test.4, Test.12):
    let Test.13 : [C U64, C U64] = TagId(0) Test.4;
    ret Test.13;

procedure Test.0 (Test.1):
    let Test.10 : U64 = 0i64;
    let Test.11 : {} = Struct {};
    let Test.2 : U64 = CallByName List.26 Test.1 Test.10 Test.11;
    let Test.9 : U64 = 0i64;
    let Test.7 : Int1 = CallByName Bool.11 Test.2 Test.9;
    if Test.7 then
        ret Test.1;
    else
        let Test.6 : List U8 = CallByName List.38 Test.1 Test.2;
        ret Test.6;
