procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure List.114 (List.567, List.568, List.569):
    let List.671 : U64 = 0i64;
    let List.672 : U64 = CallByName List.6 List.567;
    let List.670 : [C U64, C U64] = CallByName List.80 List.567 List.568 List.569 List.671 List.672;
    ret List.670;

procedure List.26 (List.211, List.212, List.213):
    let List.664 : [C U64, C U64] = CallByName List.114 List.211 List.212 List.213;
    let List.667 : U8 = 1i64;
    let List.668 : U8 = GetTagId List.664;
    let List.669 : Int1 = lowlevel Eq List.667 List.668;
    if List.669 then
        let List.214 : U64 = UnionAtIndex (Id 1) (Index 0) List.664;
        ret List.214;
    else
        let List.215 : U64 = UnionAtIndex (Id 0) (Index 0) List.664;
        ret List.215;

procedure List.38 (List.399, List.400):
    let List.663 : U64 = CallByName List.6 List.399;
    let List.401 : U64 = CallByName Num.77 List.663 List.400;
    let List.653 : List U8 = CallByName List.43 List.399 List.401;
    ret List.653;

procedure List.43 (List.397, List.398):
    let List.661 : U64 = CallByName List.6 List.397;
    let List.660 : U64 = CallByName Num.77 List.661 List.398;
    let List.655 : {U64, U64} = Struct {List.398, List.660};
    let List.654 : List U8 = CallByName List.49 List.397 List.655;
    ret List.654;

procedure List.49 (List.475, List.476):
    let List.657 : U64 = StructAtIndex 1 List.476;
    let List.658 : U64 = StructAtIndex 0 List.476;
    let List.656 : List U8 = CallByName List.72 List.475 List.657 List.658;
    ret List.656;

procedure List.6 (#Attr.2):
    let List.662 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.662;

procedure List.66 (#Attr.2, #Attr.3):
    let List.685 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.685;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.659 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.659;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.673 List.570 List.571 List.572 List.573 List.574:
        let List.675 : Int1 = CallByName Num.22 List.573 List.574;
        if List.675 then
            let List.684 : U8 = CallByName List.66 List.570 List.573;
            let List.676 : [C U64, C U64] = CallByName Test.3 List.571 List.684;
            let List.681 : U8 = 1i64;
            let List.682 : U8 = GetTagId List.676;
            let List.683 : Int1 = lowlevel Eq List.681 List.682;
            if List.683 then
                let List.575 : U64 = UnionAtIndex (Id 1) (Index 0) List.676;
                let List.679 : U64 = 1i64;
                let List.678 : U64 = CallByName Num.51 List.573 List.679;
                jump List.673 List.570 List.575 List.572 List.678 List.574;
            else
                dec List.570;
                let List.576 : U64 = UnionAtIndex (Id 0) (Index 0) List.676;
                let List.680 : [C U64, C U64] = TagId(0) List.576;
                ret List.680;
        else
            dec List.570;
            let List.674 : [C U64, C U64] = TagId(1) List.571;
            ret List.674;
    in
    inc #Derived_gen.0;
    jump List.673 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.282 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.282;

procedure Test.3 (Test.4, Test.12):
    let Test.13 : [C U64, C U64] = TagId(0) Test.4;
    ret Test.13;

procedure Test.0 (Test.1):
    let Test.10 : U64 = 0i64;
    let Test.11 : {} = Struct {};
    let Test.2 : U64 = CallByName List.26 Test.1 Test.10 Test.11;
    let Test.9 : U64 = 0i64;
    let Test.7 : Int1 = CallByName Bool.11 Test.2 Test.9;
    if Test.7 then
        ret Test.1;
    else
        let Test.6 : List U8 = CallByName List.38 Test.1 Test.2;
        ret Test.6;
