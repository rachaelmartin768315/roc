procedure Bool.1 ():
    let Bool.31 : Int1 = false;
    ret Bool.31;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.26 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.26;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.28 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.28;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.29 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.29;

procedure Bool.2 ():
    let Bool.30 : Int1 = true;
    ret Bool.30;

procedure Dict.1 (Dict.596):
    let Dict.607 : List {Str, I64} = Array [];
    let Dict.35 : List U64 = CallByName Dict.35;
    let Dict.34 : List I8 = CallByName Dict.34;
    let Dict.606 : {List {Str, I64}, List U64, List I8} = Struct {Dict.607, Dict.35, Dict.34};
    ret Dict.606;

procedure Dict.10 (Dict.597, Dict.136, Dict.137):
    let Dict.135 : List {Str, I64} = StructAtIndex 0 Dict.597;
    let #Derived_gen.62 : List U64 = StructAtIndex 1 Dict.597;
    dec #Derived_gen.62;
    let #Derived_gen.61 : List I8 = StructAtIndex 2 Dict.597;
    dec #Derived_gen.61;
    let Dict.1052 : {Str, Int1} = CallByName List.18 Dict.135 Dict.136 Dict.137;
    ret Dict.1052;

procedure Dict.110 (Dict.111, Dict.623):
    let Dict.112 : Str = StructAtIndex 0 Dict.623;
    let Dict.113 : I64 = StructAtIndex 1 Dict.623;
    let Dict.624 : {List {Str, I64}, List U64, List I8} = CallByName Dict.8 Dict.111 Dict.112 Dict.113;
    ret Dict.624;

procedure Dict.12 (Dict.108):
    let Dict.109 : U64 = CallByName List.6 Dict.108;
    let Dict.798 : U64 = 0i64;
    let Dict.619 : Int1 = CallByName Num.24 Dict.109 Dict.798;
    if Dict.619 then
        let Dict.621 : {List {Str, I64}, List U64, List I8} = CallByName Dict.19 Dict.109;
        let Dict.622 : {} = Struct {};
        let Dict.620 : {List {Str, I64}, List U64, List I8} = CallByName List.18 Dict.108 Dict.621 Dict.622;
        ret Dict.620;
    else
        dec Dict.108;
        let Dict.605 : {} = Struct {};
        let Dict.604 : {List {Str, I64}, List U64, List I8} = CallByName Dict.1 Dict.605;
        ret Dict.604;

procedure Dict.138 (Dict.139, Dict.1054, Dict.137):
    let Dict.140 : Str = StructAtIndex 0 Dict.1054;
    let Dict.141 : I64 = StructAtIndex 1 Dict.1054;
    let Dict.1056 : {Str, Int1} = CallByName Inspect.192 Dict.139 Dict.140 Dict.141 Dict.137;
    ret Dict.1056;

procedure Dict.19 (Dict.101):
    let Dict.797 : U64 = 0i64;
    let Dict.794 : Int1 = CallByName Bool.11 Dict.101 Dict.797;
    if Dict.794 then
        let Dict.796 : {} = Struct {};
        let Dict.795 : {List {Str, I64}, List U64, List I8} = CallByName Dict.1 Dict.796;
        ret Dict.795;
    else
        let Dict.792 : U64 = CallByName Num.133 Dict.101;
        let Dict.793 : U64 = 8i64;
        let Dict.790 : U64 = CallByName Num.21 Dict.792 Dict.793;
        let Dict.791 : U64 = 7i64;
        let Dict.782 : U64 = CallByName Num.39 Dict.790 Dict.791;
        let Dict.780 : U64 = CallByName Dict.36 Dict.782;
        let Dict.781 : U64 = 8i64;
        let Dict.779 : U64 = CallByName Num.160 Dict.780 Dict.781;
        let Dict.102 : U64 = CallByName Num.137 Dict.779;
        let Dict.774 : List {Str, I64} = CallByName List.68 Dict.102;
        let Dict.778 : U64 = 0i64;
        let Dict.775 : List U64 = CallByName List.11 Dict.778 Dict.102;
        let Dict.777 : I8 = CallByName Dict.46;
        let Dict.776 : List I8 = CallByName List.11 Dict.777 Dict.102;
        let Dict.773 : {List {Str, I64}, List U64, List I8} = Struct {Dict.774, Dict.775, Dict.776};
        ret Dict.773;

procedure Dict.22 (#Attr.2, #Attr.3):
    let Dict.629 : U64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    dec #Attr.2;
    ret Dict.629;

procedure Dict.22 (#Attr.2, #Attr.3):
    let Dict.652 : I8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    dec #Attr.2;
    ret Dict.652;

procedure Dict.22 (#Attr.2, #Attr.3):
    let Dict.720 : {Str, I64} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    inc Dict.720;
    dec #Attr.2;
    ret Dict.720;

procedure Dict.22 (#Attr.2, #Attr.3):
    let Dict.852 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    dec #Attr.2;
    ret Dict.852;

procedure Dict.23 (#Attr.2):
    let Dict.714 : U64 = lowlevel DictPseudoSeed #Attr.2;
    ret Dict.714;

procedure Dict.33 (Dict.98):
    let Dict.1044 : {List {Str, I64}, List U64, List I8} = CallByName Inspect.30 Dict.98;
    ret Dict.1044;

procedure Dict.34 ():
    let Dict.609 : I8 = CallByName Dict.46;
    let Dict.610 : I8 = CallByName Dict.46;
    let Dict.611 : I8 = CallByName Dict.46;
    let Dict.612 : I8 = CallByName Dict.46;
    let Dict.613 : I8 = CallByName Dict.46;
    let Dict.614 : I8 = CallByName Dict.46;
    let Dict.615 : I8 = CallByName Dict.46;
    let Dict.616 : I8 = CallByName Dict.46;
    let Dict.608 : List I8 = Array [Dict.609, Dict.610, Dict.611, Dict.612, Dict.613, Dict.614, Dict.615, Dict.616];
    ret Dict.608;

procedure Dict.35 ():
    let Dict.618 : List U64 = Array [0i64, 0i64, 0i64, 0i64, 0i64, 0i64, 0i64, 0i64];
    ret Dict.618;

procedure Dict.36 (Dict.103):
    let Dict.784 : U64 = 1i64;
    let Dict.786 : U8 = 64i64;
    let Dict.789 : U64 = 1i64;
    let Dict.788 : U64 = CallByName Num.20 Dict.103 Dict.789;
    let Dict.787 : U8 = CallByName Num.152 Dict.788;
    let Dict.785 : U8 = CallByName Num.20 Dict.786 Dict.787;
    let Dict.783 : U64 = CallByName Num.72 Dict.784 Dict.785;
    ret Dict.783;

procedure Dict.39 (Dict.594, Dict.257, Dict.258, Dict.259, Dict.260):
    let Dict.256 : List {Str, I64} = StructAtIndex 0 Dict.594;
    let Dict.255 : List U64 = StructAtIndex 1 Dict.594;
    let Dict.254 : List I8 = StructAtIndex 2 Dict.594;
    inc Dict.254;
    let Dict.662 : U64 = CallByName List.6 Dict.254;
    let Dict.657 : U64 = CallByName Dict.51 Dict.662;
    let Dict.261 : {U64, U64, U64} = CallByName Dict.48 Dict.259 Dict.657;
    let Dict.635 : U64 = 0i64;
    let Dict.262 : U64 = CallByName Dict.40 Dict.254 Dict.261 Dict.635;
    let Dict.263 : U64 = CallByName List.6 Dict.256;
    let Dict.634 : {Str, I64} = Struct {Dict.257, Dict.258};
    let Dict.264 : List {Str, I64} = CallByName List.4 Dict.256 Dict.634;
    let Dict.632 : List U64 = CallByName List.3 Dict.255 Dict.262 Dict.263;
    let Dict.633 : List I8 = CallByName List.3 Dict.254 Dict.262 Dict.260;
    let Dict.631 : {List {Str, I64}, List U64, List I8} = Struct {Dict.264, Dict.632, Dict.633};
    ret Dict.631;

procedure Dict.40 (#Derived_gen.8, #Derived_gen.9, #Derived_gen.10):
    joinpoint Dict.636 Dict.265 Dict.266 Dict.267:
        let Dict.654 : U64 = StructAtIndex 2 Dict.266;
        let Dict.653 : U64 = CallByName Dict.50 Dict.654;
        let Dict.268 : U64 = CallByName Num.51 Dict.653 Dict.267;
        inc Dict.265;
        let Dict.269 : I8 = CallByName Dict.22 Dict.265 Dict.268;
        let Dict.651 : I8 = 0i64;
        let Dict.649 : Int1 = CallByName Num.22 Dict.269 Dict.651;
        if Dict.649 then
            dec Dict.265;
            ret Dict.268;
        else
            let Dict.648 : U64 = 7i64;
            let Dict.640 : Int1 = CallByName Bool.11 Dict.267 Dict.648;
            if Dict.640 then
                let Dict.642 : {U64, U64, U64} = CallByName Dict.49 Dict.266;
                let Dict.643 : U64 = 0i64;
                jump Dict.636 Dict.265 Dict.642 Dict.643;
            else
                let Dict.639 : U64 = 1i64;
                let Dict.638 : U64 = CallByName Num.51 Dict.267 Dict.639;
                jump Dict.636 Dict.265 Dict.266 Dict.638;
    in
    jump Dict.636 #Derived_gen.8 #Derived_gen.9 #Derived_gen.10;

procedure Dict.41 (#Derived_gen.37, #Derived_gen.38, #Derived_gen.39, #Derived_gen.40, #Derived_gen.41, #Derived_gen.42, #Derived_gen.43):
    joinpoint Dict.741 Dict.270 Dict.271 Dict.272 Dict.273 Dict.274 Dict.275 Dict.276:
        let Dict.767 : U64 = StructAtIndex 2 Dict.275;
        let Dict.766 : U64 = CallByName Dict.50 Dict.767;
        let Dict.277 : U64 = CallByName Num.51 Dict.766 Dict.276;
        inc Dict.270;
        let Dict.278 : I8 = CallByName Dict.22 Dict.270 Dict.277;
        let Dict.765 : I8 = CallByName Dict.46;
        let Dict.762 : Int1 = CallByName Bool.11 Dict.278 Dict.765;
        if Dict.762 then
            dec Dict.270;
            dec Dict.272;
            dec Dict.271;
            dec Dict.274;
            let Dict.764 : {} = Struct {};
            let Dict.763 : [C {}, C U64] = TagId(0) Dict.764;
            ret Dict.763;
        else
            let Dict.750 : Int1 = CallByName Bool.11 Dict.278 Dict.273;
            if Dict.750 then
                inc Dict.271;
                let Dict.281 : U64 = CallByName Dict.22 Dict.271 Dict.277;
                inc Dict.272;
                let Dict.761 : {Str, I64} = CallByName Dict.22 Dict.272 Dict.281;
                let Dict.282 : Str = StructAtIndex 0 Dict.761;
                let Dict.759 : Int1 = CallByName Bool.11 Dict.282 Dict.274;
                dec Dict.282;
                if Dict.759 then
                    dec Dict.270;
                    dec Dict.272;
                    dec Dict.271;
                    dec Dict.274;
                    let Dict.760 : [C {}, C U64] = TagId(1) Dict.277;
                    ret Dict.760;
                else
                    let Dict.758 : U64 = 7i64;
                    let Dict.754 : Int1 = CallByName Bool.11 Dict.276 Dict.758;
                    if Dict.754 then
                        let Dict.756 : {U64, U64, U64} = CallByName Dict.49 Dict.275;
                        let Dict.757 : U64 = 0i64;
                        jump Dict.741 Dict.270 Dict.271 Dict.272 Dict.273 Dict.274 Dict.756 Dict.757;
                    else
                        let Dict.753 : U64 = 1i64;
                        let Dict.752 : U64 = CallByName Num.51 Dict.276 Dict.753;
                        jump Dict.741 Dict.270 Dict.271 Dict.272 Dict.273 Dict.274 Dict.275 Dict.752;
            else
                let Dict.749 : U64 = 7i64;
                let Dict.745 : Int1 = CallByName Bool.11 Dict.276 Dict.749;
                if Dict.745 then
                    let Dict.747 : {U64, U64, U64} = CallByName Dict.49 Dict.275;
                    let Dict.748 : U64 = 0i64;
                    jump Dict.741 Dict.270 Dict.271 Dict.272 Dict.273 Dict.274 Dict.747 Dict.748;
                else
                    let Dict.744 : U64 = 1i64;
                    let Dict.743 : U64 = CallByName Num.51 Dict.276 Dict.744;
                    jump Dict.741 Dict.270 Dict.271 Dict.272 Dict.273 Dict.274 Dict.275 Dict.743;
    in
    jump Dict.741 #Derived_gen.37 #Derived_gen.38 #Derived_gen.39 #Derived_gen.40 #Derived_gen.41 #Derived_gen.42 #Derived_gen.43;

procedure Dict.42 (Dict.591):
    let Dict.286 : List {Str, I64} = StructAtIndex 0 Dict.591;
    let Dict.285 : List U64 = StructAtIndex 1 Dict.591;
    let Dict.284 : List I8 = StructAtIndex 2 Dict.591;
    let Dict.287 : U64 = CallByName List.6 Dict.285;
    let Dict.736 : U8 = 3i64;
    let Dict.735 : U64 = CallByName Num.74 Dict.287 Dict.736;
    let Dict.288 : U64 = CallByName Num.75 Dict.287 Dict.735;
    let Dict.733 : U64 = CallByName List.6 Dict.286;
    let Dict.734 : U64 = 1i64;
    let Dict.732 : U64 = CallByName Num.19 Dict.733 Dict.734;
    let Dict.667 : Int1 = CallByName Num.24 Dict.732 Dict.288;
    if Dict.667 then
        let Dict.669 : {List {Str, I64}, List U64, List I8} = Struct {Dict.286, Dict.285, Dict.284};
        let Dict.668 : {List {Str, I64}, List U64, List I8} = CallByName Dict.43 Dict.669;
        ret Dict.668;
    else
        let Dict.666 : {List {Str, I64}, List U64, List I8} = Struct {Dict.286, Dict.285, Dict.284};
        ret Dict.666;

procedure Dict.43 (Dict.592):
    let Dict.291 : List {Str, I64} = StructAtIndex 0 Dict.592;
    inc Dict.291;
    let Dict.290 : List U64 = StructAtIndex 1 Dict.592;
    let Dict.289 : List I8 = StructAtIndex 2 Dict.592;
    let Dict.730 : U64 = 2i64;
    let Dict.731 : U64 = CallByName List.6 Dict.290;
    let Dict.292 : U64 = CallByName Num.21 Dict.730 Dict.731;
    let Dict.729 : U64 = 0i64;
    let Dict.726 : List U64 = CallByName List.11 Dict.729 Dict.292;
    let Dict.728 : I8 = CallByName Dict.46;
    let Dict.727 : List I8 = CallByName List.11 Dict.728 Dict.292;
    let Dict.293 : {List {Str, I64}, List U64, List I8} = Struct {Dict.291, Dict.726, Dict.727};
    let Dict.671 : U64 = 0i64;
    let Dict.670 : {List {Str, I64}, List U64, List I8} = CallByName Dict.44 Dict.293 Dict.289 Dict.290 Dict.291 Dict.671;
    ret Dict.670;

procedure Dict.44 (#Derived_gen.18, #Derived_gen.19, #Derived_gen.20, #Derived_gen.21, #Derived_gen.22):
    joinpoint Dict.672 Dict.294 Dict.295 Dict.296 Dict.297 Dict.298:
        inc Dict.295;
        let Dict.673 : [C {}, C I8] = CallByName List.2 Dict.295 Dict.298;
        let Dict.723 : U8 = 1i64;
        let Dict.724 : U8 = GetTagId Dict.673;
        let Dict.725 : Int1 = lowlevel Eq Dict.723 Dict.724;
        if Dict.725 then
            let Dict.299 : I8 = UnionAtIndex (Id 1) (Index 0) Dict.673;
            joinpoint Dict.678 Dict.300:
                let Dict.676 : U64 = 1i64;
                let Dict.675 : U64 = CallByName Num.51 Dict.298 Dict.676;
                jump Dict.672 Dict.300 Dict.295 Dict.296 Dict.297 Dict.675;
            in
            let Dict.721 : I8 = 0i64;
            let Dict.679 : Int1 = CallByName Num.25 Dict.299 Dict.721;
            if Dict.679 then
                inc Dict.296;
                let Dict.301 : U64 = CallByName Dict.22 Dict.296 Dict.298;
                inc Dict.297;
                let Dict.719 : {Str, I64} = CallByName Dict.22 Dict.297 Dict.301;
                let Dict.302 : Str = StructAtIndex 0 Dict.719;
                let Dict.677 : {List {Str, I64}, List U64, List I8} = CallByName Dict.45 Dict.294 Dict.302 Dict.301;
                jump Dict.678 Dict.677;
            else
                jump Dict.678 Dict.294;
        else
            dec Dict.295;
            dec Dict.296;
            dec Dict.297;
            ret Dict.294;
    in
    jump Dict.672 #Derived_gen.18 #Derived_gen.19 #Derived_gen.20 #Derived_gen.21 #Derived_gen.22;

procedure Dict.45 (Dict.593, Dict.306, Dict.307):
    let Dict.305 : List {Str, I64} = StructAtIndex 0 Dict.593;
    let Dict.304 : List U64 = StructAtIndex 1 Dict.593;
    let Dict.303 : List I8 = StructAtIndex 2 Dict.593;
    inc Dict.303;
    let Dict.694 : [C , C U64] = TagId(0) ;
    let Dict.693 : {U64, U64} = CallByName Dict.54 Dict.694;
    let Dict.691 : {U64, U64} = CallByName Hash.19 Dict.693 Dict.306;
    let Dict.308 : U64 = CallByName Dict.57 Dict.691;
    let Dict.309 : U64 = CallByName Dict.52 Dict.308;
    let Dict.310 : I8 = CallByName Dict.53 Dict.308;
    let Dict.685 : U64 = CallByName List.6 Dict.303;
    let Dict.684 : U64 = CallByName Dict.51 Dict.685;
    let Dict.311 : {U64, U64, U64} = CallByName Dict.48 Dict.309 Dict.684;
    let Dict.683 : U64 = 0i64;
    let Dict.312 : U64 = CallByName Dict.40 Dict.303 Dict.311 Dict.683;
    let Dict.681 : List U64 = CallByName List.3 Dict.304 Dict.312 Dict.307;
    let Dict.682 : List I8 = CallByName List.3 Dict.303 Dict.312 Dict.310;
    let Dict.680 : {List {Str, I64}, List U64, List I8} = Struct {Dict.305, Dict.681, Dict.682};
    ret Dict.680;

procedure Dict.46 ():
    let Dict.617 : I8 = -128i64;
    ret Dict.617;

procedure Dict.48 (Dict.314, Dict.315):
    let Dict.661 : U64 = 1i64;
    let Dict.316 : U64 = CallByName Num.77 Dict.315 Dict.661;
    let Dict.660 : U64 = CallByName Num.137 Dict.314;
    let Dict.317 : U64 = CallByName Num.69 Dict.660 Dict.316;
    let Dict.659 : U64 = 1i64;
    let Dict.658 : {U64, U64, U64} = Struct {Dict.316, Dict.659, Dict.317};
    ret Dict.658;

procedure Dict.49 (Dict.601):
    let Dict.320 : U64 = StructAtIndex 0 Dict.601;
    let Dict.319 : U64 = StructAtIndex 1 Dict.601;
    let Dict.318 : U64 = StructAtIndex 2 Dict.601;
    let Dict.647 : U64 = CallByName Num.51 Dict.318 Dict.319;
    let Dict.321 : U64 = CallByName Num.69 Dict.647 Dict.320;
    let Dict.646 : U64 = 1i64;
    let Dict.645 : U64 = CallByName Num.51 Dict.319 Dict.646;
    let Dict.644 : {U64, U64, U64} = Struct {Dict.320, Dict.645, Dict.321};
    ret Dict.644;

procedure Dict.50 (Dict.322):
    let Dict.656 : U8 = 3i64;
    let Dict.655 : U64 = CallByName Num.72 Dict.322 Dict.656;
    ret Dict.655;

procedure Dict.51 (Dict.323):
    let Dict.664 : U8 = 3i64;
    let Dict.663 : U64 = CallByName Num.74 Dict.323 Dict.664;
    ret Dict.663;

procedure Dict.52 (Dict.324):
    let Dict.690 : U8 = 7i64;
    let Dict.689 : U64 = CallByName Num.74 Dict.324 Dict.690;
    ret Dict.689;

procedure Dict.53 (Dict.325):
    let Dict.688 : U64 = 127i64;
    let Dict.687 : U64 = CallByName Num.69 Dict.325 Dict.688;
    let Dict.686 : I8 = CallByName Num.117 Dict.687;
    ret Dict.686;

procedure Dict.54 (Dict.326):
    joinpoint Dict.711 Dict.327:
        let Dict.696 : U64 = CallByName Dict.56 Dict.327;
        let Dict.695 : {U64, U64} = Struct {Dict.696, Dict.327};
        ret Dict.695;
    in
    let Dict.716 : U8 = 0i64;
    let Dict.717 : U8 = GetTagId Dict.326;
    let Dict.718 : Int1 = lowlevel Eq Dict.716 Dict.717;
    if Dict.718 then
        let Dict.713 : {} = Struct {};
        let Dict.712 : U64 = CallByName Dict.23 Dict.713;
        jump Dict.711 Dict.712;
    else
        let Dict.328 : U64 = UnionAtIndex (Id 1) (Index 0) Dict.326;
        jump Dict.711 Dict.328;

procedure Dict.55 (Dict.580, Dict.581):
    let Dict.331 : U64 = StructAtIndex 0 Dict.581;
    let Dict.332 : U64 = StructAtIndex 1 Dict.581;
    let Dict.334 : U64 = StructAtIndex 2 Dict.581;
    let Dict.333 : U64 = StructAtIndex 3 Dict.581;
    let Dict.329 : U64 = StructAtIndex 0 Dict.580;
    let Dict.330 : U64 = StructAtIndex 1 Dict.580;
    let Dict.820 : U64 = CallByName Dict.67;
    let Dict.818 : U64 = CallByName Num.70 Dict.331 Dict.820;
    let Dict.819 : U64 = CallByName Num.70 Dict.332 Dict.333;
    let Dict.335 : {U64, U64} = CallByName Dict.71 Dict.818 Dict.819;
    let Dict.815 : U64 = StructAtIndex 0 Dict.335;
    let Dict.816 : U64 = CallByName Dict.66;
    let Dict.814 : U64 = CallByName Num.70 Dict.815 Dict.816;
    let Dict.336 : U64 = CallByName Num.70 Dict.814 Dict.334;
    let Dict.811 : U64 = StructAtIndex 1 Dict.335;
    let Dict.812 : U64 = CallByName Dict.67;
    let Dict.337 : U64 = CallByName Num.70 Dict.811 Dict.812;
    let Dict.338 : U64 = CallByName Dict.70 Dict.336 Dict.337;
    let Dict.803 : U64 = CallByName Dict.70 Dict.330 Dict.338;
    let Dict.802 : {U64, U64} = Struct {Dict.329, Dict.803};
    ret Dict.802;

procedure Dict.56 (Dict.339):
    let Dict.709 : U64 = CallByName Dict.66;
    let Dict.699 : U64 = CallByName Num.70 Dict.339 Dict.709;
    let Dict.700 : U64 = CallByName Dict.67;
    let Dict.698 : U64 = CallByName Dict.70 Dict.699 Dict.700;
    let Dict.697 : U64 = CallByName Num.70 Dict.698 Dict.339;
    ret Dict.697;

procedure Dict.57 (Dict.600):
    let Dict.340 : U64 = StructAtIndex 1 Dict.600;
    ret Dict.340;

procedure Dict.63 (Dict.574, Dict.379):
    let Dict.377 : U64 = StructAtIndex 0 Dict.574;
    let Dict.378 : U64 = StructAtIndex 1 Dict.574;
    let Dict.380 : U64 = CallByName List.6 Dict.379;
    joinpoint Dict.1009 Dict.381:
        let Dict.1002 : {U64, U64} = Struct {Dict.377, Dict.378};
        let Dict.1004 : U64 = StructAtIndex 0 Dict.381;
        let Dict.1005 : U64 = StructAtIndex 1 Dict.381;
        let Dict.1006 : U64 = CallByName Num.133 Dict.380;
        let Dict.1007 : U64 = StructAtIndex 2 Dict.381;
        let Dict.1003 : {U64, U64, U64, U64} = Struct {Dict.1004, Dict.1005, Dict.1006, Dict.1007};
        let Dict.1001 : {U64, U64} = CallByName Dict.55 Dict.1002 Dict.1003;
        ret Dict.1001;
    in
    let Dict.1043 : U64 = 16i64;
    let Dict.1014 : Int1 = CallByName Num.23 Dict.380 Dict.1043;
    if Dict.1014 then
        joinpoint Dict.1016 Dict.1008:
            jump Dict.1009 Dict.1008;
        in
        let Dict.1042 : U64 = 4i64;
        let Dict.1024 : Int1 = CallByName Num.25 Dict.380 Dict.1042;
        if Dict.1024 then
            let Dict.1041 : U8 = 3i64;
            let Dict.1039 : U64 = CallByName Num.74 Dict.380 Dict.1041;
            let Dict.1040 : U8 = 2i64;
            let Dict.382 : U64 = CallByName Num.72 Dict.1039 Dict.1040;
            let Dict.1038 : U64 = 0i64;
            inc 3 Dict.379;
            let Dict.1036 : U64 = CallByName Dict.73 Dict.379 Dict.1038;
            let Dict.1037 : U8 = 32i64;
            let Dict.1034 : U64 = CallByName Num.72 Dict.1036 Dict.1037;
            let Dict.1035 : U64 = CallByName Dict.73 Dict.379 Dict.382;
            let Dict.383 : U64 = CallByName Num.71 Dict.1034 Dict.1035;
            let Dict.1033 : U64 = 4i64;
            let Dict.1032 : U64 = CallByName Num.75 Dict.380 Dict.1033;
            let Dict.1030 : U64 = CallByName Dict.73 Dict.379 Dict.1032;
            let Dict.1031 : U8 = 32i64;
            let Dict.1025 : U64 = CallByName Num.72 Dict.1030 Dict.1031;
            let Dict.1029 : U64 = 4i64;
            let Dict.1028 : U64 = CallByName Num.75 Dict.380 Dict.1029;
            let Dict.1027 : U64 = CallByName Num.75 Dict.1028 Dict.382;
            let Dict.1026 : U64 = CallByName Dict.73 Dict.379 Dict.1027;
            let Dict.384 : U64 = CallByName Num.71 Dict.1025 Dict.1026;
            let Dict.1015 : {U64, U64, U64} = Struct {Dict.383, Dict.384, Dict.377};
            jump Dict.1016 Dict.1015;
        else
            let Dict.1023 : U64 = 0i64;
            let Dict.1019 : Int1 = CallByName Num.24 Dict.380 Dict.1023;
            if Dict.1019 then
                let Dict.1022 : U64 = 0i64;
                let Dict.1020 : U64 = CallByName Dict.74 Dict.379 Dict.1022 Dict.380;
                let Dict.1021 : U64 = 0i64;
                let Dict.1015 : {U64, U64, U64} = Struct {Dict.1020, Dict.1021, Dict.377};
                jump Dict.1016 Dict.1015;
            else
                dec Dict.379;
                let Dict.1017 : U64 = 0i64;
                let Dict.1018 : U64 = 0i64;
                let Dict.1015 : {U64, U64, U64} = Struct {Dict.1017, Dict.1018, Dict.377};
                jump Dict.1016 Dict.1015;
    else
        let Dict.1013 : U64 = 48i64;
        let Dict.1011 : Int1 = CallByName Num.23 Dict.380 Dict.1013;
        if Dict.1011 then
            let Dict.1012 : U64 = 0i64;
            let Dict.1008 : {U64, U64, U64} = CallByName Dict.65 Dict.377 Dict.379 Dict.1012 Dict.380;
            jump Dict.1009 Dict.1008;
        else
            let Dict.1010 : U64 = 0i64;
            let Dict.1008 : {U64, U64, U64} = CallByName Dict.64 Dict.377 Dict.377 Dict.377 Dict.379 Dict.1010 Dict.380;
            jump Dict.1009 Dict.1008;

procedure Dict.64 (#Derived_gen.44, #Derived_gen.45, #Derived_gen.46, #Derived_gen.47, #Derived_gen.48, #Derived_gen.49):
    joinpoint Dict.828 Dict.385 Dict.386 Dict.387 Dict.388 Dict.389 Dict.390:
        inc 6 Dict.388;
        let Dict.935 : U64 = CallByName Dict.72 Dict.388 Dict.389;
        let Dict.936 : U64 = CallByName Dict.67;
        let Dict.930 : U64 = CallByName Num.70 Dict.935 Dict.936;
        let Dict.934 : U64 = 8i64;
        let Dict.933 : U64 = CallByName Num.51 Dict.389 Dict.934;
        let Dict.932 : U64 = CallByName Dict.72 Dict.388 Dict.933;
        let Dict.931 : U64 = CallByName Num.70 Dict.932 Dict.385;
        let Dict.391 : U64 = CallByName Dict.70 Dict.930 Dict.931;
        let Dict.929 : U64 = 16i64;
        let Dict.928 : U64 = CallByName Num.51 Dict.389 Dict.929;
        let Dict.925 : U64 = CallByName Dict.72 Dict.388 Dict.928;
        let Dict.926 : U64 = CallByName Dict.68;
        let Dict.920 : U64 = CallByName Num.70 Dict.925 Dict.926;
        let Dict.924 : U64 = 24i64;
        let Dict.923 : U64 = CallByName Num.51 Dict.389 Dict.924;
        let Dict.922 : U64 = CallByName Dict.72 Dict.388 Dict.923;
        let Dict.921 : U64 = CallByName Num.70 Dict.922 Dict.386;
        let Dict.392 : U64 = CallByName Dict.70 Dict.920 Dict.921;
        let Dict.919 : U64 = 32i64;
        let Dict.918 : U64 = CallByName Num.51 Dict.389 Dict.919;
        let Dict.915 : U64 = CallByName Dict.72 Dict.388 Dict.918;
        let Dict.916 : U64 = CallByName Dict.69;
        let Dict.910 : U64 = CallByName Num.70 Dict.915 Dict.916;
        let Dict.914 : U64 = 40i64;
        let Dict.913 : U64 = CallByName Num.51 Dict.389 Dict.914;
        let Dict.912 : U64 = CallByName Dict.72 Dict.388 Dict.913;
        let Dict.911 : U64 = CallByName Num.70 Dict.912 Dict.387;
        let Dict.393 : U64 = CallByName Dict.70 Dict.910 Dict.911;
        let Dict.909 : U64 = 48i64;
        let Dict.394 : U64 = CallByName Num.75 Dict.390 Dict.909;
        let Dict.908 : U64 = 48i64;
        let Dict.395 : U64 = CallByName Num.51 Dict.389 Dict.908;
        let Dict.907 : U64 = 48i64;
        let Dict.905 : Int1 = CallByName Num.24 Dict.394 Dict.907;
        if Dict.905 then
            jump Dict.828 Dict.391 Dict.392 Dict.393 Dict.388 Dict.395 Dict.394;
        else
            let Dict.904 : U64 = 16i64;
            let Dict.879 : Int1 = CallByName Num.24 Dict.394 Dict.904;
            if Dict.879 then
                let Dict.903 : U64 = CallByName Num.70 Dict.392 Dict.391;
                let Dict.396 : U64 = CallByName Num.70 Dict.393 Dict.903;
                let Dict.880 : {U64, U64, U64} = CallByName Dict.65 Dict.396 Dict.388 Dict.395 Dict.394;
                ret Dict.880;
            else
                inc Dict.388;
                let Dict.878 : U64 = CallByName Num.70 Dict.392 Dict.391;
                let Dict.397 : U64 = CallByName Num.70 Dict.393 Dict.878;
                let Dict.877 : U64 = 16i64;
                let Dict.876 : U64 = CallByName Num.75 Dict.394 Dict.877;
                let Dict.875 : U64 = CallByName Num.51 Dict.876 Dict.395;
                let Dict.830 : U64 = CallByName Dict.72 Dict.388 Dict.875;
                let Dict.874 : U64 = 8i64;
                let Dict.873 : U64 = CallByName Num.75 Dict.394 Dict.874;
                let Dict.832 : U64 = CallByName Num.51 Dict.873 Dict.395;
                let Dict.831 : U64 = CallByName Dict.72 Dict.388 Dict.832;
                let Dict.829 : {U64, U64, U64} = Struct {Dict.830, Dict.831, Dict.397};
                ret Dict.829;
    in
    jump Dict.828 #Derived_gen.44 #Derived_gen.45 #Derived_gen.46 #Derived_gen.47 #Derived_gen.48 #Derived_gen.49;

procedure Dict.65 (#Derived_gen.14, #Derived_gen.15, #Derived_gen.16, #Derived_gen.17):
    joinpoint Dict.881 Dict.398 Dict.399 Dict.400 Dict.401:
        inc 2 Dict.399;
        let Dict.901 : U64 = CallByName Dict.72 Dict.399 Dict.400;
        let Dict.902 : U64 = CallByName Dict.67;
        let Dict.896 : U64 = CallByName Num.70 Dict.901 Dict.902;
        let Dict.900 : U64 = 8i64;
        let Dict.899 : U64 = CallByName Num.51 Dict.400 Dict.900;
        let Dict.898 : U64 = CallByName Dict.72 Dict.399 Dict.899;
        let Dict.897 : U64 = CallByName Num.70 Dict.898 Dict.398;
        let Dict.402 : U64 = CallByName Dict.70 Dict.896 Dict.897;
        let Dict.895 : U64 = 16i64;
        let Dict.403 : U64 = CallByName Num.75 Dict.401 Dict.895;
        let Dict.894 : U64 = 16i64;
        let Dict.404 : U64 = CallByName Num.51 Dict.400 Dict.894;
        let Dict.893 : U64 = 16i64;
        let Dict.883 : Int1 = CallByName Num.23 Dict.403 Dict.893;
        if Dict.883 then
            inc Dict.399;
            let Dict.892 : U64 = 16i64;
            let Dict.891 : U64 = CallByName Num.75 Dict.403 Dict.892;
            let Dict.890 : U64 = CallByName Num.51 Dict.891 Dict.404;
            let Dict.885 : U64 = CallByName Dict.72 Dict.399 Dict.890;
            let Dict.889 : U64 = 8i64;
            let Dict.888 : U64 = CallByName Num.75 Dict.403 Dict.889;
            let Dict.887 : U64 = CallByName Num.51 Dict.888 Dict.404;
            let Dict.886 : U64 = CallByName Dict.72 Dict.399 Dict.887;
            let Dict.884 : {U64, U64, U64} = Struct {Dict.885, Dict.886, Dict.402};
            ret Dict.884;
        else
            jump Dict.881 Dict.402 Dict.399 Dict.404 Dict.403;
    in
    jump Dict.881 #Derived_gen.14 #Derived_gen.15 #Derived_gen.16 #Derived_gen.17;

procedure Dict.66 ():
    let Dict.817 : U64 = 11562461410679940143i64;
    ret Dict.817;

procedure Dict.67 ():
    let Dict.813 : U64 = 16646288086500911323i64;
    ret Dict.813;

procedure Dict.68 ():
    let Dict.927 : U64 = 10285213230658275043i64;
    ret Dict.927;

procedure Dict.69 ():
    let Dict.917 : U64 = 6384245875588680899i64;
    ret Dict.917;

procedure Dict.70 (Dict.405, Dict.406):
    let Dict.805 : {U64, U64} = CallByName Dict.71 Dict.405 Dict.406;
    let Dict.407 : U64 = StructAtIndex 0 Dict.805;
    let Dict.408 : U64 = StructAtIndex 1 Dict.805;
    let Dict.804 : U64 = CallByName Num.70 Dict.407 Dict.408;
    ret Dict.804;

procedure Dict.71 (Dict.409, Dict.410):
    let Dict.809 : U128 = CallByName Num.135 Dict.409;
    let Dict.810 : U128 = CallByName Num.135 Dict.410;
    let Dict.411 : U128 = CallByName Num.21 Dict.809 Dict.810;
    let Dict.412 : U64 = CallByName Num.133 Dict.411;
    let Dict.808 : U8 = 64i64;
    let Dict.807 : U128 = CallByName Num.74 Dict.411 Dict.808;
    let Dict.413 : U64 = CallByName Num.133 Dict.807;
    let Dict.806 : {U64, U64} = Struct {Dict.412, Dict.413};
    ret Dict.806;

procedure Dict.72 (Dict.414, Dict.415):
    inc 7 Dict.414;
    let Dict.872 : U8 = CallByName Dict.22 Dict.414 Dict.415;
    let Dict.416 : U64 = CallByName Num.133 Dict.872;
    let Dict.871 : U64 = 1i64;
    let Dict.870 : U64 = CallByName Num.51 Dict.415 Dict.871;
    let Dict.869 : U8 = CallByName Dict.22 Dict.414 Dict.870;
    let Dict.417 : U64 = CallByName Num.133 Dict.869;
    let Dict.868 : U64 = 2i64;
    let Dict.867 : U64 = CallByName Num.51 Dict.415 Dict.868;
    let Dict.866 : U8 = CallByName Dict.22 Dict.414 Dict.867;
    let Dict.418 : U64 = CallByName Num.133 Dict.866;
    let Dict.865 : U64 = 3i64;
    let Dict.864 : U64 = CallByName Num.51 Dict.415 Dict.865;
    let Dict.863 : U8 = CallByName Dict.22 Dict.414 Dict.864;
    let Dict.419 : U64 = CallByName Num.133 Dict.863;
    let Dict.862 : U64 = 4i64;
    let Dict.861 : U64 = CallByName Num.51 Dict.415 Dict.862;
    let Dict.860 : U8 = CallByName Dict.22 Dict.414 Dict.861;
    let Dict.420 : U64 = CallByName Num.133 Dict.860;
    let Dict.859 : U64 = 5i64;
    let Dict.858 : U64 = CallByName Num.51 Dict.415 Dict.859;
    let Dict.857 : U8 = CallByName Dict.22 Dict.414 Dict.858;
    let Dict.421 : U64 = CallByName Num.133 Dict.857;
    let Dict.856 : U64 = 6i64;
    let Dict.855 : U64 = CallByName Num.51 Dict.415 Dict.856;
    let Dict.854 : U8 = CallByName Dict.22 Dict.414 Dict.855;
    let Dict.422 : U64 = CallByName Num.133 Dict.854;
    let Dict.853 : U64 = 7i64;
    let Dict.851 : U64 = CallByName Num.51 Dict.415 Dict.853;
    let Dict.850 : U8 = CallByName Dict.22 Dict.414 Dict.851;
    let Dict.423 : U64 = CallByName Num.133 Dict.850;
    let Dict.849 : U8 = 8i64;
    let Dict.848 : U64 = CallByName Num.72 Dict.417 Dict.849;
    let Dict.424 : U64 = CallByName Num.71 Dict.416 Dict.848;
    let Dict.847 : U8 = 16i64;
    let Dict.844 : U64 = CallByName Num.72 Dict.418 Dict.847;
    let Dict.846 : U8 = 24i64;
    let Dict.845 : U64 = CallByName Num.72 Dict.419 Dict.846;
    let Dict.425 : U64 = CallByName Num.71 Dict.844 Dict.845;
    let Dict.843 : U8 = 32i64;
    let Dict.840 : U64 = CallByName Num.72 Dict.420 Dict.843;
    let Dict.842 : U8 = 40i64;
    let Dict.841 : U64 = CallByName Num.72 Dict.421 Dict.842;
    let Dict.426 : U64 = CallByName Num.71 Dict.840 Dict.841;
    let Dict.839 : U8 = 48i64;
    let Dict.836 : U64 = CallByName Num.72 Dict.422 Dict.839;
    let Dict.838 : U8 = 56i64;
    let Dict.837 : U64 = CallByName Num.72 Dict.423 Dict.838;
    let Dict.427 : U64 = CallByName Num.71 Dict.836 Dict.837;
    let Dict.834 : U64 = CallByName Num.71 Dict.424 Dict.425;
    let Dict.835 : U64 = CallByName Num.71 Dict.426 Dict.427;
    let Dict.833 : U64 = CallByName Num.71 Dict.834 Dict.835;
    ret Dict.833;

procedure Dict.73 (Dict.428, Dict.429):
    inc 3 Dict.428;
    let Dict.984 : U8 = CallByName Dict.22 Dict.428 Dict.429;
    let Dict.430 : U64 = CallByName Num.133 Dict.984;
    let Dict.983 : U64 = 1i64;
    let Dict.982 : U64 = CallByName Num.51 Dict.429 Dict.983;
    let Dict.981 : U8 = CallByName Dict.22 Dict.428 Dict.982;
    let Dict.431 : U64 = CallByName Num.133 Dict.981;
    let Dict.980 : U64 = 2i64;
    let Dict.979 : U64 = CallByName Num.51 Dict.429 Dict.980;
    let Dict.978 : U8 = CallByName Dict.22 Dict.428 Dict.979;
    let Dict.432 : U64 = CallByName Num.133 Dict.978;
    let Dict.977 : U64 = 3i64;
    let Dict.976 : U64 = CallByName Num.51 Dict.429 Dict.977;
    let Dict.975 : U8 = CallByName Dict.22 Dict.428 Dict.976;
    let Dict.433 : U64 = CallByName Num.133 Dict.975;
    let Dict.974 : U8 = 8i64;
    let Dict.973 : U64 = CallByName Num.72 Dict.431 Dict.974;
    let Dict.434 : U64 = CallByName Num.71 Dict.430 Dict.973;
    let Dict.972 : U8 = 16i64;
    let Dict.969 : U64 = CallByName Num.72 Dict.432 Dict.972;
    let Dict.971 : U8 = 24i64;
    let Dict.970 : U64 = CallByName Num.72 Dict.433 Dict.971;
    let Dict.435 : U64 = CallByName Num.71 Dict.969 Dict.970;
    let Dict.968 : U64 = CallByName Num.71 Dict.434 Dict.435;
    ret Dict.968;

procedure Dict.74 (Dict.436, Dict.437, Dict.438):
    inc 2 Dict.436;
    let Dict.962 : U8 = CallByName Dict.22 Dict.436 Dict.437;
    let Dict.439 : U64 = CallByName Num.133 Dict.962;
    let Dict.961 : U8 = 1i64;
    let Dict.960 : U64 = CallByName Num.74 Dict.438 Dict.961;
    let Dict.959 : U64 = CallByName Num.51 Dict.960 Dict.437;
    let Dict.958 : U8 = CallByName Dict.22 Dict.436 Dict.959;
    let Dict.440 : U64 = CallByName Num.133 Dict.958;
    let Dict.957 : U64 = 1i64;
    let Dict.956 : U64 = CallByName Num.75 Dict.438 Dict.957;
    let Dict.955 : U64 = CallByName Num.51 Dict.956 Dict.437;
    let Dict.954 : U8 = CallByName Dict.22 Dict.436 Dict.955;
    let Dict.441 : U64 = CallByName Num.133 Dict.954;
    let Dict.953 : U8 = 16i64;
    let Dict.950 : U64 = CallByName Num.72 Dict.439 Dict.953;
    let Dict.952 : U8 = 8i64;
    let Dict.951 : U64 = CallByName Num.72 Dict.440 Dict.952;
    let Dict.442 : U64 = CallByName Num.71 Dict.950 Dict.951;
    let Dict.949 : U64 = CallByName Num.71 Dict.442 Dict.441;
    ret Dict.949;

procedure Dict.8 (Dict.590, Dict.188, Dict.189):
    let Dict.187 : List {Str, I64} = StructAtIndex 0 Dict.590;
    inc Dict.187;
    let Dict.186 : List U64 = StructAtIndex 1 Dict.590;
    inc Dict.186;
    let Dict.185 : List I8 = StructAtIndex 2 Dict.590;
    inc Dict.185;
    let Dict.772 : [C , C U64] = TagId(0) ;
    let Dict.771 : {U64, U64} = CallByName Dict.54 Dict.772;
    inc 2 Dict.188;
    let Dict.770 : {U64, U64} = CallByName Hash.19 Dict.771 Dict.188;
    let Dict.190 : U64 = CallByName Dict.57 Dict.770;
    let Dict.191 : U64 = CallByName Dict.52 Dict.190;
    let Dict.192 : I8 = CallByName Dict.53 Dict.190;
    let Dict.769 : U64 = CallByName List.6 Dict.185;
    let Dict.768 : U64 = CallByName Dict.51 Dict.769;
    let Dict.193 : {U64, U64, U64} = CallByName Dict.48 Dict.191 Dict.768;
    let Dict.740 : U64 = 0i64;
    let Dict.625 : [C {}, C U64] = CallByName Dict.41 Dict.185 Dict.186 Dict.187 Dict.192 Dict.188 Dict.193 Dict.740;
    let Dict.737 : U8 = 1i64;
    let Dict.738 : U8 = GetTagId Dict.625;
    let Dict.739 : Int1 = lowlevel Eq Dict.737 Dict.738;
    if Dict.739 then
        inc Dict.186;
        let Dict.195 : U64 = UnionAtIndex (Id 1) (Index 0) Dict.625;
        let Dict.196 : U64 = CallByName Dict.22 Dict.186 Dict.195;
        let Dict.628 : {Str, I64} = Struct {Dict.188, Dict.189};
        let Dict.627 : List {Str, I64} = CallByName List.3 Dict.187 Dict.196 Dict.628;
        let Dict.626 : {List {Str, I64}, List U64, List I8} = Struct {Dict.627, Dict.186, Dict.185};
        ret Dict.626;
    else
        let Dict.665 : {List {Str, I64}, List U64, List I8} = Struct {Dict.187, Dict.186, Dict.185};
        let Dict.197 : {List {Str, I64}, List U64, List I8} = CallByName Dict.42 Dict.665;
        let Dict.630 : {List {Str, I64}, List U64, List I8} = CallByName Dict.39 Dict.197 Dict.188 Dict.189 Dict.191 Dict.192;
        ret Dict.630;

procedure Dict.99 (Dict.100, Dict.98):
    let Dict.1049 : {} = Struct {};
    let Dict.1050 : {} = Struct {};
    let Dict.1051 : {} = Struct {};
    let Dict.1048 : {{List {Str, I64}, List U64, List I8}, {}, {}, {}} = CallByName Inspect.39 Dict.98 Dict.1049 Dict.1050 Dict.1051;
    let Dict.1047 : Str = CallByName Inspect.31 Dict.1048 Dict.100;
    ret Dict.1047;

procedure Hash.19 (Hash.39, Hash.40):
    let Hash.79 : List U8 = CallByName Str.12 Hash.40;
    let Hash.78 : {U64, U64} = CallByName Dict.63 Hash.39 Hash.79;
    ret Hash.78;

procedure Inspect.188 (Inspect.189, #Attr.12):
    let Inspect.187 : {} = StructAtIndex 3 #Attr.12;
    let Inspect.186 : {} = StructAtIndex 2 #Attr.12;
    let Inspect.185 : {} = StructAtIndex 1 #Attr.12;
    let Inspect.184 : {List {Str, I64}, List U64, List I8} = StructAtIndex 0 #Attr.12;
    let Inspect.359 : Str = "{";
    let Inspect.332 : Str = CallByName Inspect.61 Inspect.189 Inspect.359;
    let Inspect.333 : {{List {Str, I64}, List U64, List I8}, {}, {}, {}} = Struct {Inspect.184, Inspect.185, Inspect.186, Inspect.187};
    let Inspect.328 : {Str, Int1} = CallByName Inspect.190 Inspect.332 Inspect.333;
    let Inspect.329 : {} = Struct {};
    let Inspect.324 : Str = CallByName Inspect.202 Inspect.328;
    let Inspect.325 : Str = "}";
    let Inspect.323 : Str = CallByName Inspect.61 Inspect.324 Inspect.325;
    ret Inspect.323;

procedure Inspect.190 (Inspect.191, #Attr.12):
    let Inspect.187 : {} = StructAtIndex 3 #Attr.12;
    let Inspect.186 : {} = StructAtIndex 2 #Attr.12;
    let Inspect.185 : {} = StructAtIndex 1 #Attr.12;
    let Inspect.184 : {List {Str, I64}, List U64, List I8} = StructAtIndex 0 #Attr.12;
    let Inspect.358 : Int1 = CallByName Bool.1;
    let Inspect.336 : {Str, Int1} = Struct {Inspect.191, Inspect.358};
    let Inspect.337 : {{}, {}} = Struct {Inspect.186, Inspect.187};
    let Inspect.335 : {Str, Int1} = CallByName Dict.10 Inspect.184 Inspect.336 Inspect.337;
    ret Inspect.335;

procedure Inspect.192 (Inspect.338, Inspect.195, Inspect.196, #Attr.12):
    let Inspect.187 : {} = StructAtIndex 1 #Attr.12;
    let Inspect.186 : {} = StructAtIndex 0 #Attr.12;
    let Inspect.193 : Str = StructAtIndex 0 Inspect.338;
    let Inspect.194 : Int1 = StructAtIndex 1 Inspect.338;
    joinpoint Inspect.356 Inspect.197:
        let Inspect.353 : Str = CallByName Inspect.44 Inspect.195;
        let Inspect.351 : Str = CallByName Inspect.31 Inspect.353 Inspect.197;
        let Inspect.352 : Str = ": ";
        let Inspect.345 : Str = CallByName Inspect.61 Inspect.351 Inspect.352;
        let Inspect.346 : {I64, {}} = Struct {Inspect.196, Inspect.187};
        let Inspect.341 : Str = CallByName Inspect.198 Inspect.345 Inspect.346;
        let Inspect.342 : {} = Struct {};
        let Inspect.340 : {Str, Int1} = CallByName Inspect.200 Inspect.341;
        ret Inspect.340;
    in
    if Inspect.194 then
        let Inspect.357 : Str = ", ";
        let Inspect.355 : Str = CallByName Inspect.61 Inspect.193 Inspect.357;
        jump Inspect.356 Inspect.355;
    else
        jump Inspect.356 Inspect.193;

procedure Inspect.198 (Inspect.199, #Attr.12):
    let Inspect.187 : {} = StructAtIndex 1 #Attr.12;
    let Inspect.196 : I64 = StructAtIndex 0 #Attr.12;
    let Inspect.349 : I64 = CallByName Inspect.54 Inspect.196;
    let Inspect.348 : Str = CallByName Inspect.31 Inspect.349 Inspect.199;
    ret Inspect.348;

procedure Inspect.200 (Inspect.201):
    let Inspect.344 : Int1 = CallByName Bool.2;
    let Inspect.343 : {Str, Int1} = Struct {Inspect.201, Inspect.344};
    ret Inspect.343;

procedure Inspect.202 (Inspect.330):
    let Inspect.331 : Str = StructAtIndex 0 Inspect.330;
    ret Inspect.331;

procedure Inspect.251 (Inspect.252, Inspect.250):
    let Inspect.374 : Str = "\"";
    let Inspect.373 : Str = CallByName Inspect.61 Inspect.252 Inspect.374;
    let Inspect.371 : Str = CallByName Inspect.61 Inspect.373 Inspect.250;
    let Inspect.372 : Str = "\"";
    let Inspect.370 : Str = CallByName Inspect.61 Inspect.371 Inspect.372;
    ret Inspect.370;

procedure Inspect.279 (Inspect.280, Inspect.278):
    let Inspect.365 : Str = CallByName Num.96 Inspect.278;
    let Inspect.364 : Str = CallByName Inspect.61 Inspect.280 Inspect.365;
    ret Inspect.364;

procedure Inspect.30 (Inspect.148):
    ret Inspect.148;

procedure Inspect.30 (Inspect.148):
    ret Inspect.148;

procedure Inspect.30 (Inspect.148):
    ret Inspect.148;

procedure Inspect.30 (Inspect.148):
    ret Inspect.148;

procedure Inspect.31 (Inspect.307, Inspect.150):
    let Inspect.318 : Str = CallByName Inspect.188 Inspect.150 Inspect.307;
    ret Inspect.318;

procedure Inspect.31 (Inspect.307, Inspect.150):
    let Inspect.350 : Str = CallByName Inspect.279 Inspect.150 Inspect.307;
    ret Inspect.350;

procedure Inspect.31 (Inspect.307, Inspect.150):
    let Inspect.354 : Str = CallByName Inspect.251 Inspect.150 Inspect.307;
    ret Inspect.354;

procedure Inspect.34 (Inspect.153):
    let Inspect.309 : Str = CallByName Inspect.5 Inspect.153;
    let Inspect.308 : Str = CallByName Inspect.62 Inspect.309;
    ret Inspect.308;

procedure Inspect.36 (Inspect.305):
    let Inspect.315 : Str = "";
    ret Inspect.315;

procedure Inspect.39 (Inspect.184, Inspect.185, Inspect.186, Inspect.187):
    let Inspect.320 : {{List {Str, I64}, List U64, List I8}, {}, {}, {}} = Struct {Inspect.184, Inspect.185, Inspect.186, Inspect.187};
    let Inspect.319 : {{List {Str, I64}, List U64, List I8}, {}, {}, {}} = CallByName Inspect.30 Inspect.320;
    ret Inspect.319;

procedure Inspect.44 (Inspect.250):
    let Inspect.366 : Str = CallByName Inspect.30 Inspect.250;
    ret Inspect.366;

procedure Inspect.5 (Inspect.151):
    let Inspect.316 : {List {Str, I64}, List U64, List I8} = CallByName Dict.33 Inspect.151;
    let Inspect.313 : {} = Struct {};
    let Inspect.312 : Str = CallByName Inspect.36 Inspect.313;
    let Inspect.311 : Str = CallByName Dict.99 Inspect.312 Inspect.316;
    ret Inspect.311;

procedure Inspect.54 (Inspect.278):
    let Inspect.360 : I64 = CallByName Inspect.30 Inspect.278;
    ret Inspect.360;

procedure Inspect.61 (Inspect.304, Inspect.300):
    let Inspect.327 : Str = CallByName Str.3 Inspect.304 Inspect.300;
    dec Inspect.300;
    ret Inspect.327;

procedure Inspect.62 (Inspect.306):
    ret Inspect.306;

procedure List.11 (List.133, List.134):
    let List.637 : List I8 = CallByName List.68 List.134;
    let List.636 : List I8 = CallByName List.86 List.133 List.134 List.637;
    ret List.636;

procedure List.11 (List.133, List.134):
    let List.639 : List U64 = CallByName List.68 List.134;
    let List.638 : List U64 = CallByName List.86 List.133 List.134 List.639;
    ret List.638;

procedure List.18 (List.154, List.155, List.156):
    let List.554 : U64 = 0i64;
    let List.555 : U64 = CallByName List.6 List.154;
    let List.553 : {List {Str, I64}, List U64, List I8} = CallByName List.88 List.154 List.155 List.156 List.554 List.555;
    ret List.553;

procedure List.18 (List.154, List.155, List.156):
    let List.644 : U64 = 0i64;
    let List.645 : U64 = CallByName List.6 List.154;
    let List.643 : {Str, Int1} = CallByName List.88 List.154 List.155 List.156 List.644 List.645;
    ret List.643;

procedure List.2 (List.103, List.104):
    let List.611 : U64 = CallByName List.6 List.103;
    let List.607 : Int1 = CallByName Num.22 List.104 List.611;
    if List.607 then
        let List.609 : I8 = CallByName List.66 List.103 List.104;
        dec List.103;
        let List.608 : [C {}, C I8] = TagId(1) List.609;
        ret List.608;
    else
        dec List.103;
        let List.606 : {} = Struct {};
        let List.605 : [C {}, C I8] = TagId(0) List.606;
        ret List.605;

procedure List.3 (List.111, List.112, List.113):
    let List.566 : {List {Str, I64}, {Str, I64}} = CallByName List.64 List.111 List.112 List.113;
    let List.565 : List {Str, I64} = StructAtIndex 0 List.566;
    let #Derived_gen.60 : {Str, I64} = StructAtIndex 1 List.566;
    dec #Derived_gen.60;
    ret List.565;

procedure List.3 (List.111, List.112, List.113):
    let List.589 : {List I8, I8} = CallByName List.64 List.111 List.112 List.113;
    let List.588 : List I8 = StructAtIndex 0 List.589;
    ret List.588;

procedure List.3 (List.111, List.112, List.113):
    let List.591 : {List U64, U64} = CallByName List.64 List.111 List.112 List.113;
    let List.590 : List U64 = StructAtIndex 0 List.591;
    ret List.590;

procedure List.4 (List.119, List.120):
    let List.595 : U64 = 1i64;
    let List.593 : List {Str, I64} = CallByName List.70 List.119 List.595;
    let List.592 : List {Str, I64} = CallByName List.71 List.593 List.120;
    ret List.592;

procedure List.6 (#Attr.2):
    let List.602 : U64 = lowlevel ListLen #Attr.2;
    ret List.602;

procedure List.6 (#Attr.2):
    let List.603 : U64 = lowlevel ListLen #Attr.2;
    ret List.603;

procedure List.6 (#Attr.2):
    let List.642 : U64 = lowlevel ListLen #Attr.2;
    ret List.642;

procedure List.6 (#Attr.2):
    let List.654 : U64 = lowlevel ListLen #Attr.2;
    ret List.654;

procedure List.64 (List.108, List.109, List.110):
    let List.571 : U64 = CallByName List.6 List.108;
    let List.568 : Int1 = CallByName Num.22 List.109 List.571;
    if List.568 then
        let List.569 : {List {Str, I64}, {Str, I64}} = CallByName List.67 List.108 List.109 List.110;
        ret List.569;
    else
        let List.567 : {List {Str, I64}, {Str, I64}} = Struct {List.108, List.110};
        ret List.567;

procedure List.64 (List.108, List.109, List.110):
    let List.578 : U64 = CallByName List.6 List.108;
    let List.575 : Int1 = CallByName Num.22 List.109 List.578;
    if List.575 then
        let List.576 : {List I8, I8} = CallByName List.67 List.108 List.109 List.110;
        ret List.576;
    else
        let List.574 : {List I8, I8} = Struct {List.108, List.110};
        ret List.574;

procedure List.64 (List.108, List.109, List.110):
    let List.586 : U64 = CallByName List.6 List.108;
    let List.583 : Int1 = CallByName Num.22 List.109 List.586;
    if List.583 then
        let List.584 : {List U64, U64} = CallByName List.67 List.108 List.109 List.110;
        ret List.584;
    else
        let List.582 : {List U64, U64} = Struct {List.108, List.110};
        ret List.582;

procedure List.66 (#Attr.2, #Attr.3):
    let List.610 : I8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.610;

procedure List.66 (#Attr.2, #Attr.3):
    let List.653 : {Str, I64} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.653;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.570 : {List {Str, I64}, {Str, I64}} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.570;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.577 : {List I8, I8} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.577;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.585 : {List U64, U64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.585;

procedure List.68 (#Attr.2):
    let List.623 : List I8 = lowlevel ListWithCapacity #Attr.2;
    ret List.623;

procedure List.68 (#Attr.2):
    let List.635 : List U64 = lowlevel ListWithCapacity #Attr.2;
    ret List.635;

procedure List.68 (#Attr.2):
    let List.640 : List {Str, I64} = lowlevel ListWithCapacity #Attr.2;
    ret List.640;

procedure List.70 (#Attr.2, #Attr.3):
    let List.596 : List {Str, I64} = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.596;

procedure List.71 (#Attr.2, #Attr.3):
    let List.594 : List {Str, I64} = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.594;

procedure List.71 (#Attr.2, #Attr.3):
    let List.620 : List I8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.620;

procedure List.71 (#Attr.2, #Attr.3):
    let List.632 : List U64 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.632;

procedure List.86 (#Derived_gen.11, #Derived_gen.12, #Derived_gen.13):
    joinpoint List.626 List.135 List.136 List.137:
        let List.634 : U64 = 0i64;
        let List.628 : Int1 = CallByName Num.24 List.136 List.634;
        if List.628 then
            let List.633 : U64 = 1i64;
            let List.630 : U64 = CallByName Num.75 List.136 List.633;
            let List.631 : List U64 = CallByName List.71 List.137 List.135;
            jump List.626 List.135 List.630 List.631;
        else
            ret List.137;
    in
    jump List.626 #Derived_gen.11 #Derived_gen.12 #Derived_gen.13;

procedure List.86 (#Derived_gen.55, #Derived_gen.56, #Derived_gen.57):
    joinpoint List.614 List.135 List.136 List.137:
        let List.622 : U64 = 0i64;
        let List.616 : Int1 = CallByName Num.24 List.136 List.622;
        if List.616 then
            let List.621 : U64 = 1i64;
            let List.618 : U64 = CallByName Num.75 List.136 List.621;
            let List.619 : List I8 = CallByName List.71 List.137 List.135;
            jump List.614 List.135 List.618 List.619;
        else
            ret List.137;
    in
    jump List.614 #Derived_gen.55 #Derived_gen.56 #Derived_gen.57;

procedure List.88 (#Derived_gen.30, #Derived_gen.31, #Derived_gen.32, #Derived_gen.33, #Derived_gen.34):
    joinpoint List.646 List.157 List.158 List.159 List.160 List.161:
        let List.648 : Int1 = CallByName Num.22 List.160 List.161;
        if List.648 then
            let List.652 : {Str, I64} = CallByName List.66 List.157 List.160;
            inc List.652;
            let List.162 : {Str, Int1} = CallByName Dict.138 List.158 List.652 List.159;
            let List.651 : U64 = 1i64;
            let List.650 : U64 = CallByName Num.51 List.160 List.651;
            jump List.646 List.157 List.162 List.159 List.650 List.161;
        else
            dec List.157;
            ret List.158;
    in
    jump List.646 #Derived_gen.30 #Derived_gen.31 #Derived_gen.32 #Derived_gen.33 #Derived_gen.34;

procedure List.88 (#Derived_gen.50, #Derived_gen.51, #Derived_gen.52, #Derived_gen.53, #Derived_gen.54):
    joinpoint List.556 List.157 List.158 List.159 List.160 List.161:
        let List.558 : Int1 = CallByName Num.22 List.160 List.161;
        if List.558 then
            let List.562 : {Str, I64} = CallByName List.66 List.157 List.160;
            inc List.562;
            let List.162 : {List {Str, I64}, List U64, List I8} = CallByName Dict.110 List.158 List.562;
            let List.561 : U64 = 1i64;
            let List.560 : U64 = CallByName Num.51 List.160 List.561;
            jump List.556 List.157 List.162 List.159 List.560 List.161;
        else
            dec List.157;
            ret List.158;
    in
    jump List.556 #Derived_gen.50 #Derived_gen.51 #Derived_gen.52 #Derived_gen.53 #Derived_gen.54;

procedure Num.117 (#Attr.2):
    let Num.312 : I8 = lowlevel NumIntCast #Attr.2;
    ret Num.312;

procedure Num.133 (#Attr.2):
    let Num.365 : U64 = lowlevel NumIntCast #Attr.2;
    ret Num.365;

procedure Num.133 (#Attr.2):
    let Num.381 : U64 = lowlevel NumIntCast #Attr.2;
    ret Num.381;

procedure Num.133 (#Attr.2):
    let Num.382 : U64 = lowlevel NumIntCast #Attr.2;
    ret Num.382;

procedure Num.135 (#Attr.2):
    let Num.389 : U128 = lowlevel NumIntCast #Attr.2;
    ret Num.389;

procedure Num.137 (#Attr.2):
    let Num.306 : U64 = lowlevel NumIntCast #Attr.2;
    ret Num.306;

procedure Num.152 (#Attr.2):
    let Num.334 : U8 = lowlevel NumCountLeadingZeroBits #Attr.2;
    ret Num.334;

procedure Num.160 (Num.242, Num.243):
    let Num.330 : Int1 = CallByName Num.24 Num.242 Num.243;
    if Num.330 then
        ret Num.242;
    else
        ret Num.243;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.327 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.327;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.332 : U8 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.332;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.333 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.333;

procedure Num.21 (#Attr.2, #Attr.3):
    let Num.321 : U64 = lowlevel NumMul #Attr.2 #Attr.3;
    ret Num.321;

procedure Num.21 (#Attr.2, #Attr.3):
    let Num.387 : U128 = lowlevel NumMul #Attr.2 #Attr.3;
    ret Num.387;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.302 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.302;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.474 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.474;

procedure Num.23 (#Attr.2, #Attr.3):
    let Num.465 : Int1 = lowlevel NumLte #Attr.2 #Attr.3;
    ret Num.465;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.469 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.469;

procedure Num.25 (#Attr.2, #Attr.3):
    let Num.324 : Int1 = lowlevel NumGte #Attr.2 #Attr.3;
    ret Num.324;

procedure Num.25 (#Attr.2, #Attr.3):
    let Num.471 : Int1 = lowlevel NumGte #Attr.2 #Attr.3;
    ret Num.471;

procedure Num.39 (#Attr.2, #Attr.3):
    let Num.335 : U64 = lowlevel NumDivTruncUnchecked #Attr.2 #Attr.3;
    ret Num.335;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.473 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.473;

procedure Num.69 (#Attr.2, #Attr.3):
    let Num.301 : U64 = lowlevel NumBitwiseAnd #Attr.2 #Attr.3;
    ret Num.301;

procedure Num.70 (#Attr.2, #Attr.3):
    let Num.363 : U64 = lowlevel NumBitwiseXor #Attr.2 #Attr.3;
    ret Num.363;

procedure Num.71 (#Attr.2, #Attr.3):
    let Num.405 : U64 = lowlevel NumBitwiseOr #Attr.2 #Attr.3;
    ret Num.405;

procedure Num.72 (#Attr.2, #Attr.3):
    let Num.423 : U64 = lowlevel NumShiftLeftBy #Attr.2 #Attr.3;
    ret Num.423;

procedure Num.74 (#Attr.2, #Attr.3):
    let Num.383 : U128 = lowlevel NumShiftRightZfBy #Attr.2 #Attr.3;
    ret Num.383;

procedure Num.74 (#Attr.2, #Attr.3):
    let Num.386 : U64 = lowlevel NumShiftRightZfBy #Attr.2 #Attr.3;
    ret Num.386;

procedure Num.75 (#Attr.2, #Attr.3):
    let Num.460 : U64 = lowlevel NumSubWrap #Attr.2 #Attr.3;
    ret Num.460;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.307 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.307;

procedure Num.96 (#Attr.2):
    let Num.472 : Str = lowlevel NumToStr #Attr.2;
    ret Num.472;

procedure Str.12 (#Attr.2):
    let Str.293 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.293;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.294 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.294;

procedure Test.0 ():
    let Test.8 : Str = "a";
    let Test.9 : I64 = 1i64;
    let Test.4 : {Str, I64} = Struct {Test.8, Test.9};
    let Test.6 : Str = "b";
    let Test.7 : I64 = 2i64;
    let Test.5 : {Str, I64} = Struct {Test.6, Test.7};
    let Test.3 : List {Str, I64} = Array [Test.4, Test.5];
    let Test.2 : {List {Str, I64}, List U64, List I8} = CallByName Dict.12 Test.3;
    let Test.1 : Str = CallByName Inspect.34 Test.2;
    ret Test.1;
