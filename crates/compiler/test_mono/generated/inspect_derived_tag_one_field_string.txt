procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.4, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.4;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Inspect.44 #Derived.1;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9];
    let #Derived_gen.6 : [C Str, C Str List Str] = CallByName Inspect.40 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure Inspect.205 (Inspect.206, #Attr.12):
    let Inspect.350 : Str = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Inspect.349 : Str = CallByName Inspect.61 Inspect.206 Inspect.350;
    ret Inspect.349;

procedure Inspect.207 (Inspect.208, #Attr.12):
    let Inspect.344 : List Str = UnionAtIndex (Id 1) (Index 1) #Attr.12;
    let Inspect.343 : Str = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Inspect.342 : Str = "(";
    let Inspect.341 : Str = CallByName Inspect.61 Inspect.208 Inspect.342;
    let Inspect.329 : Str = CallByName Inspect.61 Inspect.341 Inspect.343;
    let Inspect.325 : Str = CallByName Inspect.209 Inspect.329 Inspect.344;
    let Inspect.326 : Str = ")";
    let Inspect.324 : Str = CallByName Inspect.61 Inspect.325 Inspect.326;
    ret Inspect.324;

procedure Inspect.209 (Inspect.210, Inspect.204):
    let Inspect.333 : {} = Struct {};
    let Inspect.332 : Str = CallByName List.18 Inspect.204 Inspect.210 Inspect.333;
    ret Inspect.332;

procedure Inspect.211 (Inspect.212, Inspect.213):
    let Inspect.340 : Str = " ";
    let Inspect.335 : Str = CallByName Inspect.61 Inspect.212 Inspect.340;
    let Inspect.334 : Str = CallByName Inspect.214 Inspect.335 Inspect.213;
    ret Inspect.334;

procedure Inspect.214 (Inspect.215, Inspect.213):
    let Inspect.338 : Str = CallByName Inspect.31 Inspect.213 Inspect.215;
    ret Inspect.338;

procedure Inspect.251 (Inspect.252, Inspect.250):
    let Inspect.359 : Str = "\"";
    let Inspect.358 : Str = CallByName Inspect.61 Inspect.252 Inspect.359;
    let Inspect.356 : Str = CallByName Inspect.61 Inspect.358 Inspect.250;
    let Inspect.357 : Str = "\"";
    let Inspect.355 : Str = CallByName Inspect.61 Inspect.356 Inspect.357;
    ret Inspect.355;

procedure Inspect.30 (Inspect.148):
    ret Inspect.148;

procedure Inspect.30 (Inspect.148):
    ret Inspect.148;

procedure Inspect.30 (Inspect.148):
    ret Inspect.148;

procedure Inspect.31 (Inspect.307, Inspect.150):
    let Inspect.319 : U8 = GetTagId Inspect.307;
    switch Inspect.319:
        case 0:
            let Inspect.318 : Str = CallByName Inspect.205 Inspect.150 Inspect.307;
            ret Inspect.318;
    
        default:
            let Inspect.318 : Str = CallByName Inspect.207 Inspect.150 Inspect.307;
            ret Inspect.318;
    

procedure Inspect.31 (Inspect.307, Inspect.150):
    let Inspect.339 : Str = CallByName Inspect.251 Inspect.150 Inspect.307;
    ret Inspect.339;

procedure Inspect.34 (Inspect.153):
    let Inspect.309 : Str = CallByName Inspect.5 Inspect.153;
    let Inspect.308 : Str = CallByName Inspect.62 Inspect.309;
    ret Inspect.308;

procedure Inspect.36 (Inspect.305):
    let Inspect.315 : Str = "";
    ret Inspect.315;

procedure Inspect.40 (Inspect.203, Inspect.204):
    inc Inspect.204;
    let Inspect.345 : Int1 = CallByName List.1 Inspect.204;
    if Inspect.345 then
        dec Inspect.204;
        let Inspect.347 : [C Str, C Str List Str] = TagId(0) Inspect.203;
        let Inspect.346 : [C Str, C Str List Str] = CallByName Inspect.30 Inspect.347;
        ret Inspect.346;
    else
        let Inspect.321 : [C Str, C Str List Str] = TagId(1) Inspect.203 Inspect.204;
        let Inspect.320 : [C Str, C Str List Str] = CallByName Inspect.30 Inspect.321;
        ret Inspect.320;

procedure Inspect.44 (Inspect.250):
    let Inspect.351 : Str = CallByName Inspect.30 Inspect.250;
    ret Inspect.351;

procedure Inspect.5 (Inspect.151):
    let Inspect.316 : Str = CallByName #Derived.0 Inspect.151;
    let Inspect.313 : {} = Struct {};
    let Inspect.312 : Str = CallByName Inspect.36 Inspect.313;
    let Inspect.311 : Str = CallByName #Derived.3 Inspect.312 Inspect.316;
    ret Inspect.311;

procedure Inspect.61 (Inspect.304, Inspect.300):
    let Inspect.328 : Str = CallByName Str.3 Inspect.304 Inspect.300;
    dec Inspect.300;
    ret Inspect.328;

procedure Inspect.62 (Inspect.306):
    ret Inspect.306;

procedure List.1 (List.105):
    let List.584 : U64 = CallByName List.6 List.105;
    dec List.105;
    let List.585 : U64 = 0i64;
    let List.583 : Int1 = CallByName Bool.11 List.584 List.585;
    ret List.583;

procedure List.18 (List.158, List.159, List.160):
    let List.572 : U64 = 0i64;
    let List.573 : U64 = CallByName List.6 List.158;
    let List.571 : Str = CallByName List.90 List.158 List.159 List.160 List.572 List.573;
    ret List.571;

procedure List.6 (#Attr.2):
    let List.582 : U64 = lowlevel ListLen #Attr.2;
    ret List.582;

procedure List.66 (#Attr.2, #Attr.3):
    let List.581 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.581;

procedure List.90 (#Derived_gen.18, #Derived_gen.19, #Derived_gen.20, #Derived_gen.21, #Derived_gen.22):
    joinpoint List.574 List.161 List.162 List.163 List.164 List.165:
        let List.576 : Int1 = CallByName Num.22 List.164 List.165;
        if List.576 then
            let List.580 : Str = CallByName List.66 List.161 List.164;
            inc List.580;
            let List.166 : Str = CallByName Inspect.211 List.162 List.580;
            let List.579 : U64 = 1i64;
            let List.578 : U64 = CallByName Num.51 List.164 List.579;
            jump List.574 List.161 List.166 List.163 List.578 List.165;
        else
            dec List.161;
            ret List.162;
    in
    jump List.574 #Derived_gen.18 #Derived_gen.19 #Derived_gen.20 #Derived_gen.21 #Derived_gen.22;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.298 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.298;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.297 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.297;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.251 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.251;

procedure Test.0 ():
    let Test.4 : Str = "foo";
    let Test.3 : Str = CallByName Inspect.34 Test.4;
    ret Test.3;
