procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.4, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.4;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Inspect.47 #Derived.1;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9];
    let #Derived_gen.6 : [C Str, C Str List Str] = CallByName Inspect.43 #Derived_gen.7 #Derived_gen.8;
    dec #Derived_gen.8;
    dec #Derived_gen.7;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure Inspect.204 (Inspect.205, #Attr.12):
    let Inspect.345 : Str = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Inspect.344 : Str = CallByName Inspect.63 Inspect.205 Inspect.345;
    dec Inspect.345;
    ret Inspect.344;

procedure Inspect.206 (Inspect.207, #Attr.12):
    let Inspect.339 : List Str = UnionAtIndex (Id 1) (Index 1) #Attr.12;
    let Inspect.338 : Str = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Inspect.337 : Str = "(";
    let Inspect.336 : Str = CallByName Inspect.63 Inspect.207 Inspect.337;
    dec Inspect.337;
    let Inspect.324 : Str = CallByName Inspect.63 Inspect.336 Inspect.338;
    dec Inspect.338;
    let Inspect.320 : Str = CallByName Inspect.208 Inspect.324 Inspect.339;
    dec Inspect.339;
    let Inspect.321 : Str = ")";
    let Inspect.319 : Str = CallByName Inspect.63 Inspect.320 Inspect.321;
    dec Inspect.321;
    ret Inspect.319;

procedure Inspect.208 (Inspect.209, Inspect.203):
    let Inspect.328 : {} = Struct {};
    let Inspect.327 : Str = CallByName List.18 Inspect.203 Inspect.209 Inspect.328;
    ret Inspect.327;

procedure Inspect.210 (Inspect.211, Inspect.212):
    let Inspect.335 : Str = " ";
    let Inspect.330 : Str = CallByName Inspect.63 Inspect.211 Inspect.335;
    dec Inspect.335;
    let Inspect.329 : Str = CallByName Inspect.213 Inspect.330 Inspect.212;
    ret Inspect.329;

procedure Inspect.213 (Inspect.214, Inspect.212):
    let Inspect.333 : Str = CallByName Inspect.31 Inspect.212 Inspect.214;
    ret Inspect.333;

procedure Inspect.249 (Inspect.250, Inspect.248):
    let Inspect.354 : Str = "\"";
    let Inspect.353 : Str = CallByName Inspect.63 Inspect.250 Inspect.354;
    dec Inspect.354;
    let Inspect.351 : Str = CallByName Inspect.63 Inspect.353 Inspect.248;
    let Inspect.352 : Str = "\"";
    let Inspect.350 : Str = CallByName Inspect.63 Inspect.351 Inspect.352;
    dec Inspect.352;
    ret Inspect.350;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.302, Inspect.149):
    let Inspect.314 : U8 = GetTagId Inspect.302;
    switch Inspect.314:
        case 0:
            let Inspect.313 : Str = CallByName Inspect.204 Inspect.149 Inspect.302;
            ret Inspect.313;
    
        default:
            let Inspect.313 : Str = CallByName Inspect.206 Inspect.149 Inspect.302;
            ret Inspect.313;
    

procedure Inspect.31 (Inspect.302, Inspect.149):
    let Inspect.334 : Str = CallByName Inspect.249 Inspect.149 Inspect.302;
    ret Inspect.334;

procedure Inspect.33 (Inspect.152):
    let Inspect.304 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.303 : Str = CallByName Inspect.64 Inspect.304;
    ret Inspect.303;

procedure Inspect.39 (Inspect.300):
    let Inspect.310 : Str = "";
    ret Inspect.310;

procedure Inspect.43 (Inspect.202, Inspect.203):
    let Inspect.340 : Int1 = CallByName List.1 Inspect.203;
    if Inspect.340 then
        inc Inspect.202;
        let Inspect.342 : [C Str, C Str List Str] = TagId(0) Inspect.202;
        let Inspect.341 : [C Str, C Str List Str] = CallByName Inspect.30 Inspect.342;
        ret Inspect.341;
    else
        inc Inspect.203;
        inc Inspect.202;
        let Inspect.316 : [C Str, C Str List Str] = TagId(1) Inspect.202 Inspect.203;
        let Inspect.315 : [C Str, C Str List Str] = CallByName Inspect.30 Inspect.316;
        ret Inspect.315;

procedure Inspect.47 (Inspect.248):
    let Inspect.346 : Str = CallByName Inspect.30 Inspect.248;
    ret Inspect.346;

procedure Inspect.5 (Inspect.150):
    let Inspect.311 : Str = CallByName #Derived.0 Inspect.150;
    let Inspect.308 : {} = Struct {};
    let Inspect.307 : Str = CallByName Inspect.39 Inspect.308;
    let Inspect.306 : Str = CallByName #Derived.3 Inspect.307 Inspect.311;
    ret Inspect.306;

procedure Inspect.63 (Inspect.299, Inspect.295):
    let Inspect.323 : Str = CallByName Str.3 Inspect.299 Inspect.295;
    ret Inspect.323;

procedure Inspect.64 (Inspect.301):
    ret Inspect.301;

procedure List.1 (List.118):
    let List.678 : U64 = CallByName List.6 List.118;
    let List.679 : U64 = 0i64;
    let List.677 : Int1 = CallByName Bool.11 List.678 List.679;
    ret List.677;

procedure List.100 (#Derived_gen.12, #Derived_gen.13, #Derived_gen.14, #Derived_gen.15, #Derived_gen.16):
    joinpoint List.668 List.174 List.175 List.176 List.177 List.178:
        let List.670 : Int1 = CallByName Num.22 List.177 List.178;
        if List.670 then
            let List.674 : Str = CallByName List.66 List.174 List.177;
            inc List.674;
            let List.179 : Str = CallByName Inspect.210 List.175 List.674;
            dec List.674;
            let List.673 : U64 = 1i64;
            let List.672 : U64 = CallByName Num.51 List.177 List.673;
            jump List.668 List.174 List.179 List.176 List.672 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.12;
    jump List.668 #Derived_gen.12 #Derived_gen.13 #Derived_gen.14 #Derived_gen.15 #Derived_gen.16;

procedure List.18 (List.171, List.172, List.173):
    let List.666 : U64 = 0i64;
    let List.667 : U64 = CallByName List.6 List.171;
    let List.665 : Str = CallByName List.100 List.171 List.172 List.173 List.666 List.667;
    ret List.665;

procedure List.6 (#Attr.2):
    let List.676 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.676;

procedure List.66 (#Attr.2, #Attr.3):
    let List.675 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.675;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.246 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.246;

procedure Test.0 ():
    let Test.4 : Str = "foo";
    let Test.3 : Str = CallByName Inspect.33 Test.4;
    ret Test.3;
