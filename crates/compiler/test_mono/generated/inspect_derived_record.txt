procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Decimal, I64} = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.1):
    let #Derived_gen.13 : I64 = StructAtIndex 1 #Derived.1;
    let #Derived_gen.11 : [C I64, C Decimal] = CallByName Inspect.57 #Derived_gen.13;
    let #Derived_gen.12 : Str = "a";
    let #Derived_gen.6 : {[C I64, C Decimal], Str} = Struct {#Derived_gen.11, #Derived_gen.12};
    let #Derived_gen.10 : Decimal = StructAtIndex 0 #Derived.1;
    let #Derived_gen.8 : [C I64, C Decimal] = CallByName Inspect.62 #Derived_gen.10;
    let #Derived_gen.9 : Str = "b";
    let #Derived_gen.7 : {[C I64, C Decimal], Str} = Struct {#Derived_gen.8, #Derived_gen.9};
    let #Derived_gen.5 : List {[C I64, C Decimal], Str} = Array [#Derived_gen.6, #Derived_gen.7];
    let #Derived_gen.4 : List {[C I64, C Decimal], Str} = CallByName Inspect.45 #Derived_gen.5;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.3;
    dec #Derived_gen.4;
    ret #Derived_gen.3;

procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Inspect.229 (Inspect.230, Inspect.228):
    let Inspect.352 : Str = "{";
    let Inspect.327 : Str = CallByName Inspect.63 Inspect.230 Inspect.352;
    dec Inspect.352;
    let Inspect.323 : {Str, Int1} = CallByName Inspect.231 Inspect.327 Inspect.228;
    dec Inspect.327;
    let Inspect.324 : {} = Struct {};
    let Inspect.319 : Str = CallByName Inspect.243 Inspect.323;
    let Inspect.320 : Str = "}";
    let Inspect.318 : Str = CallByName Inspect.63 Inspect.319 Inspect.320;
    dec Inspect.320;
    ret Inspect.318;

procedure Inspect.231 (Inspect.232, Inspect.228):
    let Inspect.351 : Int1 = CallByName Bool.1;
    inc Inspect.232;
    let Inspect.331 : {Str, Int1} = Struct {Inspect.232, Inspect.351};
    let Inspect.332 : {} = Struct {};
    let Inspect.330 : {Str, Int1} = CallByName List.18 Inspect.228 Inspect.331 Inspect.332;
    ret Inspect.330;

procedure Inspect.233 (Inspect.333, Inspect.334):
    let Inspect.237 : [C I64, C Decimal] = StructAtIndex 0 Inspect.334;
    let Inspect.236 : Str = StructAtIndex 1 Inspect.334;
    let Inspect.234 : Str = StructAtIndex 0 Inspect.333;
    let Inspect.235 : Int1 = StructAtIndex 1 Inspect.333;
    joinpoint Inspect.349 Inspect.238:
        let Inspect.346 : Str = CallByName Inspect.63 Inspect.238 Inspect.236;
        dec Inspect.236;
        let Inspect.347 : Str = ": ";
        let Inspect.340 : Str = CallByName Inspect.63 Inspect.346 Inspect.347;
        dec Inspect.347;
        let Inspect.336 : Str = CallByName Inspect.239 Inspect.340 Inspect.237;
        let Inspect.337 : {} = Struct {};
        let Inspect.335 : {Str, Int1} = CallByName Inspect.241 Inspect.336;
        dec Inspect.336;
        ret Inspect.335;
    in
    if Inspect.235 then
        let Inspect.350 : Str = ", ";
        let Inspect.348 : Str = CallByName Inspect.63 Inspect.234 Inspect.350;
        dec Inspect.350;
        jump Inspect.349 Inspect.348;
    else
        jump Inspect.349 Inspect.234;

procedure Inspect.239 (Inspect.240, Inspect.237):
    let Inspect.343 : Str = CallByName Inspect.31 Inspect.237 Inspect.240;
    ret Inspect.343;

procedure Inspect.241 (Inspect.242):
    let Inspect.339 : Int1 = CallByName Bool.2;
    inc Inspect.242;
    let Inspect.338 : {Str, Int1} = Struct {Inspect.242, Inspect.339};
    ret Inspect.338;

procedure Inspect.243 (Inspect.325):
    let Inspect.326 : Str = StructAtIndex 0 Inspect.325;
    ret Inspect.326;

procedure Inspect.277 (Inspect.278, #Attr.12):
    let Inspect.365 : I64 = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Inspect.364 : Str = CallByName Num.96 Inspect.365;
    let Inspect.363 : Str = CallByName Inspect.63 Inspect.278 Inspect.364;
    dec Inspect.364;
    ret Inspect.363;

procedure Inspect.292 (Inspect.293, #Attr.12):
    let Inspect.359 : Decimal = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Inspect.358 : Str = CallByName Num.96 Inspect.359;
    let Inspect.357 : Str = CallByName Inspect.63 Inspect.293 Inspect.358;
    dec Inspect.358;
    ret Inspect.357;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.302, Inspect.149):
    let Inspect.313 : Str = CallByName Inspect.229 Inspect.149 Inspect.302;
    ret Inspect.313;

procedure Inspect.31 (Inspect.302, Inspect.149):
    let Inspect.345 : U8 = GetTagId Inspect.302;
    switch Inspect.345:
        case 0:
            let Inspect.344 : Str = CallByName Inspect.277 Inspect.149 Inspect.302;
            ret Inspect.344;
    
        default:
            let Inspect.344 : Str = CallByName Inspect.292 Inspect.149 Inspect.302;
            ret Inspect.344;
    

procedure Inspect.33 (Inspect.152):
    let Inspect.304 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.303 : Str = CallByName Inspect.64 Inspect.304;
    ret Inspect.303;

procedure Inspect.39 (Inspect.300):
    let Inspect.310 : Str = "";
    ret Inspect.310;

procedure Inspect.45 (Inspect.228):
    let Inspect.314 : List {[C I64, C Decimal], Str} = CallByName Inspect.30 Inspect.228;
    ret Inspect.314;

procedure Inspect.5 (Inspect.150):
    let Inspect.311 : {Decimal, I64} = CallByName #Derived.0 Inspect.150;
    let Inspect.308 : {} = Struct {};
    let Inspect.307 : Str = CallByName Inspect.39 Inspect.308;
    let Inspect.306 : Str = CallByName #Derived.2 Inspect.307 Inspect.311;
    ret Inspect.306;

procedure Inspect.57 (Inspect.276):
    let Inspect.361 : [C I64, C Decimal] = TagId(0) Inspect.276;
    let Inspect.360 : [C I64, C Decimal] = CallByName Inspect.30 Inspect.361;
    ret Inspect.360;

procedure Inspect.62 (Inspect.291):
    let Inspect.354 : [C I64, C Decimal] = TagId(1) Inspect.291;
    let Inspect.353 : [C I64, C Decimal] = CallByName Inspect.30 Inspect.354;
    ret Inspect.353;

procedure Inspect.63 (Inspect.299, Inspect.295):
    let Inspect.322 : Str = CallByName Str.3 Inspect.299 Inspect.295;
    ret Inspect.322;

procedure Inspect.64 (Inspect.301):
    ret Inspect.301;

procedure List.100 (#Derived_gen.20, #Derived_gen.21, #Derived_gen.22, #Derived_gen.23, #Derived_gen.24):
    joinpoint List.668 List.174 List.175 List.176 List.177 List.178:
        let List.670 : Int1 = CallByName Num.22 List.177 List.178;
        if List.670 then
            let List.674 : {[C I64, C Decimal], Str} = CallByName List.66 List.174 List.177;
            inc List.674;
            let List.179 : {Str, Int1} = CallByName Inspect.233 List.175 List.674;
            let List.673 : U64 = 1i64;
            let List.672 : U64 = CallByName Num.51 List.177 List.673;
            jump List.668 List.174 List.179 List.176 List.672 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.20;
    jump List.668 #Derived_gen.20 #Derived_gen.21 #Derived_gen.22 #Derived_gen.23 #Derived_gen.24;

procedure List.18 (List.171, List.172, List.173):
    let List.666 : U64 = 0i64;
    let List.667 : U64 = CallByName List.6 List.171;
    let List.665 : {Str, Int1} = CallByName List.100 List.171 List.172 List.173 List.666 List.667;
    ret List.665;

procedure List.6 (#Attr.2):
    let List.676 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.676;

procedure List.66 (#Attr.2, #Attr.3):
    let List.675 : {[C I64, C Decimal], Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.675;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.96 (#Attr.2):
    let Num.283 : Str = lowlevel NumToStr #Attr.2;
    ret Num.283;

procedure Num.96 (#Attr.2):
    let Num.284 : Str = lowlevel NumToStr #Attr.2;
    ret Num.284;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.246 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.246;

procedure Test.0 ():
    let Test.3 : Decimal = 3dec;
    let Test.4 : I64 = 7i64;
    let Test.2 : {Decimal, I64} = Struct {Test.3, Test.4};
    let Test.1 : Str = CallByName Inspect.33 Test.2;
    ret Test.1;
