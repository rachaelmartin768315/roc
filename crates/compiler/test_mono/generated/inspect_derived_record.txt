procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Decimal, I64} = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.1):
    let #Derived_gen.13 : I64 = StructAtIndex 1 #Derived.1;
    let #Derived_gen.11 : [C I64, C Decimal] = CallByName Inspect.54 #Derived_gen.13;
    let #Derived_gen.12 : Str = "a";
    let #Derived_gen.6 : {[C I64, C Decimal], Str} = Struct {#Derived_gen.11, #Derived_gen.12};
    let #Derived_gen.10 : Decimal = StructAtIndex 0 #Derived.1;
    let #Derived_gen.8 : [C I64, C Decimal] = CallByName Inspect.60 #Derived_gen.10;
    let #Derived_gen.9 : Str = "b";
    let #Derived_gen.7 : {[C I64, C Decimal], Str} = Struct {#Derived_gen.8, #Derived_gen.9};
    let #Derived_gen.5 : List {[C I64, C Decimal], Str} = Array [#Derived_gen.6, #Derived_gen.7];
    let #Derived_gen.4 : List {[C I64, C Decimal], Str} = CallByName Inspect.42 #Derived_gen.5;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.3;
    ret #Derived_gen.3;

procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Inspect.228 (Inspect.229, Inspect.227):
    let Inspect.351 : Str = "{";
    let Inspect.328 : Str = CallByName Inspect.61 Inspect.229 Inspect.351;
    let Inspect.324 : {Str, Int1} = CallByName Inspect.230 Inspect.328 Inspect.227;
    let Inspect.325 : {} = Struct {};
    let Inspect.320 : Str = CallByName Inspect.242 Inspect.324;
    let Inspect.321 : Str = "}";
    let Inspect.319 : Str = CallByName Inspect.61 Inspect.320 Inspect.321;
    ret Inspect.319;

procedure Inspect.230 (Inspect.231, Inspect.227):
    let Bool.1 : Int1 = CallByName Bool.1;
    let Inspect.332 : {Str, Int1} = Struct {Inspect.231, Bool.1};
    let Inspect.333 : {} = Struct {};
    let Inspect.331 : {Str, Int1} = CallByName List.18 Inspect.227 Inspect.332 Inspect.333;
    ret Inspect.331;

procedure Inspect.232 (Inspect.334, Inspect.335):
    let Inspect.236 : [C I64, C Decimal] = StructAtIndex 0 Inspect.335;
    let Inspect.235 : Str = StructAtIndex 1 Inspect.335;
    let Inspect.233 : Str = StructAtIndex 0 Inspect.334;
    let Inspect.234 : Int1 = StructAtIndex 1 Inspect.334;
    joinpoint Inspect.349 Inspect.237:
        let Inspect.346 : Str = CallByName Inspect.61 Inspect.237 Inspect.235;
        let Inspect.347 : Str = ": ";
        let Inspect.340 : Str = CallByName Inspect.61 Inspect.346 Inspect.347;
        let Inspect.337 : Str = CallByName Inspect.238 Inspect.340 Inspect.236;
        let Inspect.338 : {} = Struct {};
        let Inspect.336 : {Str, Int1} = CallByName Inspect.240 Inspect.337;
        ret Inspect.336;
    in
    if Inspect.234 then
        let Inspect.350 : Str = ", ";
        let Inspect.348 : Str = CallByName Inspect.61 Inspect.233 Inspect.350;
        jump Inspect.349 Inspect.348;
    else
        jump Inspect.349 Inspect.233;

procedure Inspect.238 (Inspect.239, Inspect.236):
    let Inspect.343 : Str = CallByName Inspect.31 Inspect.236 Inspect.239;
    ret Inspect.343;

procedure Inspect.240 (Inspect.241):
    let Bool.2 : Int1 = CallByName Bool.2;
    let Inspect.339 : {Str, Int1} = Struct {Inspect.241, Bool.2};
    ret Inspect.339;

procedure Inspect.242 (Inspect.326):
    let Inspect.327 : Str = StructAtIndex 0 Inspect.326;
    ret Inspect.327;

procedure Inspect.277 (Inspect.278, #Attr.12):
    let Inspect.364 : I64 = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Inspect.363 : Str = CallByName Num.96 Inspect.364;
    let Inspect.362 : Str = CallByName Inspect.61 Inspect.278 Inspect.363;
    ret Inspect.362;

procedure Inspect.295 (Inspect.296, #Attr.12):
    let Inspect.358 : Decimal = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Inspect.357 : Str = CallByName Num.96 Inspect.358;
    let Inspect.356 : Str = CallByName Inspect.61 Inspect.296 Inspect.357;
    ret Inspect.356;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.305, Inspect.149):
    let Inspect.314 : Str = CallByName Inspect.228 Inspect.149 Inspect.305;
    ret Inspect.314;

procedure Inspect.31 (Inspect.305, Inspect.149):
    let Inspect.345 : U8 = GetTagId Inspect.305;
    switch Inspect.345:
        case 0:
            let Inspect.344 : Str = CallByName Inspect.277 Inspect.149 Inspect.305;
            ret Inspect.344;
    
        default:
            let Inspect.344 : Str = CallByName Inspect.295 Inspect.149 Inspect.305;
            ret Inspect.344;
    

procedure Inspect.35 (Inspect.300):
    ret Inspect.300;

procedure Inspect.36 (Inspect.304):
    let Inspect.311 : Str = "";
    ret Inspect.311;

procedure Inspect.42 (Inspect.227):
    let Inspect.315 : List {[C I64, C Decimal], Str} = CallByName Inspect.30 Inspect.227;
    ret Inspect.315;

procedure Inspect.5 (Inspect.150):
    let Inspect.312 : {Decimal, I64} = CallByName #Derived.0 Inspect.150;
    let Inspect.309 : {} = Struct {};
    let Inspect.308 : Str = CallByName Inspect.36 Inspect.309;
    let Inspect.307 : Str = CallByName #Derived.2 Inspect.308 Inspect.312;
    ret Inspect.307;

procedure Inspect.54 (Inspect.276):
    let Inspect.360 : [C I64, C Decimal] = TagId(0) Inspect.276;
    let Inspect.359 : [C I64, C Decimal] = CallByName Inspect.30 Inspect.360;
    ret Inspect.359;

procedure Inspect.60 (Inspect.294):
    let Inspect.353 : [C I64, C Decimal] = TagId(1) Inspect.294;
    let Inspect.352 : [C I64, C Decimal] = CallByName Inspect.30 Inspect.353;
    ret Inspect.352;

procedure Inspect.61 (Inspect.303, Inspect.298):
    let Inspect.323 : Str = CallByName Str.3 Inspect.303 Inspect.298;
    dec Inspect.298;
    ret Inspect.323;

procedure List.18 (List.154, List.155, List.156):
    let List.554 : U64 = 0i64;
    let List.555 : U64 = CallByName List.6 List.154;
    let List.553 : {Str, Int1} = CallByName List.88 List.154 List.155 List.156 List.554 List.555;
    ret List.553;

procedure List.6 (#Attr.2):
    let List.564 : U64 = lowlevel ListLen #Attr.2;
    ret List.564;

procedure List.66 (#Attr.2, #Attr.3):
    let List.563 : {[C I64, C Decimal], Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.563;

procedure List.88 (#Derived_gen.14, #Derived_gen.15, #Derived_gen.16, #Derived_gen.17, #Derived_gen.18):
    joinpoint List.556 List.157 List.158 List.159 List.160 List.161:
        let List.558 : Int1 = CallByName Num.22 List.160 List.161;
        if List.558 then
            let List.562 : {[C I64, C Decimal], Str} = CallByName List.66 List.157 List.160;
            inc List.562;
            let List.162 : {Str, Int1} = CallByName Inspect.232 List.158 List.562;
            let List.561 : U64 = 1i64;
            let List.560 : U64 = CallByName Num.51 List.160 List.561;
            jump List.556 List.157 List.162 List.159 List.560 List.161;
        else
            dec List.157;
            ret List.158;
    in
    jump List.556 #Derived_gen.14 #Derived_gen.15 #Derived_gen.16 #Derived_gen.17 #Derived_gen.18;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.294 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.293;

procedure Num.96 (#Attr.2):
    let Num.291 : Str = lowlevel NumToStr #Attr.2;
    ret Num.291;

procedure Num.96 (#Attr.2):
    let Num.292 : Str = lowlevel NumToStr #Attr.2;
    ret Num.292;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.292 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.292;

procedure Test.0 ():
    let Test.4 : Decimal = 3dec;
    let Test.5 : I64 = 7i64;
    let Test.3 : {Decimal, I64} = Struct {Test.4, Test.5};
    let Test.2 : Str = CallByName Inspect.5 Test.3;
    let Test.1 : Str = CallByName Inspect.35 Test.2;
    ret Test.1;
