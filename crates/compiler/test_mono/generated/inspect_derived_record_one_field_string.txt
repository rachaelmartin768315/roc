procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName Inspect.47 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Inspect.45 #Derived_gen.5;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.3;
    dec #Derived_gen.4;
    ret #Derived_gen.3;

procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Inspect.225 (Inspect.226, Inspect.224):
    let Inspect.337 : Str = "{";
    let Inspect.227 : Str = CallByName Inspect.63 Inspect.226 Inspect.337;
    dec Inspect.337;
    let Inspect.336 : Int1 = CallByName Bool.1;
    let Inspect.317 : {Str, Int1} = Struct {Inspect.227, Inspect.336};
    let Inspect.318 : {} = Struct {};
    let Inspect.316 : {Str, Int1} = CallByName List.18 Inspect.224 Inspect.317 Inspect.318;
    let Inspect.228 : Str = StructAtIndex 0 Inspect.316;
    let Inspect.313 : Str = "}";
    let Inspect.312 : Str = CallByName Inspect.63 Inspect.228 Inspect.313;
    dec Inspect.313;
    ret Inspect.312;

procedure Inspect.229 (Inspect.319, Inspect.320):
    let Inspect.232 : Str = StructAtIndex 0 Inspect.320;
    let Inspect.233 : Str = StructAtIndex 1 Inspect.320;
    let Inspect.230 : Str = StructAtIndex 0 Inspect.319;
    let Inspect.231 : Int1 = StructAtIndex 1 Inspect.319;
    joinpoint Inspect.334 Inspect.234:
        let Inspect.331 : Str = CallByName Inspect.63 Inspect.234 Inspect.232;
        dec Inspect.232;
        let Inspect.332 : Str = ": ";
        let Inspect.326 : Str = CallByName Inspect.63 Inspect.331 Inspect.332;
        dec Inspect.332;
        let Inspect.322 : Str = CallByName Inspect.235 Inspect.326 Inspect.233;
        dec Inspect.233;
        let Inspect.323 : {} = Struct {};
        let Inspect.321 : {Str, Int1} = CallByName Inspect.237 Inspect.322;
        dec Inspect.322;
        ret Inspect.321;
    in
    if Inspect.231 then
        let Inspect.335 : Str = ", ";
        let Inspect.333 : Str = CallByName Inspect.63 Inspect.230 Inspect.335;
        dec Inspect.335;
        jump Inspect.334 Inspect.333;
    else
        jump Inspect.334 Inspect.230;

procedure Inspect.235 (Inspect.236, Inspect.233):
    let Inspect.329 : Str = CallByName Inspect.31 Inspect.233 Inspect.236;
    ret Inspect.329;

procedure Inspect.237 (Inspect.238):
    let Inspect.325 : Int1 = CallByName Bool.2;
    inc Inspect.238;
    let Inspect.324 : {Str, Int1} = Struct {Inspect.238, Inspect.325};
    ret Inspect.324;

procedure Inspect.244 (Inspect.245, Inspect.243):
    let Inspect.345 : Str = "\"";
    let Inspect.344 : Str = CallByName Inspect.63 Inspect.245 Inspect.345;
    dec Inspect.345;
    let Inspect.342 : Str = CallByName Inspect.63 Inspect.344 Inspect.243;
    let Inspect.343 : Str = "\"";
    let Inspect.341 : Str = CallByName Inspect.63 Inspect.342 Inspect.343;
    dec Inspect.343;
    ret Inspect.341;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.297, Inspect.149):
    let Inspect.308 : Str = CallByName Inspect.225 Inspect.149 Inspect.297;
    ret Inspect.308;

procedure Inspect.31 (Inspect.297, Inspect.149):
    let Inspect.330 : Str = CallByName Inspect.244 Inspect.149 Inspect.297;
    ret Inspect.330;

procedure Inspect.33 (Inspect.152):
    let Inspect.299 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.298 : Str = CallByName Inspect.64 Inspect.299;
    ret Inspect.298;

procedure Inspect.39 (Inspect.295):
    let Inspect.305 : Str = "";
    ret Inspect.305;

procedure Inspect.45 (Inspect.224):
    let Inspect.309 : List {Str, Str} = CallByName Inspect.30 Inspect.224;
    ret Inspect.309;

procedure Inspect.47 (Inspect.243):
    let Inspect.338 : Str = CallByName Inspect.30 Inspect.243;
    ret Inspect.338;

procedure Inspect.5 (Inspect.150):
    let Inspect.306 : Str = CallByName #Derived.0 Inspect.150;
    let Inspect.303 : {} = Struct {};
    let Inspect.302 : Str = CallByName Inspect.39 Inspect.303;
    let Inspect.301 : Str = CallByName #Derived.2 Inspect.302 Inspect.306;
    ret Inspect.301;

procedure Inspect.63 (Inspect.294, Inspect.290):
    let Inspect.315 : Str = CallByName Str.3 Inspect.294 Inspect.290;
    ret Inspect.315;

procedure Inspect.64 (Inspect.296):
    ret Inspect.296;

procedure List.100 (#Derived_gen.12, #Derived_gen.13, #Derived_gen.14, #Derived_gen.15, #Derived_gen.16):
    joinpoint List.668 List.174 List.175 List.176 List.177 List.178:
        let List.670 : Int1 = CallByName Num.22 List.177 List.178;
        if List.670 then
            let List.674 : {Str, Str} = CallByName List.66 List.174 List.177;
            inc List.674;
            let List.179 : {Str, Int1} = CallByName Inspect.229 List.175 List.674;
            let List.673 : U64 = 1i64;
            let List.672 : U64 = CallByName Num.51 List.177 List.673;
            jump List.668 List.174 List.179 List.176 List.672 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.12;
    jump List.668 #Derived_gen.12 #Derived_gen.13 #Derived_gen.14 #Derived_gen.15 #Derived_gen.16;

procedure List.18 (List.171, List.172, List.173):
    let List.666 : U64 = 0i64;
    let List.667 : U64 = CallByName List.6 List.171;
    let List.665 : {Str, Int1} = CallByName List.100 List.171 List.172 List.173 List.666 List.667;
    ret List.665;

procedure List.6 (#Attr.2):
    let List.676 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.676;

procedure List.66 (#Attr.2, #Attr.3):
    let List.675 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.675;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.246 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.246;

procedure Test.0 ():
    let Test.3 : Str = "foo";
    let Test.1 : Str = CallByName Inspect.33 Test.3;
    ret Test.1;
