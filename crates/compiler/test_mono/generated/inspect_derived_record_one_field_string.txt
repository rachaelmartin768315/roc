procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName Inspect.43 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Inspect.41 #Derived_gen.5;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.3;
    ret #Derived_gen.3;

procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Inspect.225 (Inspect.226, Inspect.224):
    let Inspect.348 : Str = "{";
    let Inspect.324 : Str = CallByName Inspect.59 Inspect.226 Inspect.348;
    let Inspect.320 : {Str, Int1} = CallByName Inspect.227 Inspect.324 Inspect.224;
    let Inspect.321 : {} = Struct {};
    let Inspect.316 : Str = CallByName Inspect.239 Inspect.320;
    let Inspect.317 : Str = "}";
    let Inspect.315 : Str = CallByName Inspect.59 Inspect.316 Inspect.317;
    ret Inspect.315;

procedure Inspect.227 (Inspect.228, Inspect.224):
    let Inspect.347 : Int1 = CallByName Bool.1;
    let Inspect.328 : {Str, Int1} = Struct {Inspect.228, Inspect.347};
    let Inspect.329 : {} = Struct {};
    let Inspect.327 : {Str, Int1} = CallByName List.18 Inspect.224 Inspect.328 Inspect.329;
    ret Inspect.327;

procedure Inspect.229 (Inspect.330, Inspect.331):
    let Inspect.232 : Str = StructAtIndex 0 Inspect.331;
    let Inspect.233 : Str = StructAtIndex 1 Inspect.331;
    let Inspect.230 : Str = StructAtIndex 0 Inspect.330;
    let Inspect.231 : Int1 = StructAtIndex 1 Inspect.330;
    joinpoint Inspect.345 Inspect.234:
        let Inspect.342 : Str = CallByName Inspect.59 Inspect.234 Inspect.232;
        let Inspect.343 : Str = ": ";
        let Inspect.337 : Str = CallByName Inspect.59 Inspect.342 Inspect.343;
        let Inspect.333 : Str = CallByName Inspect.235 Inspect.337 Inspect.233;
        let Inspect.334 : {} = Struct {};
        let Inspect.332 : {Str, Int1} = CallByName Inspect.237 Inspect.333;
        ret Inspect.332;
    in
    if Inspect.231 then
        let Inspect.346 : Str = ", ";
        let Inspect.344 : Str = CallByName Inspect.59 Inspect.230 Inspect.346;
        jump Inspect.345 Inspect.344;
    else
        jump Inspect.345 Inspect.230;

procedure Inspect.235 (Inspect.236, Inspect.233):
    let Inspect.340 : Str = CallByName Inspect.31 Inspect.233 Inspect.236;
    ret Inspect.340;

procedure Inspect.237 (Inspect.238):
    let Inspect.336 : Int1 = CallByName Bool.2;
    let Inspect.335 : {Str, Int1} = Struct {Inspect.238, Inspect.336};
    ret Inspect.335;

procedure Inspect.239 (Inspect.322):
    let Inspect.323 : Str = StructAtIndex 0 Inspect.322;
    ret Inspect.323;

procedure Inspect.246 (Inspect.247, Inspect.245):
    let Inspect.357 : Str = "\"";
    let Inspect.356 : Str = CallByName Inspect.59 Inspect.247 Inspect.357;
    let Inspect.354 : Str = CallByName Inspect.59 Inspect.356 Inspect.245;
    let Inspect.355 : Str = "\"";
    let Inspect.353 : Str = CallByName Inspect.59 Inspect.354 Inspect.355;
    ret Inspect.353;

procedure Inspect.30 (Inspect.143):
    ret Inspect.143;

procedure Inspect.30 (Inspect.143):
    ret Inspect.143;

procedure Inspect.30 (Inspect.143):
    ret Inspect.143;

procedure Inspect.31 (Inspect.299, Inspect.145):
    let Inspect.310 : Str = CallByName Inspect.225 Inspect.145 Inspect.299;
    ret Inspect.310;

procedure Inspect.31 (Inspect.299, Inspect.145):
    let Inspect.341 : Str = CallByName Inspect.246 Inspect.145 Inspect.299;
    ret Inspect.341;

procedure Inspect.33 (Inspect.148):
    let Inspect.301 : Str = CallByName Inspect.5 Inspect.148;
    let Inspect.300 : Str = CallByName Inspect.60 Inspect.301;
    ret Inspect.300;

procedure Inspect.35 (Inspect.297):
    let Inspect.307 : Str = "";
    ret Inspect.307;

procedure Inspect.41 (Inspect.224):
    let Inspect.311 : List {Str, Str} = CallByName Inspect.30 Inspect.224;
    ret Inspect.311;

procedure Inspect.43 (Inspect.245):
    let Inspect.349 : Str = CallByName Inspect.30 Inspect.245;
    ret Inspect.349;

procedure Inspect.5 (Inspect.146):
    let Inspect.308 : Str = CallByName #Derived.0 Inspect.146;
    let Inspect.305 : {} = Struct {};
    let Inspect.304 : Str = CallByName Inspect.35 Inspect.305;
    let Inspect.303 : Str = CallByName #Derived.2 Inspect.304 Inspect.308;
    ret Inspect.303;

procedure Inspect.59 (Inspect.296, Inspect.292):
    let Inspect.319 : Str = CallByName Str.3 Inspect.296 Inspect.292;
    dec Inspect.292;
    ret Inspect.319;

procedure Inspect.60 (Inspect.298):
    ret Inspect.298;

procedure List.18 (List.159, List.160, List.161):
    let List.573 : U64 = 0i64;
    let List.574 : U64 = CallByName List.6 List.159;
    let List.572 : {Str, Int1} = CallByName List.91 List.159 List.160 List.161 List.573 List.574;
    ret List.572;

procedure List.6 (#Attr.2):
    let List.583 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.583;

procedure List.66 (#Attr.2, #Attr.3):
    let List.582 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.582;

procedure List.91 (#Derived_gen.18, #Derived_gen.19, #Derived_gen.20, #Derived_gen.21, #Derived_gen.22):
    joinpoint List.575 List.162 List.163 List.164 List.165 List.166:
        let List.577 : Int1 = CallByName Num.22 List.165 List.166;
        if List.577 then
            let List.581 : {Str, Str} = CallByName List.66 List.162 List.165;
            inc List.581;
            let List.167 : {Str, Int1} = CallByName Inspect.229 List.163 List.581;
            let List.580 : U64 = 1i64;
            let List.579 : U64 = CallByName Num.51 List.165 List.580;
            jump List.575 List.162 List.167 List.164 List.579 List.166;
        else
            dec List.162;
            ret List.163;
    in
    jump List.575 #Derived_gen.18 #Derived_gen.19 #Derived_gen.20 #Derived_gen.21 #Derived_gen.22;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.280 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.280;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.279 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.279;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.232 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.232;

procedure Test.0 ():
    let Test.3 : Str = "foo";
    let Test.1 : Str = CallByName Inspect.33 Test.3;
    ret Test.1;
