procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.24 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.24;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.25 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.25;

procedure Bool.3 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel And #Attr.2 #Attr.3;
    ret Bool.23;

procedure Inspect.245 (Inspect.246, Inspect.244):
    let Inspect.317 : Str = "\"";
    let Inspect.316 : Str = CallByName Inspect.63 Inspect.246 Inspect.317;
    dec Inspect.317;
    let Inspect.312 : Str = CallByName Inspect.63 Inspect.316 Inspect.244;
    let Inspect.313 : Str = "\"";
    let Inspect.311 : Str = CallByName Inspect.63 Inspect.312 Inspect.313;
    dec Inspect.313;
    ret Inspect.311;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.33 (Inspect.152):
    let Inspect.300 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.299 : Str = CallByName Inspect.64 Inspect.300;
    ret Inspect.299;

procedure Inspect.39 (Inspect.296):
    let Inspect.306 : Str = "";
    ret Inspect.306;

procedure Inspect.47 (Inspect.243):
    let Inspect.327 : Str = "\u{feff}";
    let Inspect.328 : Str = "\\u(feff)";
    let Inspect.324 : Str = CallByName Str.45 Inspect.243 Inspect.327 Inspect.328;
    dec Inspect.327;
    dec Inspect.328;
    let Inspect.325 : Str = "\u{200b}";
    let Inspect.326 : Str = "\\u(200b)";
    let Inspect.321 : Str = CallByName Str.45 Inspect.324 Inspect.325 Inspect.326;
    dec Inspect.326;
    dec Inspect.325;
    let Inspect.322 : Str = "\u{200c}";
    let Inspect.323 : Str = "\\u(200c)";
    let Inspect.318 : Str = CallByName Str.45 Inspect.321 Inspect.322 Inspect.323;
    dec Inspect.322;
    dec Inspect.323;
    let Inspect.319 : Str = "\u{200d}";
    let Inspect.320 : Str = "\\u(200d)";
    let Inspect.244 : Str = CallByName Str.45 Inspect.318 Inspect.319 Inspect.320;
    dec Inspect.319;
    dec Inspect.320;
    let Inspect.308 : Str = CallByName Inspect.30 Inspect.244;
    ret Inspect.308;

procedure Inspect.5 (Inspect.150):
    let Inspect.307 : Str = CallByName Inspect.47 Inspect.150;
    let Inspect.304 : {} = Struct {};
    let Inspect.303 : Str = CallByName Inspect.39 Inspect.304;
    let Inspect.302 : Str = CallByName Inspect.245 Inspect.303 Inspect.307;
    dec Inspect.307;
    ret Inspect.302;

procedure Inspect.63 (Inspect.295, Inspect.291):
    let Inspect.315 : Str = CallByName Str.3 Inspect.295 Inspect.291;
    ret Inspect.315;

procedure Inspect.64 (Inspect.297):
    ret Inspect.297;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.288 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.290 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.290;

procedure Num.23 (#Attr.2, #Attr.3):
    let Num.292 : Int1 = lowlevel NumLte #Attr.2 #Attr.3;
    ret Num.292;

procedure Num.25 (#Attr.2, #Attr.3):
    let Num.289 : Int1 = lowlevel NumGte #Attr.2 #Attr.3;
    ret Num.289;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.286 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.53 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumAddSaturated #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.293;

procedure Str.20 (#Attr.2):
    let Str.445 : Str = lowlevel StrWithCapacity #Attr.2;
    ret Str.445;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.378 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.378;

procedure Str.35 (#Attr.2, #Attr.3):
    let Str.435 : U8 = lowlevel StrGetUnsafe #Attr.2 #Attr.3;
    ret Str.435;

procedure Str.36 (#Attr.2):
    let Str.398 : U64 = lowlevel StrCountUtf8Bytes #Attr.2;
    ret Str.398;

procedure Str.37 (#Attr.2, #Attr.3, #Attr.4):
    let Str.396 : Str = lowlevel StrSubstringUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret Str.396;

procedure Str.38 (Str.210, Str.211):
    let Str.392 : [C , C U64] = CallByName Str.62 Str.210 Str.211;
    let Str.405 : U8 = 1i64;
    let Str.406 : U8 = GetTagId Str.392;
    let Str.407 : Int1 = lowlevel Eq Str.405 Str.406;
    if Str.407 then
        let Str.212 : U64 = UnionAtIndex (Id 1) (Index 0) Str.392;
        let Str.401 : U64 = CallByName Str.36 Str.210;
        let Str.402 : U64 = CallByName Str.36 Str.211;
        let Str.400 : U64 = CallByName Num.20 Str.401 Str.402;
        let Str.213 : U64 = CallByName Num.20 Str.400 Str.212;
        let Str.399 : U64 = 0i64;
        inc Str.210;
        let Str.214 : Str = CallByName Str.37 Str.210 Str.399 Str.212;
        let Str.397 : U64 = CallByName Str.36 Str.211;
        let Str.395 : U64 = CallByName Num.51 Str.212 Str.397;
        let Str.215 : Str = CallByName Str.37 Str.210 Str.395 Str.213;
        let Str.394 : {Str, Str} = Struct {Str.215, Str.214};
        let Str.393 : [C {}, C {Str, Str}] = TagId(1) Str.394;
        ret Str.393;
    else
        dec Str.210;
        let Str.404 : {} = Struct {};
        let Str.403 : [C {}, C {Str, Str}] = TagId(0) Str.404;
        ret Str.403;

procedure Str.45 (Str.189, Str.190, Str.191):
    inc Str.189;
    let Str.473 : [C {}, C {Str, Str}] = CallByName Str.38 Str.189 Str.190;
    let Str.481 : U8 = 1i64;
    let Str.482 : U8 = GetTagId Str.473;
    let Str.483 : Int1 = lowlevel Eq Str.481 Str.482;
    if Str.483 then
        let Str.480 : {Str, Str} = UnionAtIndex (Id 1) (Index 0) Str.473;
        let Str.193 : Str = StructAtIndex 0 Str.480;
        let Str.192 : Str = StructAtIndex 1 Str.480;
        let Str.478 : U64 = CallByName Str.36 Str.189;
        dec Str.189;
        let Str.477 : Str = CallByName Str.20 Str.478;
        let Str.476 : Str = CallByName Str.3 Str.477 Str.192;
        dec Str.192;
        let Str.475 : Str = CallByName Str.3 Str.476 Str.191;
        let Str.474 : Str = CallByName Str.61 Str.475 Str.193 Str.190 Str.191;
        ret Str.474;
    else
        dec Str.473;
        ret Str.189;

procedure Str.61 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3):
    joinpoint Str.382 Str.194 Str.195 Str.196 Str.197:
        inc Str.195;
        let Str.383 : [C {}, C {Str, Str}] = CallByName Str.38 Str.195 Str.196;
        let Str.389 : U8 = 1i64;
        let Str.390 : U8 = GetTagId Str.383;
        let Str.391 : Int1 = lowlevel Eq Str.389 Str.390;
        if Str.391 then
            dec Str.195;
            let Str.388 : {Str, Str} = UnionAtIndex (Id 1) (Index 0) Str.383;
            let Str.199 : Str = StructAtIndex 0 Str.388;
            let Str.198 : Str = StructAtIndex 1 Str.388;
            let Str.386 : Str = CallByName Str.3 Str.194 Str.198;
            dec Str.198;
            let Str.385 : Str = CallByName Str.3 Str.386 Str.197;
            jump Str.382 Str.385 Str.199 Str.196 Str.197;
        else
            dec Str.196;
            dec Str.383;
            dec Str.197;
            let Str.387 : Str = CallByName Str.3 Str.194 Str.195;
            dec Str.195;
            ret Str.387;
    in
    inc #Derived_gen.3;
    inc #Derived_gen.2;
    jump Str.382 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3;

procedure Str.62 (Str.219, Str.220):
    let Str.221 : U64 = CallByName Str.36 Str.219;
    let Str.222 : U64 = CallByName Str.36 Str.220;
    let Str.223 : U64 = CallByName Num.77 Str.221 Str.222;
    let Str.409 : U64 = 0i64;
    let Str.408 : [C , C U64] = CallByName Str.63 Str.219 Str.220 Str.409 Str.223;
    ret Str.408;

procedure Str.63 (#Derived_gen.4, #Derived_gen.5, #Derived_gen.6, #Derived_gen.7):
    joinpoint Str.410 Str.224 Str.225 Str.226 Str.227:
        let Str.412 : Int1 = CallByName Num.23 Str.226 Str.227;
        if Str.412 then
            let Str.416 : Int1 = CallByName Str.67 Str.224 Str.226 Str.225;
            if Str.416 then
                dec Str.224;
                dec Str.225;
                let Str.417 : [C , C U64] = TagId(1) Str.226;
                ret Str.417;
            else
                let Str.415 : U64 = 1i64;
                let Str.414 : U64 = CallByName Num.51 Str.226 Str.415;
                jump Str.410 Str.224 Str.225 Str.414 Str.227;
        else
            dec Str.224;
            dec Str.225;
            let Str.411 : [C , C U64] = TagId(0) ;
            ret Str.411;
    in
    inc #Derived_gen.5;
    inc #Derived_gen.4;
    jump Str.410 #Derived_gen.4 #Derived_gen.5 #Derived_gen.6 #Derived_gen.7;

procedure Str.66 (Str.250, Str.251):
    let Str.440 : Int1 = CallByName Num.22 Str.250 Str.251;
    if Str.440 then
        ret Str.250;
    else
        ret Str.251;

procedure Str.67 (Str.252, Str.253, Str.254):
    let Str.255 : U64 = CallByName Str.36 Str.252;
    let Str.256 : U64 = CallByName Str.36 Str.254;
    let Str.438 : U64 = CallByName Num.53 Str.253 Str.256;
    let Str.257 : U64 = CallByName Str.66 Str.438 Str.255;
    let Str.437 : U64 = 0i64;
    inc Str.252;
    inc Str.254;
    let Str.419 : {U64, Str, U64, Str, U64, U64} = Struct {Str.257, Str.252, Str.253, Str.254, Str.437, Str.256};
    let Str.418 : Int1 = CallByName Str.68 Str.419;
    ret Str.418;

procedure Str.68 (Str.258):
    let Str.264 : U64 = StructAtIndex 0 Str.258;
    let Str.259 : Str = StructAtIndex 1 Str.258;
    let Str.260 : U64 = StructAtIndex 2 Str.258;
    let Str.261 : Str = StructAtIndex 3 Str.258;
    let Str.262 : U64 = StructAtIndex 4 Str.258;
    let Str.263 : U64 = StructAtIndex 5 Str.258;
    let Str.265 : Int1 = CallByName Num.25 Str.260 Str.264;
    if Str.265 then
        dec Str.259;
        dec Str.261;
        let Str.266 : Int1 = CallByName Bool.11 Str.262 Str.263;
        ret Str.266;
    else
        let Str.433 : U8 = CallByName Str.35 Str.259 Str.260;
        let Str.434 : U8 = CallByName Str.35 Str.261 Str.262;
        let Str.267 : Int1 = CallByName Bool.11 Str.433 Str.434;
        let Str.423 : U64 = StructAtIndex 0 Str.258;
        let Str.424 : Str = StructAtIndex 1 Str.258;
        let Str.426 : Str = StructAtIndex 3 Str.258;
        let Str.428 : U64 = StructAtIndex 5 Str.258;
        let Str.432 : U64 = 1i64;
        let Str.430 : U64 = CallByName Num.51 Str.262 Str.432;
        let Str.431 : U64 = 1i64;
        let Str.429 : U64 = CallByName Num.51 Str.260 Str.431;
        let Str.422 : {U64, Str, U64, Str, U64, U64} = Struct {Str.423, Str.424, Str.429, Str.426, Str.430, Str.428};
        let Str.268 : Int1 = CallByName Str.68 Str.422;
        let Str.421 : Int1 = CallByName Bool.3 Str.267 Str.268;
        ret Str.421;

procedure Test.0 ():
    let Test.3 : Str = "";
    let Test.1 : Str = CallByName Inspect.33 Test.3;
    dbg Test.1;
    dec Test.1;
    let Test.2 : I64 = 42i64;
    ret Test.2;
