procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.5 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Json.28 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.14 : Str = CallByName Encode.23 #Derived.6;
    ret #Derived_gen.14;

procedure #Derived.7 (#Derived.8, #Derived.9, #Derived.6):
    let #Derived_gen.21 : Str = "b";
    let #Derived_gen.22 : Str = CallByName Json.24 #Derived.6;
    let #Derived_gen.20 : {Str, Str} = Struct {#Derived_gen.21, #Derived_gen.22};
    let #Derived_gen.19 : List {Str, Str} = Array [#Derived_gen.20];
    let #Derived_gen.18 : List {Str, Str} = CallByName Json.28 #Derived_gen.19;
    let #Derived_gen.17 : List U8 = CallByName Encode.24 #Derived.8 #Derived_gen.18 #Derived.9;
    ret #Derived_gen.17;

procedure Bool.1 ():
    let Bool.76 : Int1 = false;
    ret Bool.76;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.77 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.77;

procedure Bool.2 ():
    let Bool.75 : Int1 = true;
    ret Bool.75;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.2 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Json.233 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.120 : List U8 = CallByName #Derived.7 Encode.99 Encode.101 Encode.107;
    ret Encode.120;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.130 : List U8 = CallByName Json.233 Encode.99 Encode.101 Encode.107;
    ret Encode.130;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.133 : List U8 = CallByName Json.181 Encode.99 Encode.101 Encode.107;
    ret Encode.133;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : Str = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.1171 : [C , C [], C , C , C , C ] = TagId(2) ;
    ret Json.1171;

procedure Json.100 (Json.850):
    let Json.1676 : Str = "A";
    let Json.1677 : Int1 = lowlevel Eq Json.1676 Json.850;
    dec Json.1676;
    if Json.1677 then
        dec Json.850;
        let Json.1599 : Str = "a";
        ret Json.1599;
    else
        let Json.1674 : Str = "B";
        let Json.1675 : Int1 = lowlevel Eq Json.1674 Json.850;
        dec Json.1674;
        if Json.1675 then
            dec Json.850;
            let Json.1600 : Str = "b";
            ret Json.1600;
        else
            let Json.1672 : Str = "C";
            let Json.1673 : Int1 = lowlevel Eq Json.1672 Json.850;
            dec Json.1672;
            if Json.1673 then
                dec Json.850;
                let Json.1601 : Str = "c";
                ret Json.1601;
            else
                let Json.1670 : Str = "D";
                let Json.1671 : Int1 = lowlevel Eq Json.1670 Json.850;
                dec Json.1670;
                if Json.1671 then
                    dec Json.850;
                    let Json.1602 : Str = "d";
                    ret Json.1602;
                else
                    let Json.1668 : Str = "E";
                    let Json.1669 : Int1 = lowlevel Eq Json.1668 Json.850;
                    dec Json.1668;
                    if Json.1669 then
                        dec Json.850;
                        let Json.1603 : Str = "e";
                        ret Json.1603;
                    else
                        let Json.1666 : Str = "F";
                        let Json.1667 : Int1 = lowlevel Eq Json.1666 Json.850;
                        dec Json.1666;
                        if Json.1667 then
                            dec Json.850;
                            let Json.1604 : Str = "f";
                            ret Json.1604;
                        else
                            let Json.1664 : Str = "G";
                            let Json.1665 : Int1 = lowlevel Eq Json.1664 Json.850;
                            dec Json.1664;
                            if Json.1665 then
                                dec Json.850;
                                let Json.1605 : Str = "g";
                                ret Json.1605;
                            else
                                let Json.1662 : Str = "H";
                                let Json.1663 : Int1 = lowlevel Eq Json.1662 Json.850;
                                dec Json.1662;
                                if Json.1663 then
                                    dec Json.850;
                                    let Json.1606 : Str = "h";
                                    ret Json.1606;
                                else
                                    let Json.1660 : Str = "I";
                                    let Json.1661 : Int1 = lowlevel Eq Json.1660 Json.850;
                                    dec Json.1660;
                                    if Json.1661 then
                                        dec Json.850;
                                        let Json.1607 : Str = "i";
                                        ret Json.1607;
                                    else
                                        let Json.1658 : Str = "J";
                                        let Json.1659 : Int1 = lowlevel Eq Json.1658 Json.850;
                                        dec Json.1658;
                                        if Json.1659 then
                                            dec Json.850;
                                            let Json.1608 : Str = "j";
                                            ret Json.1608;
                                        else
                                            let Json.1656 : Str = "K";
                                            let Json.1657 : Int1 = lowlevel Eq Json.1656 Json.850;
                                            dec Json.1656;
                                            if Json.1657 then
                                                dec Json.850;
                                                let Json.1609 : Str = "k";
                                                ret Json.1609;
                                            else
                                                let Json.1654 : Str = "L";
                                                let Json.1655 : Int1 = lowlevel Eq Json.1654 Json.850;
                                                dec Json.1654;
                                                if Json.1655 then
                                                    dec Json.850;
                                                    let Json.1610 : Str = "l";
                                                    ret Json.1610;
                                                else
                                                    let Json.1652 : Str = "M";
                                                    let Json.1653 : Int1 = lowlevel Eq Json.1652 Json.850;
                                                    dec Json.1652;
                                                    if Json.1653 then
                                                        dec Json.850;
                                                        let Json.1611 : Str = "m";
                                                        ret Json.1611;
                                                    else
                                                        let Json.1650 : Str = "N";
                                                        let Json.1651 : Int1 = lowlevel Eq Json.1650 Json.850;
                                                        dec Json.1650;
                                                        if Json.1651 then
                                                            dec Json.850;
                                                            let Json.1612 : Str = "n";
                                                            ret Json.1612;
                                                        else
                                                            let Json.1648 : Str = "O";
                                                            let Json.1649 : Int1 = lowlevel Eq Json.1648 Json.850;
                                                            dec Json.1648;
                                                            if Json.1649 then
                                                                dec Json.850;
                                                                let Json.1613 : Str = "o";
                                                                ret Json.1613;
                                                            else
                                                                let Json.1646 : Str = "P";
                                                                let Json.1647 : Int1 = lowlevel Eq Json.1646 Json.850;
                                                                dec Json.1646;
                                                                if Json.1647 then
                                                                    dec Json.850;
                                                                    let Json.1614 : Str = "p";
                                                                    ret Json.1614;
                                                                else
                                                                    let Json.1644 : Str = "Q";
                                                                    let Json.1645 : Int1 = lowlevel Eq Json.1644 Json.850;
                                                                    dec Json.1644;
                                                                    if Json.1645 then
                                                                        dec Json.850;
                                                                        let Json.1615 : Str = "q";
                                                                        ret Json.1615;
                                                                    else
                                                                        let Json.1642 : Str = "R";
                                                                        let Json.1643 : Int1 = lowlevel Eq Json.1642 Json.850;
                                                                        dec Json.1642;
                                                                        if Json.1643 then
                                                                            dec Json.850;
                                                                            let Json.1616 : Str = "r";
                                                                            ret Json.1616;
                                                                        else
                                                                            let Json.1640 : Str = "S";
                                                                            let Json.1641 : Int1 = lowlevel Eq Json.1640 Json.850;
                                                                            dec Json.1640;
                                                                            if Json.1641 then
                                                                                dec Json.850;
                                                                                let Json.1617 : Str = "s";
                                                                                ret Json.1617;
                                                                            else
                                                                                let Json.1638 : Str = "T";
                                                                                let Json.1639 : Int1 = lowlevel Eq Json.1638 Json.850;
                                                                                dec Json.1638;
                                                                                if Json.1639 then
                                                                                    dec Json.850;
                                                                                    let Json.1618 : Str = "t";
                                                                                    ret Json.1618;
                                                                                else
                                                                                    let Json.1636 : Str = "U";
                                                                                    let Json.1637 : Int1 = lowlevel Eq Json.1636 Json.850;
                                                                                    dec Json.1636;
                                                                                    if Json.1637 then
                                                                                        dec Json.850;
                                                                                        let Json.1619 : Str = "u";
                                                                                        ret Json.1619;
                                                                                    else
                                                                                        let Json.1634 : Str = "V";
                                                                                        let Json.1635 : Int1 = lowlevel Eq Json.1634 Json.850;
                                                                                        dec Json.1634;
                                                                                        if Json.1635 then
                                                                                            dec Json.850;
                                                                                            let Json.1620 : Str = "v";
                                                                                            ret Json.1620;
                                                                                        else
                                                                                            let Json.1632 : Str = "W";
                                                                                            let Json.1633 : Int1 = lowlevel Eq Json.1632 Json.850;
                                                                                            dec Json.1632;
                                                                                            if Json.1633 then
                                                                                                dec Json.850;
                                                                                                let Json.1621 : Str = "w";
                                                                                                ret Json.1621;
                                                                                            else
                                                                                                let Json.1630 : Str = "X";
                                                                                                let Json.1631 : Int1 = lowlevel Eq Json.1630 Json.850;
                                                                                                dec Json.1630;
                                                                                                if Json.1631 then
                                                                                                    dec Json.850;
                                                                                                    let Json.1622 : Str = "x";
                                                                                                    ret Json.1622;
                                                                                                else
                                                                                                    let Json.1628 : Str = "Y";
                                                                                                    let Json.1629 : Int1 = lowlevel Eq Json.1628 Json.850;
                                                                                                    dec Json.1628;
                                                                                                    if Json.1629 then
                                                                                                        dec Json.850;
                                                                                                        let Json.1623 : Str = "y";
                                                                                                        ret Json.1623;
                                                                                                    else
                                                                                                        let Json.1626 : Str = "Z";
                                                                                                        let Json.1627 : Int1 = lowlevel Eq Json.1626 Json.850;
                                                                                                        dec Json.1626;
                                                                                                        if Json.1627 then
                                                                                                            dec Json.850;
                                                                                                            let Json.1624 : Str = "z";
                                                                                                            ret Json.1624;
                                                                                                        else
                                                                                                            ret Json.850;

procedure Json.101 (Json.851):
    let Json.1763 : Str = "A";
    let Json.1764 : Int1 = lowlevel Eq Json.1763 Json.851;
    dec Json.1763;
    if Json.1764 then
        dec Json.851;
        let Json.1686 : Int1 = CallByName Bool.2;
        ret Json.1686;
    else
        let Json.1761 : Str = "B";
        let Json.1762 : Int1 = lowlevel Eq Json.1761 Json.851;
        dec Json.1761;
        if Json.1762 then
            dec Json.851;
            let Json.1687 : Int1 = CallByName Bool.2;
            ret Json.1687;
        else
            let Json.1759 : Str = "C";
            let Json.1760 : Int1 = lowlevel Eq Json.1759 Json.851;
            dec Json.1759;
            if Json.1760 then
                dec Json.851;
                let Json.1688 : Int1 = CallByName Bool.2;
                ret Json.1688;
            else
                let Json.1757 : Str = "D";
                let Json.1758 : Int1 = lowlevel Eq Json.1757 Json.851;
                dec Json.1757;
                if Json.1758 then
                    dec Json.851;
                    let Json.1689 : Int1 = CallByName Bool.2;
                    ret Json.1689;
                else
                    let Json.1755 : Str = "E";
                    let Json.1756 : Int1 = lowlevel Eq Json.1755 Json.851;
                    dec Json.1755;
                    if Json.1756 then
                        dec Json.851;
                        let Json.1690 : Int1 = CallByName Bool.2;
                        ret Json.1690;
                    else
                        let Json.1753 : Str = "F";
                        let Json.1754 : Int1 = lowlevel Eq Json.1753 Json.851;
                        dec Json.1753;
                        if Json.1754 then
                            dec Json.851;
                            let Json.1691 : Int1 = CallByName Bool.2;
                            ret Json.1691;
                        else
                            let Json.1751 : Str = "G";
                            let Json.1752 : Int1 = lowlevel Eq Json.1751 Json.851;
                            dec Json.1751;
                            if Json.1752 then
                                dec Json.851;
                                let Json.1692 : Int1 = CallByName Bool.2;
                                ret Json.1692;
                            else
                                let Json.1749 : Str = "H";
                                let Json.1750 : Int1 = lowlevel Eq Json.1749 Json.851;
                                dec Json.1749;
                                if Json.1750 then
                                    dec Json.851;
                                    let Json.1693 : Int1 = CallByName Bool.2;
                                    ret Json.1693;
                                else
                                    let Json.1747 : Str = "I";
                                    let Json.1748 : Int1 = lowlevel Eq Json.1747 Json.851;
                                    dec Json.1747;
                                    if Json.1748 then
                                        dec Json.851;
                                        let Json.1694 : Int1 = CallByName Bool.2;
                                        ret Json.1694;
                                    else
                                        let Json.1745 : Str = "J";
                                        let Json.1746 : Int1 = lowlevel Eq Json.1745 Json.851;
                                        dec Json.1745;
                                        if Json.1746 then
                                            dec Json.851;
                                            let Json.1695 : Int1 = CallByName Bool.2;
                                            ret Json.1695;
                                        else
                                            let Json.1743 : Str = "K";
                                            let Json.1744 : Int1 = lowlevel Eq Json.1743 Json.851;
                                            dec Json.1743;
                                            if Json.1744 then
                                                dec Json.851;
                                                let Json.1696 : Int1 = CallByName Bool.2;
                                                ret Json.1696;
                                            else
                                                let Json.1741 : Str = "L";
                                                let Json.1742 : Int1 = lowlevel Eq Json.1741 Json.851;
                                                dec Json.1741;
                                                if Json.1742 then
                                                    dec Json.851;
                                                    let Json.1697 : Int1 = CallByName Bool.2;
                                                    ret Json.1697;
                                                else
                                                    let Json.1739 : Str = "M";
                                                    let Json.1740 : Int1 = lowlevel Eq Json.1739 Json.851;
                                                    dec Json.1739;
                                                    if Json.1740 then
                                                        dec Json.851;
                                                        let Json.1698 : Int1 = CallByName Bool.2;
                                                        ret Json.1698;
                                                    else
                                                        let Json.1737 : Str = "N";
                                                        let Json.1738 : Int1 = lowlevel Eq Json.1737 Json.851;
                                                        dec Json.1737;
                                                        if Json.1738 then
                                                            dec Json.851;
                                                            let Json.1699 : Int1 = CallByName Bool.2;
                                                            ret Json.1699;
                                                        else
                                                            let Json.1735 : Str = "O";
                                                            let Json.1736 : Int1 = lowlevel Eq Json.1735 Json.851;
                                                            dec Json.1735;
                                                            if Json.1736 then
                                                                dec Json.851;
                                                                let Json.1700 : Int1 = CallByName Bool.2;
                                                                ret Json.1700;
                                                            else
                                                                let Json.1733 : Str = "P";
                                                                let Json.1734 : Int1 = lowlevel Eq Json.1733 Json.851;
                                                                dec Json.1733;
                                                                if Json.1734 then
                                                                    dec Json.851;
                                                                    let Json.1701 : Int1 = CallByName Bool.2;
                                                                    ret Json.1701;
                                                                else
                                                                    let Json.1731 : Str = "Q";
                                                                    let Json.1732 : Int1 = lowlevel Eq Json.1731 Json.851;
                                                                    dec Json.1731;
                                                                    if Json.1732 then
                                                                        dec Json.851;
                                                                        let Json.1702 : Int1 = CallByName Bool.2;
                                                                        ret Json.1702;
                                                                    else
                                                                        let Json.1729 : Str = "R";
                                                                        let Json.1730 : Int1 = lowlevel Eq Json.1729 Json.851;
                                                                        dec Json.1729;
                                                                        if Json.1730 then
                                                                            dec Json.851;
                                                                            let Json.1703 : Int1 = CallByName Bool.2;
                                                                            ret Json.1703;
                                                                        else
                                                                            let Json.1727 : Str = "S";
                                                                            let Json.1728 : Int1 = lowlevel Eq Json.1727 Json.851;
                                                                            dec Json.1727;
                                                                            if Json.1728 then
                                                                                dec Json.851;
                                                                                let Json.1704 : Int1 = CallByName Bool.2;
                                                                                ret Json.1704;
                                                                            else
                                                                                let Json.1725 : Str = "T";
                                                                                let Json.1726 : Int1 = lowlevel Eq Json.1725 Json.851;
                                                                                dec Json.1725;
                                                                                if Json.1726 then
                                                                                    dec Json.851;
                                                                                    let Json.1705 : Int1 = CallByName Bool.2;
                                                                                    ret Json.1705;
                                                                                else
                                                                                    let Json.1723 : Str = "U";
                                                                                    let Json.1724 : Int1 = lowlevel Eq Json.1723 Json.851;
                                                                                    dec Json.1723;
                                                                                    if Json.1724 then
                                                                                        dec Json.851;
                                                                                        let Json.1706 : Int1 = CallByName Bool.2;
                                                                                        ret Json.1706;
                                                                                    else
                                                                                        let Json.1721 : Str = "V";
                                                                                        let Json.1722 : Int1 = lowlevel Eq Json.1721 Json.851;
                                                                                        dec Json.1721;
                                                                                        if Json.1722 then
                                                                                            dec Json.851;
                                                                                            let Json.1707 : Int1 = CallByName Bool.2;
                                                                                            ret Json.1707;
                                                                                        else
                                                                                            let Json.1719 : Str = "W";
                                                                                            let Json.1720 : Int1 = lowlevel Eq Json.1719 Json.851;
                                                                                            dec Json.1719;
                                                                                            if Json.1720 then
                                                                                                dec Json.851;
                                                                                                let Json.1708 : Int1 = CallByName Bool.2;
                                                                                                ret Json.1708;
                                                                                            else
                                                                                                let Json.1717 : Str = "X";
                                                                                                let Json.1718 : Int1 = lowlevel Eq Json.1717 Json.851;
                                                                                                dec Json.1717;
                                                                                                if Json.1718 then
                                                                                                    dec Json.851;
                                                                                                    let Json.1709 : Int1 = CallByName Bool.2;
                                                                                                    ret Json.1709;
                                                                                                else
                                                                                                    let Json.1715 : Str = "Y";
                                                                                                    let Json.1716 : Int1 = lowlevel Eq Json.1715 Json.851;
                                                                                                    dec Json.1715;
                                                                                                    if Json.1716 then
                                                                                                        dec Json.851;
                                                                                                        let Json.1710 : Int1 = CallByName Bool.2;
                                                                                                        ret Json.1710;
                                                                                                    else
                                                                                                        let Json.1713 : Str = "Z";
                                                                                                        let Json.1714 : Int1 = lowlevel Eq Json.1713 Json.851;
                                                                                                        dec Json.1713;
                                                                                                        dec Json.851;
                                                                                                        if Json.1714 then
                                                                                                            let Json.1711 : Int1 = CallByName Bool.2;
                                                                                                            ret Json.1711;
                                                                                                        else
                                                                                                            let Json.1712 : Int1 = CallByName Bool.1;
                                                                                                            ret Json.1712;

procedure Json.181 (Json.182, Json.1901, Json.180):
    let Json.1904 : List U8 = CallByName Json.25 Json.180;
    let Json.1903 : List U8 = CallByName List.8 Json.182 Json.1904;
    ret Json.1903;

procedure Json.188 (Json.1952, Json.191):
    let Json.189 : U64 = StructAtIndex 0 Json.1952;
    let Json.190 : Int1 = StructAtIndex 1 Json.1952;
    switch Json.191:
        case 34:
            let Json.1955 : Int1 = false;
            let Json.1954 : {U64, Int1} = Struct {Json.189, Json.1955};
            let Json.1953 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1954;
            ret Json.1953;
    
        case 92:
            let Json.1958 : Int1 = false;
            let Json.1957 : {U64, Int1} = Struct {Json.189, Json.1958};
            let Json.1956 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1957;
            ret Json.1956;
    
        case 47:
            let Json.1961 : Int1 = false;
            let Json.1960 : {U64, Int1} = Struct {Json.189, Json.1961};
            let Json.1959 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1960;
            ret Json.1959;
    
        case 8:
            let Json.1964 : Int1 = false;
            let Json.1963 : {U64, Int1} = Struct {Json.189, Json.1964};
            let Json.1962 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1963;
            ret Json.1962;
    
        case 12:
            let Json.1967 : Int1 = false;
            let Json.1966 : {U64, Int1} = Struct {Json.189, Json.1967};
            let Json.1965 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1966;
            ret Json.1965;
    
        case 10:
            let Json.1970 : Int1 = false;
            let Json.1969 : {U64, Int1} = Struct {Json.189, Json.1970};
            let Json.1968 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1969;
            ret Json.1968;
    
        case 13:
            let Json.1973 : Int1 = false;
            let Json.1972 : {U64, Int1} = Struct {Json.189, Json.1973};
            let Json.1971 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1972;
            ret Json.1971;
    
        case 9:
            let Json.1976 : Int1 = false;
            let Json.1975 : {U64, Int1} = Struct {Json.189, Json.1976};
            let Json.1974 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1975;
            ret Json.1974;
    
        default:
            let Json.1980 : U64 = 1i64;
            let Json.1979 : U64 = CallByName Num.19 Json.189 Json.1980;
            let Json.1978 : {U64, Int1} = Struct {Json.1979, Json.190};
            let Json.1977 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) Json.1978;
            ret Json.1977;
    

procedure Json.214 (Json.215, Json.216):
    let Json.1923 : List U8 = CallByName Json.26 Json.216;
    let Json.1922 : List U8 = CallByName List.8 Json.215 Json.1923;
    ret Json.1922;

procedure Json.233 (Json.234, Json.1174, Json.232):
    let Json.1524 : I64 = 123i64;
    let Json.1523 : U8 = CallByName Num.127 Json.1524;
    let Json.237 : List U8 = CallByName List.4 Json.234 Json.1523;
    let Json.1522 : U64 = CallByName List.6 Json.232;
    let Json.1182 : {List U8, U64} = Struct {Json.237, Json.1522};
    let Json.1181 : {List U8, U64} = CallByName List.18 Json.232 Json.1182 Json.1174;
    let Json.239 : List U8 = StructAtIndex 0 Json.1181;
    let Json.1180 : I64 = 125i64;
    let Json.1179 : U8 = CallByName Num.127 Json.1180;
    let Json.1178 : List U8 = CallByName List.4 Json.239 Json.1179;
    ret Json.1178;

procedure Json.233 (Json.234, Json.1174, Json.232):
    let Json.1898 : I64 = 123i64;
    let Json.1897 : U8 = CallByName Num.127 Json.1898;
    let Json.237 : List U8 = CallByName List.4 Json.234 Json.1897;
    let Json.1896 : U64 = CallByName List.6 Json.232;
    let Json.1556 : {List U8, U64} = Struct {Json.237, Json.1896};
    let Json.1555 : {List U8, U64} = CallByName List.18 Json.232 Json.1556 Json.1174;
    let Json.239 : List U8 = StructAtIndex 0 Json.1555;
    let Json.1554 : I64 = 125i64;
    let Json.1553 : U8 = CallByName Num.127 Json.1554;
    let Json.1552 : List U8 = CallByName List.4 Json.239 Json.1553;
    ret Json.1552;

procedure Json.236 (Json.1176, Json.1177, Json.235):
    let Json.242 : Str = StructAtIndex 0 Json.1177;
    let Json.243 : Str = StructAtIndex 1 Json.1177;
    let Json.240 : List U8 = StructAtIndex 0 Json.1176;
    let Json.241 : U64 = StructAtIndex 1 Json.1176;
    let Json.244 : Str = CallByName Json.81 Json.242 Json.235;
    let Json.1204 : I64 = 34i64;
    let Json.1203 : U8 = CallByName Num.127 Json.1204;
    let Json.1201 : List U8 = CallByName List.4 Json.240 Json.1203;
    let Json.1202 : List U8 = CallByName Str.12 Json.244;
    let Json.1198 : List U8 = CallByName List.8 Json.1201 Json.1202;
    let Json.1200 : I64 = 34i64;
    let Json.1199 : U8 = CallByName Num.127 Json.1200;
    let Json.1195 : List U8 = CallByName List.4 Json.1198 Json.1199;
    let Json.1197 : I64 = 58i64;
    let Json.1196 : U8 = CallByName Num.127 Json.1197;
    let Json.1193 : List U8 = CallByName List.4 Json.1195 Json.1196;
    let Json.245 : List U8 = CallByName Encode.24 Json.1193 Json.243 Json.235;
    joinpoint Json.1188 Json.246:
        let Json.1186 : U64 = 1i64;
        let Json.1185 : U64 = CallByName Num.20 Json.241 Json.1186;
        let Json.1184 : {List U8, U64} = Struct {Json.246, Json.1185};
        ret Json.1184;
    in
    let Json.1192 : U64 = 1i64;
    let Json.1189 : Int1 = CallByName Num.24 Json.241 Json.1192;
    if Json.1189 then
        let Json.1191 : I64 = 44i64;
        let Json.1190 : U8 = CallByName Num.127 Json.1191;
        let Json.1187 : List U8 = CallByName List.4 Json.245 Json.1190;
        jump Json.1188 Json.1187;
    else
        jump Json.1188 Json.245;

procedure Json.236 (Json.1176, Json.1177, Json.235):
    let Json.242 : Str = StructAtIndex 0 Json.1177;
    let Json.243 : Str = StructAtIndex 1 Json.1177;
    let Json.240 : List U8 = StructAtIndex 0 Json.1176;
    let Json.241 : U64 = StructAtIndex 1 Json.1176;
    let Json.244 : Str = CallByName Json.81 Json.242 Json.235;
    let Json.1578 : I64 = 34i64;
    let Json.1577 : U8 = CallByName Num.127 Json.1578;
    let Json.1575 : List U8 = CallByName List.4 Json.240 Json.1577;
    let Json.1576 : List U8 = CallByName Str.12 Json.244;
    let Json.1572 : List U8 = CallByName List.8 Json.1575 Json.1576;
    let Json.1574 : I64 = 34i64;
    let Json.1573 : U8 = CallByName Num.127 Json.1574;
    let Json.1569 : List U8 = CallByName List.4 Json.1572 Json.1573;
    let Json.1571 : I64 = 58i64;
    let Json.1570 : U8 = CallByName Num.127 Json.1571;
    let Json.1567 : List U8 = CallByName List.4 Json.1569 Json.1570;
    let Json.245 : List U8 = CallByName Encode.24 Json.1567 Json.243 Json.235;
    joinpoint Json.1562 Json.246:
        let Json.1560 : U64 = 1i64;
        let Json.1559 : U64 = CallByName Num.20 Json.241 Json.1560;
        let Json.1558 : {List U8, U64} = Struct {Json.246, Json.1559};
        ret Json.1558;
    in
    let Json.1566 : U64 = 1i64;
    let Json.1563 : Int1 = CallByName Num.24 Json.241 Json.1566;
    if Json.1563 then
        let Json.1565 : I64 = 44i64;
        let Json.1564 : U8 = CallByName Num.127 Json.1565;
        let Json.1561 : List U8 = CallByName List.4 Json.245 Json.1564;
        jump Json.1562 Json.1561;
    else
        jump Json.1562 Json.245;

procedure Json.24 (Json.180):
    let Json.1899 : Str = CallByName Encode.23 Json.180;
    ret Json.1899;

procedure Json.25 (Json.183):
    let Json.184 : List U8 = CallByName Str.12 Json.183;
    let Json.1981 : U64 = 0i64;
    let Json.1982 : Int1 = true;
    let Json.185 : {U64, Int1} = Struct {Json.1981, Json.1982};
    let Json.1951 : {} = Struct {};
    inc Json.184;
    let Json.186 : {U64, Int1} = CallByName List.26 Json.184 Json.185 Json.1951;
    let Json.1905 : Int1 = StructAtIndex 1 Json.186;
    let Json.1949 : Int1 = true;
    let Json.1950 : Int1 = lowlevel Eq Json.1949 Json.1905;
    if Json.1950 then
        let Json.1915 : U64 = CallByName List.6 Json.184;
        let Json.1916 : U64 = 2i64;
        let Json.1914 : U64 = CallByName Num.19 Json.1915 Json.1916;
        let Json.1911 : List U8 = CallByName List.68 Json.1914;
        let Json.1913 : U8 = 34i64;
        let Json.1912 : List U8 = Array [Json.1913];
        let Json.1910 : List U8 = CallByName List.8 Json.1911 Json.1912;
        let Json.1907 : List U8 = CallByName List.8 Json.1910 Json.184;
        let Json.1909 : U8 = 34i64;
        let Json.1908 : List U8 = Array [Json.1909];
        let Json.1906 : List U8 = CallByName List.8 Json.1907 Json.1908;
        ret Json.1906;
    else
        let Json.1948 : U64 = StructAtIndex 0 Json.186;
        inc Json.184;
        let Json.1947 : {List U8, List U8} = CallByName List.52 Json.184 Json.1948;
        let Json.210 : List U8 = StructAtIndex 0 Json.1947;
        let Json.212 : List U8 = StructAtIndex 1 Json.1947;
        let Json.1945 : U64 = CallByName List.6 Json.184;
        dec Json.184;
        let Json.1946 : U64 = 120i64;
        let Json.1943 : U64 = CallByName Num.21 Json.1945 Json.1946;
        let Json.1944 : U64 = 100i64;
        let Json.1942 : U64 = CallByName Num.94 Json.1943 Json.1944;
        let Json.1939 : List U8 = CallByName List.68 Json.1942;
        let Json.1941 : U8 = 34i64;
        let Json.1940 : List U8 = Array [Json.1941];
        let Json.1938 : List U8 = CallByName List.8 Json.1939 Json.1940;
        let Json.213 : List U8 = CallByName List.8 Json.1938 Json.210;
        let Json.1921 : {} = Struct {};
        let Json.1918 : List U8 = CallByName List.18 Json.212 Json.213 Json.1921;
        let Json.1920 : U8 = 34i64;
        let Json.1919 : List U8 = Array [Json.1920];
        let Json.1917 : List U8 = CallByName List.8 Json.1918 Json.1919;
        ret Json.1917;

procedure Json.26 (Json.217):
    switch Json.217:
        case 34:
            let Json.1924 : List U8 = Array [92i64, 34i64];
            ret Json.1924;
    
        case 92:
            let Json.1925 : List U8 = Array [92i64, 92i64];
            ret Json.1925;
    
        case 47:
            let Json.1926 : List U8 = Array [92i64, 47i64];
            ret Json.1926;
    
        case 8:
            let Json.1928 : U8 = 98i64;
            let Json.1927 : List U8 = Array [92i64, Json.1928];
            ret Json.1927;
    
        case 12:
            let Json.1930 : U8 = 102i64;
            let Json.1929 : List U8 = Array [92i64, Json.1930];
            ret Json.1929;
    
        case 10:
            let Json.1932 : U8 = 110i64;
            let Json.1931 : List U8 = Array [92i64, Json.1932];
            ret Json.1931;
    
        case 13:
            let Json.1934 : U8 = 114i64;
            let Json.1933 : List U8 = Array [92i64, Json.1934];
            ret Json.1933;
    
        case 9:
            let Json.1936 : U8 = 114i64;
            let Json.1935 : List U8 = Array [92i64, Json.1936];
            ret Json.1935;
    
        default:
            let Json.1937 : List U8 = Array [Json.217];
            ret Json.1937;
    

procedure Json.28 (Json.232):
    let Json.1172 : List {Str, Str} = CallByName Encode.23 Json.232;
    ret Json.1172;

procedure Json.28 (Json.232):
    let Json.1548 : List {Str, Str} = CallByName Encode.23 Json.232;
    ret Json.1548;

procedure Json.81 (Json.801, Json.802):
    let Json.1895 : U8 = GetTagId Json.802;
    switch Json.1895:
        case 2:
            ret Json.801;
    
        case 5:
            let Json.1580 : Str = CallByName Json.86 Json.801;
            ret Json.1580;
    
        case 4:
            let Json.1770 : Str = CallByName Json.87 Json.801;
            ret Json.1770;
    
        case 3:
            let Json.1859 : Str = CallByName Json.88 Json.801;
            ret Json.1859;
    
        case 0:
            let Json.1891 : Str = CallByName Json.89 Json.801;
            ret Json.1891;
    
        default:
            dec Json.801;
            let Json.803 : [] = UnionAtIndex (Id 1) (Index 0) Json.802;
            let Json.1894 : Str = "a Lambda Set is empty. Most likely there is a type error in your program.";
            Crash Json.1894
    

procedure Json.831 (Json.1492):
    let Json.1867 : List Str = StructAtIndex 1 Json.1492;
    let #Derived_gen.28 : List Str = StructAtIndex 0 Json.1492;
    dec #Derived_gen.28;
    ret Json.1867;

procedure Json.839 (Json.1213):
    let Json.1588 : List Str = StructAtIndex 1 Json.1213;
    let #Derived_gen.30 : List Str = StructAtIndex 0 Json.1213;
    dec #Derived_gen.30;
    ret Json.1588;

procedure Json.86 (Json.808):
    let Json.1581 : Str = CallByName Json.96 Json.808;
    ret Json.1581;

procedure Json.87 (Json.809):
    let Json.1771 : Str = CallByName Json.93 Json.809;
    ret Json.1771;

procedure Json.88 (Json.810):
    let Json.1860 : Str = CallByName Json.94 Json.810;
    ret Json.1860;

procedure Json.89 (Json.811):
    ret Json.811;

procedure Json.93 (Json.823):
    let Json.824 : List Str = CallByName Str.55 Json.823;
    let Json.1856 : U64 = lowlevel ListLen Json.824;
    let Json.1857 : U64 = 1i64;
    let Json.1858 : Int1 = lowlevel NumGte Json.1856 Json.1857;
    if Json.1858 then
        dec Json.823;
        let Json.1855 : U64 = 0i64;
        let Json.825 : Str = lowlevel ListGetUnsafe Json.824 Json.1855;
        inc Json.825;
        let Json.826 : Str = CallByName Json.99 Json.825;
        let Json.827 : List Str = CallByName List.38 Json.824;
        let Json.1773 : List Str = CallByName List.13 Json.827 Json.826;
        let Json.1774 : Str = "";
        let Json.1772 : Str = CallByName Str.4 Json.1773 Json.1774;
        dec Json.1774;
        dec Json.1773;
        ret Json.1772;
    else
        dec Json.824;
        ret Json.823;

procedure Json.94 (Json.828):
    let Json.829 : List Str = CallByName Str.55 Json.828;
    dec Json.828;
    let Json.1890 : U64 = CallByName List.6 Json.829;
    let Json.830 : List Str = CallByName List.68 Json.1890;
    let Json.1868 : {List Str, List Str} = Struct {Json.829, Json.830};
    let Json.1864 : {List Str, List Str} = CallByName Json.95 Json.1868;
    let Json.1865 : {} = Struct {};
    let Json.1862 : List Str = CallByName Json.831 Json.1864;
    let Json.1863 : Str = "";
    let Json.1861 : Str = CallByName Str.4 Json.1862 Json.1863;
    dec Json.1862;
    dec Json.1863;
    ret Json.1861;

procedure Json.95 (Json.2003):
    joinpoint Json.1869 Json.1167:
        let Json.833 : List Str = StructAtIndex 0 Json.1167;
        let Json.832 : List Str = StructAtIndex 1 Json.1167;
        let Json.1887 : U64 = lowlevel ListLen Json.833;
        let Json.1888 : U64 = 1i64;
        let Json.1889 : Int1 = lowlevel NumGte Json.1887 Json.1888;
        if Json.1889 then
            let Json.1886 : U64 = 0i64;
            let Json.834 : Str = lowlevel ListGetUnsafe Json.833 Json.1886;
            inc 2 Json.834;
            joinpoint Json.1884 Json.1883:
                if Json.1883 then
                    let Json.1873 : List Str = CallByName List.38 Json.833;
                    let Json.1876 : Str = "-";
                    let Json.1877 : Str = CallByName Json.100 Json.834;
                    let Json.1875 : List Str = Array [Json.1876, Json.1877];
                    let Json.1874 : List Str = CallByName List.8 Json.832 Json.1875;
                    let Json.1872 : {List Str, List Str} = Struct {Json.1873, Json.1874};
                    jump Json.1869 Json.1872;
                else
                    dec Json.834;
                    let Json.1882 : U64 = 0i64;
                    let Json.835 : Str = lowlevel ListGetUnsafe Json.833 Json.1882;
                    inc Json.835;
                    let Json.1880 : List Str = CallByName List.38 Json.833;
                    let Json.1881 : List Str = CallByName List.4 Json.832 Json.835;
                    let Json.1879 : {List Str, List Str} = Struct {Json.1880, Json.1881};
                    jump Json.1869 Json.1879;
            in
            let Json.1885 : Int1 = CallByName Json.101 Json.834;
            jump Json.1884 Json.1885;
        else
            let Json.1870 : {List Str, List Str} = Struct {Json.833, Json.832};
            ret Json.1870;
    in
    jump Json.1869 Json.2003;

procedure Json.96 (Json.836):
    let Json.837 : List Str = CallByName Str.55 Json.836;
    dec Json.836;
    let Json.1769 : U64 = CallByName List.6 Json.837;
    let Json.838 : List Str = CallByName List.68 Json.1769;
    let Json.1589 : {List Str, List Str} = Struct {Json.837, Json.838};
    let Json.1585 : {List Str, List Str} = CallByName Json.97 Json.1589;
    let Json.1586 : {} = Struct {};
    let Json.1583 : List Str = CallByName Json.839 Json.1585;
    let Json.1584 : Str = "";
    let Json.1582 : Str = CallByName Str.4 Json.1583 Json.1584;
    dec Json.1583;
    dec Json.1584;
    ret Json.1582;

procedure Json.97 (Json.1994):
    joinpoint Json.1590 Json.1168:
        let Json.841 : List Str = StructAtIndex 0 Json.1168;
        let Json.840 : List Str = StructAtIndex 1 Json.1168;
        let Json.1766 : U64 = lowlevel ListLen Json.841;
        let Json.1767 : U64 = 1i64;
        let Json.1768 : Int1 = lowlevel NumGte Json.1766 Json.1767;
        if Json.1768 then
            let Json.1765 : U64 = 0i64;
            let Json.842 : Str = lowlevel ListGetUnsafe Json.841 Json.1765;
            inc 2 Json.842;
            joinpoint Json.1684 Json.1683:
                if Json.1683 then
                    let Json.1594 : List Str = CallByName List.38 Json.841;
                    let Json.1597 : Str = "_";
                    let Json.1598 : Str = CallByName Json.100 Json.842;
                    let Json.1596 : List Str = Array [Json.1597, Json.1598];
                    let Json.1595 : List Str = CallByName List.8 Json.840 Json.1596;
                    let Json.1593 : {List Str, List Str} = Struct {Json.1594, Json.1595};
                    jump Json.1590 Json.1593;
                else
                    dec Json.842;
                    let Json.1682 : U64 = 0i64;
                    let Json.843 : Str = lowlevel ListGetUnsafe Json.841 Json.1682;
                    inc Json.843;
                    let Json.1680 : List Str = CallByName List.38 Json.841;
                    let Json.1681 : List Str = CallByName List.4 Json.840 Json.843;
                    let Json.1679 : {List Str, List Str} = Struct {Json.1680, Json.1681};
                    jump Json.1590 Json.1679;
            in
            let Json.1685 : Int1 = CallByName Json.101 Json.842;
            jump Json.1684 Json.1685;
        else
            let Json.1591 : {List Str, List Str} = Struct {Json.841, Json.840};
            ret Json.1591;
    in
    jump Json.1590 Json.1994;

procedure Json.99 (Json.849):
    let Json.1852 : Str = "a";
    let Json.1853 : Int1 = lowlevel Eq Json.1852 Json.849;
    dec Json.1852;
    if Json.1853 then
        dec Json.849;
        let Json.1775 : Str = "A";
        ret Json.1775;
    else
        let Json.1850 : Str = "b";
        let Json.1851 : Int1 = lowlevel Eq Json.1850 Json.849;
        dec Json.1850;
        if Json.1851 then
            dec Json.849;
            let Json.1776 : Str = "B";
            ret Json.1776;
        else
            let Json.1848 : Str = "c";
            let Json.1849 : Int1 = lowlevel Eq Json.1848 Json.849;
            dec Json.1848;
            if Json.1849 then
                dec Json.849;
                let Json.1777 : Str = "C";
                ret Json.1777;
            else
                let Json.1846 : Str = "d";
                let Json.1847 : Int1 = lowlevel Eq Json.1846 Json.849;
                dec Json.1846;
                if Json.1847 then
                    dec Json.849;
                    let Json.1778 : Str = "D";
                    ret Json.1778;
                else
                    let Json.1844 : Str = "e";
                    let Json.1845 : Int1 = lowlevel Eq Json.1844 Json.849;
                    dec Json.1844;
                    if Json.1845 then
                        dec Json.849;
                        let Json.1779 : Str = "E";
                        ret Json.1779;
                    else
                        let Json.1842 : Str = "f";
                        let Json.1843 : Int1 = lowlevel Eq Json.1842 Json.849;
                        dec Json.1842;
                        if Json.1843 then
                            dec Json.849;
                            let Json.1780 : Str = "F";
                            ret Json.1780;
                        else
                            let Json.1840 : Str = "g";
                            let Json.1841 : Int1 = lowlevel Eq Json.1840 Json.849;
                            dec Json.1840;
                            if Json.1841 then
                                dec Json.849;
                                let Json.1781 : Str = "G";
                                ret Json.1781;
                            else
                                let Json.1838 : Str = "h";
                                let Json.1839 : Int1 = lowlevel Eq Json.1838 Json.849;
                                dec Json.1838;
                                if Json.1839 then
                                    dec Json.849;
                                    let Json.1782 : Str = "H";
                                    ret Json.1782;
                                else
                                    let Json.1836 : Str = "i";
                                    let Json.1837 : Int1 = lowlevel Eq Json.1836 Json.849;
                                    dec Json.1836;
                                    if Json.1837 then
                                        dec Json.849;
                                        let Json.1783 : Str = "I";
                                        ret Json.1783;
                                    else
                                        let Json.1834 : Str = "j";
                                        let Json.1835 : Int1 = lowlevel Eq Json.1834 Json.849;
                                        dec Json.1834;
                                        if Json.1835 then
                                            dec Json.849;
                                            let Json.1784 : Str = "J";
                                            ret Json.1784;
                                        else
                                            let Json.1832 : Str = "k";
                                            let Json.1833 : Int1 = lowlevel Eq Json.1832 Json.849;
                                            dec Json.1832;
                                            if Json.1833 then
                                                dec Json.849;
                                                let Json.1785 : Str = "K";
                                                ret Json.1785;
                                            else
                                                let Json.1830 : Str = "l";
                                                let Json.1831 : Int1 = lowlevel Eq Json.1830 Json.849;
                                                dec Json.1830;
                                                if Json.1831 then
                                                    dec Json.849;
                                                    let Json.1786 : Str = "L";
                                                    ret Json.1786;
                                                else
                                                    let Json.1828 : Str = "m";
                                                    let Json.1829 : Int1 = lowlevel Eq Json.1828 Json.849;
                                                    dec Json.1828;
                                                    if Json.1829 then
                                                        dec Json.849;
                                                        let Json.1787 : Str = "M";
                                                        ret Json.1787;
                                                    else
                                                        let Json.1826 : Str = "n";
                                                        let Json.1827 : Int1 = lowlevel Eq Json.1826 Json.849;
                                                        dec Json.1826;
                                                        if Json.1827 then
                                                            dec Json.849;
                                                            let Json.1788 : Str = "N";
                                                            ret Json.1788;
                                                        else
                                                            let Json.1824 : Str = "o";
                                                            let Json.1825 : Int1 = lowlevel Eq Json.1824 Json.849;
                                                            dec Json.1824;
                                                            if Json.1825 then
                                                                dec Json.849;
                                                                let Json.1789 : Str = "O";
                                                                ret Json.1789;
                                                            else
                                                                let Json.1822 : Str = "p";
                                                                let Json.1823 : Int1 = lowlevel Eq Json.1822 Json.849;
                                                                dec Json.1822;
                                                                if Json.1823 then
                                                                    dec Json.849;
                                                                    let Json.1790 : Str = "P";
                                                                    ret Json.1790;
                                                                else
                                                                    let Json.1820 : Str = "q";
                                                                    let Json.1821 : Int1 = lowlevel Eq Json.1820 Json.849;
                                                                    dec Json.1820;
                                                                    if Json.1821 then
                                                                        dec Json.849;
                                                                        let Json.1791 : Str = "Q";
                                                                        ret Json.1791;
                                                                    else
                                                                        let Json.1818 : Str = "r";
                                                                        let Json.1819 : Int1 = lowlevel Eq Json.1818 Json.849;
                                                                        dec Json.1818;
                                                                        if Json.1819 then
                                                                            dec Json.849;
                                                                            let Json.1792 : Str = "R";
                                                                            ret Json.1792;
                                                                        else
                                                                            let Json.1816 : Str = "s";
                                                                            let Json.1817 : Int1 = lowlevel Eq Json.1816 Json.849;
                                                                            dec Json.1816;
                                                                            if Json.1817 then
                                                                                dec Json.849;
                                                                                let Json.1793 : Str = "S";
                                                                                ret Json.1793;
                                                                            else
                                                                                let Json.1814 : Str = "t";
                                                                                let Json.1815 : Int1 = lowlevel Eq Json.1814 Json.849;
                                                                                dec Json.1814;
                                                                                if Json.1815 then
                                                                                    dec Json.849;
                                                                                    let Json.1794 : Str = "T";
                                                                                    ret Json.1794;
                                                                                else
                                                                                    let Json.1812 : Str = "u";
                                                                                    let Json.1813 : Int1 = lowlevel Eq Json.1812 Json.849;
                                                                                    dec Json.1812;
                                                                                    if Json.1813 then
                                                                                        dec Json.849;
                                                                                        let Json.1795 : Str = "U";
                                                                                        ret Json.1795;
                                                                                    else
                                                                                        let Json.1810 : Str = "v";
                                                                                        let Json.1811 : Int1 = lowlevel Eq Json.1810 Json.849;
                                                                                        dec Json.1810;
                                                                                        if Json.1811 then
                                                                                            dec Json.849;
                                                                                            let Json.1796 : Str = "V";
                                                                                            ret Json.1796;
                                                                                        else
                                                                                            let Json.1808 : Str = "w";
                                                                                            let Json.1809 : Int1 = lowlevel Eq Json.1808 Json.849;
                                                                                            dec Json.1808;
                                                                                            if Json.1809 then
                                                                                                dec Json.849;
                                                                                                let Json.1797 : Str = "W";
                                                                                                ret Json.1797;
                                                                                            else
                                                                                                let Json.1806 : Str = "x";
                                                                                                let Json.1807 : Int1 = lowlevel Eq Json.1806 Json.849;
                                                                                                dec Json.1806;
                                                                                                if Json.1807 then
                                                                                                    dec Json.849;
                                                                                                    let Json.1798 : Str = "X";
                                                                                                    ret Json.1798;
                                                                                                else
                                                                                                    let Json.1804 : Str = "y";
                                                                                                    let Json.1805 : Int1 = lowlevel Eq Json.1804 Json.849;
                                                                                                    dec Json.1804;
                                                                                                    if Json.1805 then
                                                                                                        dec Json.849;
                                                                                                        let Json.1799 : Str = "Y";
                                                                                                        ret Json.1799;
                                                                                                    else
                                                                                                        let Json.1802 : Str = "z";
                                                                                                        let Json.1803 : Int1 = lowlevel Eq Json.1802 Json.849;
                                                                                                        dec Json.1802;
                                                                                                        if Json.1803 then
                                                                                                            dec Json.849;
                                                                                                            let Json.1800 : Str = "Z";
                                                                                                            ret Json.1800;
                                                                                                        else
                                                                                                            ret Json.849;

procedure List.13 (#Attr.2, #Attr.3):
    let List.703 : List Str = lowlevel ListPrepend #Attr.2 #Attr.3;
    ret List.703;

procedure List.139 (List.140, List.141, List.138):
    let List.543 : {List U8, U64} = CallByName Json.236 List.140 List.141 List.138;
    ret List.543;

procedure List.139 (List.140, List.141, List.138):
    let List.651 : {List U8, U64} = CallByName Json.236 List.140 List.141 List.138;
    ret List.651;

procedure List.139 (List.140, List.141, List.138):
    let List.671 : List U8 = CallByName Json.214 List.140 List.141;
    ret List.671;

procedure List.18 (List.136, List.137, List.138):
    let List.524 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.524;

procedure List.18 (List.136, List.137, List.138):
    let List.632 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.632;

procedure List.18 (List.136, List.137, List.138):
    let List.652 : List U8 = CallByName List.92 List.136 List.137 List.138;
    ret List.652;

procedure List.26 (List.153, List.154, List.155):
    let List.720 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.92 List.153 List.154 List.155;
    let List.723 : U8 = 1i64;
    let List.724 : U8 = GetTagId List.720;
    let List.725 : Int1 = lowlevel Eq List.723 List.724;
    if List.725 then
        let List.156 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.720;
        ret List.156;
    else
        let List.157 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.720;
        ret List.157;

procedure List.31 (#Attr.2, #Attr.3):
    let List.685 : List Str = lowlevel ListDropAt #Attr.2 #Attr.3;
    ret List.685;

procedure List.38 (List.292):
    let List.693 : U64 = 0i64;
    let List.692 : List Str = CallByName List.31 List.292 List.693;
    ret List.692;

procedure List.4 (List.107, List.108):
    let List.628 : U64 = 1i64;
    let List.627 : List Str = CallByName List.70 List.107 List.628;
    let List.626 : List Str = CallByName List.71 List.627 List.108;
    ret List.626;

procedure List.4 (List.107, List.108):
    let List.631 : U64 = 1i64;
    let List.630 : List U8 = CallByName List.70 List.107 List.631;
    let List.629 : List U8 = CallByName List.71 List.630 List.108;
    ret List.629;

procedure List.49 (List.370, List.371):
    let List.712 : U64 = StructAtIndex 0 List.371;
    let List.713 : U64 = 0i64;
    let List.710 : Int1 = CallByName Bool.11 List.712 List.713;
    if List.710 then
        dec List.370;
        let List.711 : List U8 = Array [];
        ret List.711;
    else
        let List.707 : U64 = StructAtIndex 1 List.371;
        let List.708 : U64 = StructAtIndex 0 List.371;
        let List.706 : List U8 = CallByName List.72 List.370 List.707 List.708;
        ret List.706;

procedure List.52 (List.385, List.386):
    let List.387 : U64 = CallByName List.6 List.385;
    joinpoint List.718 List.388:
        let List.716 : U64 = 0i64;
        let List.715 : {U64, U64} = Struct {List.388, List.716};
        inc List.385;
        let List.389 : List U8 = CallByName List.49 List.385 List.715;
        let List.714 : U64 = CallByName Num.20 List.387 List.388;
        let List.705 : {U64, U64} = Struct {List.714, List.388};
        let List.390 : List U8 = CallByName List.49 List.385 List.705;
        let List.704 : {List U8, List U8} = Struct {List.389, List.390};
        ret List.704;
    in
    let List.719 : Int1 = CallByName Num.24 List.387 List.386;
    if List.719 then
        jump List.718 List.386;
    else
        jump List.718 List.387;

procedure List.6 (#Attr.2):
    let List.562 : U64 = lowlevel ListLen #Attr.2;
    ret List.562;

procedure List.6 (#Attr.2):
    let List.699 : U64 = lowlevel ListLen #Attr.2;
    ret List.699;

procedure List.6 (#Attr.2):
    let List.700 : U64 = lowlevel ListLen #Attr.2;
    ret List.700;

procedure List.6 (#Attr.2):
    let List.702 : U64 = lowlevel ListLen #Attr.2;
    ret List.702;

procedure List.66 (#Attr.2, #Attr.3):
    let List.540 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.540;

procedure List.66 (#Attr.2, #Attr.3):
    let List.648 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.648;

procedure List.66 (#Attr.2, #Attr.3):
    let List.668 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.668;

procedure List.68 (#Attr.2):
    let List.695 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.695;

procedure List.68 (#Attr.2):
    let List.697 : List U8 = lowlevel ListWithCapacity #Attr.2;
    ret List.697;

procedure List.70 (#Attr.2, #Attr.3):
    let List.608 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.608;

procedure List.70 (#Attr.2, #Attr.3):
    let List.625 : List Str = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.625;

procedure List.71 (#Attr.2, #Attr.3):
    let List.606 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.606;

procedure List.71 (#Attr.2, #Attr.3):
    let List.623 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.623;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.709 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.709;

procedure List.8 (#Attr.2, #Attr.3):
    let List.674 : List Str = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.674;

procedure List.8 (#Attr.2, #Attr.3):
    let List.682 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.682;

procedure List.80 (List.579, List.580, List.581, List.582, List.583):
    joinpoint List.530 List.433 List.434 List.435 List.436 List.437:
        let List.532 : Int1 = CallByName Num.22 List.436 List.437;
        if List.532 then
            let List.539 : {Str, Str} = CallByName List.66 List.433 List.436;
            inc List.539;
            let List.533 : {List U8, U64} = CallByName List.139 List.434 List.539 List.435;
            let List.536 : U64 = 1i64;
            let List.535 : U64 = CallByName Num.19 List.436 List.536;
            jump List.530 List.433 List.533 List.435 List.535 List.437;
        else
            dec List.433;
            ret List.434;
    in
    jump List.530 List.579 List.580 List.581 List.582 List.583;

procedure List.80 (List.756, List.757, List.758, List.759, List.760):
    joinpoint List.638 List.433 List.434 List.435 List.436 List.437:
        let List.640 : Int1 = CallByName Num.22 List.436 List.437;
        if List.640 then
            let List.647 : {Str, Str} = CallByName List.66 List.433 List.436;
            inc List.647;
            let List.641 : {List U8, U64} = CallByName List.139 List.434 List.647 List.435;
            let List.644 : U64 = 1i64;
            let List.643 : U64 = CallByName Num.19 List.436 List.644;
            jump List.638 List.433 List.641 List.435 List.643 List.437;
        else
            dec List.433;
            ret List.434;
    in
    jump List.638 List.756 List.757 List.758 List.759 List.760;

procedure List.80 (List.773, List.774, List.775, List.776, List.777):
    joinpoint List.658 List.433 List.434 List.435 List.436 List.437:
        let List.660 : Int1 = CallByName Num.22 List.436 List.437;
        if List.660 then
            let List.667 : U8 = CallByName List.66 List.433 List.436;
            let List.661 : List U8 = CallByName List.139 List.434 List.667 List.435;
            let List.664 : U64 = 1i64;
            let List.663 : U64 = CallByName Num.19 List.436 List.664;
            jump List.658 List.433 List.661 List.435 List.663 List.437;
        else
            dec List.433;
            ret List.434;
    in
    jump List.658 List.773 List.774 List.775 List.776 List.777;

procedure List.80 (List.809, List.810, List.811, List.812, List.813):
    joinpoint List.729 List.433 List.434 List.435 List.436 List.437:
        let List.731 : Int1 = CallByName Num.22 List.436 List.437;
        if List.731 then
            let List.740 : U8 = CallByName List.66 List.433 List.436;
            let List.732 : [C {U64, Int1}, C {U64, Int1}] = CallByName Json.188 List.434 List.740;
            let List.737 : U8 = 1i64;
            let List.738 : U8 = GetTagId List.732;
            let List.739 : Int1 = lowlevel Eq List.737 List.738;
            if List.739 then
                let List.438 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.732;
                let List.735 : U64 = 1i64;
                let List.734 : U64 = CallByName Num.19 List.436 List.735;
                jump List.729 List.433 List.438 List.435 List.734 List.437;
            else
                dec List.433;
                let List.439 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.732;
                let List.736 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) List.439;
                ret List.736;
        else
            dec List.433;
            let List.730 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) List.434;
            ret List.730;
    in
    jump List.729 List.809 List.810 List.811 List.812 List.813;

procedure List.92 (List.430, List.431, List.432):
    let List.528 : U64 = 0i64;
    let List.529 : U64 = CallByName List.6 List.430;
    let List.527 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.528 List.529;
    ret List.527;

procedure List.92 (List.430, List.431, List.432):
    let List.636 : U64 = 0i64;
    let List.637 : U64 = CallByName List.6 List.430;
    let List.635 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.636 List.637;
    ret List.635;

procedure List.92 (List.430, List.431, List.432):
    let List.656 : U64 = 0i64;
    let List.657 : U64 = CallByName List.6 List.430;
    let List.655 : List U8 = CallByName List.80 List.430 List.431 List.432 List.656 List.657;
    ret List.655;

procedure List.92 (List.430, List.431, List.432):
    let List.727 : U64 = 0i64;
    let List.728 : U64 = CallByName List.6 List.430;
    let List.726 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.80 List.430 List.431 List.432 List.727 List.728;
    ret List.726;

procedure Num.127 (#Attr.2):
    let Num.305 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.305;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.314 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.314;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.318 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.318;

procedure Num.21 (#Attr.2, #Attr.3):
    let Num.311 : U64 = lowlevel NumMul #Attr.2 #Attr.3;
    ret Num.311;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.317 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.317;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.319 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.319;

procedure Num.94 (#Attr.2, #Attr.3):
    let Num.310 : U64 = lowlevel NumDivCeilUnchecked #Attr.2 #Attr.3;
    ret Num.310;

procedure Str.12 (#Attr.2):
    let Str.324 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.324;

procedure Str.4 (#Attr.2, #Attr.3):
    let Str.327 : Str = lowlevel StrJoinWith #Attr.2 #Attr.3;
    ret Str.327;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.307 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.307;

procedure Str.55 (#Attr.2):
    let Str.330 : List Str = lowlevel StrGraphemes #Attr.2;
    ret Str.330;

procedure Str.9 (Str.79):
    let Str.305 : U64 = 0i64;
    let Str.306 : U64 = CallByName List.6 Str.79;
    let Str.80 : {U64, Str, Int1, U8} = CallByName Str.48 Str.79 Str.305 Str.306;
    let Str.302 : Int1 = StructAtIndex 2 Str.80;
    if Str.302 then
        let Str.304 : Str = StructAtIndex 1 Str.80;
        let Str.303 : [C {U64, U8}, C Str] = TagId(1) Str.304;
        ret Str.303;
    else
        let Str.300 : U8 = StructAtIndex 3 Str.80;
        let Str.301 : U64 = StructAtIndex 0 Str.80;
        let #Derived_gen.29 : Str = StructAtIndex 1 Str.80;
        dec #Derived_gen.29;
        let Str.299 : {U64, U8} = Struct {Str.301, Str.300};
        let Str.298 : [C {U64, U8}, C Str] = TagId(0) Str.299;
        ret Str.298;

procedure Test.0 ():
    let Test.12 : Str = "bar";
    let Test.10 : [C , C [], C , C , C , C ] = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.26 Test.12 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
