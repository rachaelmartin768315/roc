procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.22 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.5 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Json.20 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.14 : Str = CallByName Encode.22 #Derived.6;
    ret #Derived_gen.14;

procedure #Derived.7 (#Derived.8, #Derived.9, #Derived.6):
    let #Derived_gen.21 : Str = "b";
    let #Derived_gen.22 : Str = CallByName Json.18 #Derived.6;
    let #Derived_gen.20 : {Str, Str} = Struct {#Derived_gen.21, #Derived_gen.22};
    let #Derived_gen.19 : List {Str, Str} = Array [#Derived_gen.20];
    let #Derived_gen.18 : List {Str, Str} = CallByName Json.20 #Derived_gen.19;
    let #Derived_gen.17 : List U8 = CallByName Encode.23 #Derived.8 #Derived_gen.18 #Derived.9;
    ret #Derived_gen.17;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.2 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.112 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.115 : List U8 = CallByName #Derived.7 Encode.94 Encode.96 Encode.102;
    ret Encode.115;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.125 : List U8 = CallByName Json.112 Encode.94 Encode.96 Encode.102;
    ret Encode.125;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.128 : List U8 = CallByName Json.96 Encode.94 Encode.96 Encode.102;
    ret Encode.128;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : Str = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.396 : {} = Struct {};
    ret Json.396;

procedure Json.112 (Json.113, Json.399, Json.111):
    let Json.432 : I64 = 123i64;
    let Json.431 : U8 = CallByName Num.125 Json.432;
    let Json.115 : List U8 = CallByName List.4 Json.113 Json.431;
    let Json.430 : U64 = CallByName List.6 Json.111;
    let Json.407 : {List U8, U64} = Struct {Json.115, Json.430};
    let Json.408 : {} = Struct {};
    let Json.406 : {List U8, U64} = CallByName List.18 Json.111 Json.407 Json.408;
    dec Json.111;
    let Json.117 : List U8 = StructAtIndex 0 Json.406;
    inc Json.117;
    dec Json.406;
    let Json.405 : I64 = 125i64;
    let Json.404 : U8 = CallByName Num.125 Json.405;
    let Json.403 : List U8 = CallByName List.4 Json.117 Json.404;
    ret Json.403;

procedure Json.112 (Json.113, Json.399, Json.111):
    let Json.472 : I64 = 123i64;
    let Json.471 : U8 = CallByName Num.125 Json.472;
    let Json.115 : List U8 = CallByName List.4 Json.113 Json.471;
    let Json.470 : U64 = CallByName List.6 Json.111;
    let Json.447 : {List U8, U64} = Struct {Json.115, Json.470};
    let Json.448 : {} = Struct {};
    let Json.446 : {List U8, U64} = CallByName List.18 Json.111 Json.447 Json.448;
    dec Json.111;
    let Json.117 : List U8 = StructAtIndex 0 Json.446;
    inc Json.117;
    dec Json.446;
    let Json.445 : I64 = 125i64;
    let Json.444 : U8 = CallByName Num.125 Json.445;
    let Json.443 : List U8 = CallByName List.4 Json.117 Json.444;
    ret Json.443;

procedure Json.114 (Json.401, Json.402):
    let Json.120 : Str = StructAtIndex 0 Json.402;
    inc Json.120;
    let Json.121 : Str = StructAtIndex 1 Json.402;
    inc Json.121;
    dec Json.402;
    let Json.118 : List U8 = StructAtIndex 0 Json.401;
    inc Json.118;
    let Json.119 : U64 = StructAtIndex 1 Json.401;
    dec Json.401;
    let Json.429 : I64 = 34i64;
    let Json.428 : U8 = CallByName Num.125 Json.429;
    let Json.426 : List U8 = CallByName List.4 Json.118 Json.428;
    let Json.427 : List U8 = CallByName Str.12 Json.120;
    let Json.423 : List U8 = CallByName List.8 Json.426 Json.427;
    let Json.425 : I64 = 34i64;
    let Json.424 : U8 = CallByName Num.125 Json.425;
    let Json.420 : List U8 = CallByName List.4 Json.423 Json.424;
    let Json.422 : I64 = 58i64;
    let Json.421 : U8 = CallByName Num.125 Json.422;
    let Json.418 : List U8 = CallByName List.4 Json.420 Json.421;
    let Json.419 : {} = Struct {};
    let Json.122 : List U8 = CallByName Encode.23 Json.418 Json.121 Json.419;
    joinpoint Json.413 Json.123:
        let Json.411 : U64 = 1i64;
        let Json.410 : U64 = CallByName Num.20 Json.119 Json.411;
        let Json.409 : {List U8, U64} = Struct {Json.123, Json.410};
        ret Json.409;
    in
    let Json.417 : U64 = 1i64;
    let Json.414 : Int1 = CallByName Num.24 Json.119 Json.417;
    if Json.414 then
        let Json.416 : I64 = 44i64;
        let Json.415 : U8 = CallByName Num.125 Json.416;
        let Json.412 : List U8 = CallByName List.4 Json.122 Json.415;
        jump Json.413 Json.412;
    else
        jump Json.413 Json.122;

procedure Json.114 (Json.401, Json.402):
    let Json.120 : Str = StructAtIndex 0 Json.402;
    inc Json.120;
    let Json.121 : Str = StructAtIndex 1 Json.402;
    inc Json.121;
    dec Json.402;
    let Json.118 : List U8 = StructAtIndex 0 Json.401;
    inc Json.118;
    let Json.119 : U64 = StructAtIndex 1 Json.401;
    dec Json.401;
    let Json.469 : I64 = 34i64;
    let Json.468 : U8 = CallByName Num.125 Json.469;
    let Json.466 : List U8 = CallByName List.4 Json.118 Json.468;
    let Json.467 : List U8 = CallByName Str.12 Json.120;
    let Json.463 : List U8 = CallByName List.8 Json.466 Json.467;
    let Json.465 : I64 = 34i64;
    let Json.464 : U8 = CallByName Num.125 Json.465;
    let Json.460 : List U8 = CallByName List.4 Json.463 Json.464;
    let Json.462 : I64 = 58i64;
    let Json.461 : U8 = CallByName Num.125 Json.462;
    let Json.458 : List U8 = CallByName List.4 Json.460 Json.461;
    let Json.459 : {} = Struct {};
    let Json.122 : List U8 = CallByName Encode.23 Json.458 Json.121 Json.459;
    joinpoint Json.453 Json.123:
        let Json.451 : U64 = 1i64;
        let Json.450 : U64 = CallByName Num.20 Json.119 Json.451;
        let Json.449 : {List U8, U64} = Struct {Json.123, Json.450};
        ret Json.449;
    in
    let Json.457 : U64 = 1i64;
    let Json.454 : Int1 = CallByName Num.24 Json.119 Json.457;
    if Json.454 then
        let Json.456 : I64 = 44i64;
        let Json.455 : U8 = CallByName Num.125 Json.456;
        let Json.452 : List U8 = CallByName List.4 Json.122 Json.455;
        jump Json.453 Json.452;
    else
        jump Json.453 Json.122;

procedure Json.18 (Json.95):
    let Json.473 : Str = CallByName Encode.22 Json.95;
    ret Json.473;

procedure Json.20 (Json.111):
    let Json.397 : List {Str, Str} = CallByName Encode.22 Json.111;
    ret Json.397;

procedure Json.20 (Json.111):
    let Json.439 : List {Str, Str} = CallByName Encode.22 Json.111;
    ret Json.439;

procedure Json.96 (Json.97, Json.475, Json.95):
    let Json.484 : I64 = 34i64;
    let Json.483 : U8 = CallByName Num.125 Json.484;
    let Json.481 : List U8 = CallByName List.4 Json.97 Json.483;
    let Json.482 : List U8 = CallByName Str.12 Json.95;
    let Json.478 : List U8 = CallByName List.8 Json.481 Json.482;
    let Json.480 : I64 = 34i64;
    let Json.479 : U8 = CallByName Num.125 Json.480;
    let Json.477 : List U8 = CallByName List.4 Json.478 Json.479;
    ret Json.477;

procedure List.138 (List.139, List.140, List.137):
    let List.534 : {List U8, U64} = CallByName Json.114 List.139 List.140;
    ret List.534;

procedure List.138 (List.139, List.140, List.137):
    let List.607 : {List U8, U64} = CallByName Json.114 List.139 List.140;
    ret List.607;

procedure List.18 (List.135, List.136, List.137):
    let List.515 : {List U8, U64} = CallByName List.91 List.135 List.136 List.137;
    ret List.515;

procedure List.18 (List.135, List.136, List.137):
    let List.588 : {List U8, U64} = CallByName List.91 List.135 List.136 List.137;
    ret List.588;

procedure List.4 (List.106, List.107):
    let List.587 : U64 = 1i64;
    let List.586 : List U8 = CallByName List.70 List.106 List.587;
    let List.585 : List U8 = CallByName List.71 List.586 List.107;
    ret List.585;

procedure List.6 (#Attr.2):
    let List.493 : U64 = lowlevel ListLen #Attr.2;
    ret List.493;

procedure List.6 (#Attr.2):
    let List.536 : U64 = lowlevel ListLen #Attr.2;
    ret List.536;

procedure List.6 (#Attr.2):
    let List.610 : U64 = lowlevel ListLen #Attr.2;
    ret List.610;

procedure List.66 (#Attr.2, #Attr.3):
    let List.531 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.531;

procedure List.66 (#Attr.2, #Attr.3):
    let List.604 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.604;

procedure List.70 (#Attr.2, #Attr.3):
    let List.566 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.566;

procedure List.71 (#Attr.2, #Attr.3):
    let List.564 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.564;

procedure List.8 (#Attr.2, #Attr.3):
    let List.609 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.609;

procedure List.80 (List.546, List.547, List.548, List.549, List.550):
    joinpoint List.521 List.432 List.433 List.434 List.435 List.436:
        let List.523 : Int1 = CallByName Num.22 List.435 List.436;
        if List.523 then
            let List.530 : {Str, Str} = CallByName List.66 List.432 List.435;
            let List.524 : {List U8, U64} = CallByName List.138 List.433 List.530 List.434;
            let List.527 : U64 = 1i64;
            let List.526 : U64 = CallByName Num.19 List.435 List.527;
            jump List.521 List.432 List.524 List.434 List.526 List.436;
        else
            ret List.433;
    in
    jump List.521 List.546 List.547 List.548 List.549 List.550;

procedure List.80 (List.620, List.621, List.622, List.623, List.624):
    joinpoint List.594 List.432 List.433 List.434 List.435 List.436:
        let List.596 : Int1 = CallByName Num.22 List.435 List.436;
        if List.596 then
            let List.603 : {Str, Str} = CallByName List.66 List.432 List.435;
            let List.597 : {List U8, U64} = CallByName List.138 List.433 List.603 List.434;
            let List.600 : U64 = 1i64;
            let List.599 : U64 = CallByName Num.19 List.435 List.600;
            jump List.594 List.432 List.597 List.434 List.599 List.436;
        else
            ret List.433;
    in
    jump List.594 List.620 List.621 List.622 List.623 List.624;

procedure List.91 (List.429, List.430, List.431):
    let List.519 : U64 = 0i64;
    let List.520 : U64 = CallByName List.6 List.429;
    let List.518 : {List U8, U64} = CallByName List.80 List.429 List.430 List.431 List.519 List.520;
    ret List.518;

procedure List.91 (List.429, List.430, List.431):
    let List.592 : U64 = 0i64;
    let List.593 : U64 = CallByName List.6 List.429;
    let List.591 : {List U8, U64} = CallByName List.80 List.429 List.430 List.431 List.592 List.593;
    ret List.591;

procedure Num.125 (#Attr.2):
    let Num.282 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.282;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.284;

procedure Str.12 (#Attr.2):
    let Str.282 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.282;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.274 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.274;

procedure Str.9 (Str.76):
    let Str.272 : U64 = 0i64;
    let Str.273 : U64 = CallByName List.6 Str.76;
    let Str.77 : {U64, Str, Int1, U8} = CallByName Str.48 Str.76 Str.272 Str.273;
    let Str.269 : Int1 = StructAtIndex 2 Str.77;
    if Str.269 then
        let Str.271 : Str = StructAtIndex 1 Str.77;
        inc Str.271;
        dec Str.77;
        let Str.270 : [C {U64, U8}, C Str] = TagId(1) Str.271;
        ret Str.270;
    else
        let Str.267 : U8 = StructAtIndex 3 Str.77;
        let Str.268 : U64 = StructAtIndex 0 Str.77;
        dec Str.77;
        let Str.266 : {U64, U8} = Struct {Str.268, Str.267};
        let Str.265 : [C {U64, U8}, C Str] = TagId(0) Str.266;
        ret Str.265;

procedure Test.0 ():
    let Test.12 : Str = "bar";
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.25 Test.12 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
