procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.5 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName TotallyNotJson.29 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.10 : Str = CallByName Encode.23 #Derived.6;
    ret #Derived_gen.10;

procedure #Derived.7 (#Derived.8, #Derived.9, #Derived.6):
    let #Derived_gen.17 : Str = "b";
    let #Derived_gen.18 : Str = CallByName TotallyNotJson.25 #Derived.6;
    let #Derived_gen.16 : {Str, Str} = Struct {#Derived_gen.17, #Derived_gen.18};
    let #Derived_gen.15 : List {Str, Str} = Array [#Derived_gen.16];
    let #Derived_gen.14 : List {Str, Str} = CallByName TotallyNotJson.29 #Derived_gen.15;
    let #Derived_gen.13 : List U8 = CallByName Encode.24 #Derived.8 #Derived_gen.14 #Derived.9;
    ret #Derived_gen.13;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.24 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.24;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.2 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.113 : List U8 = CallByName TotallyNotJson.202 Encode.99 Encode.101 Encode.107;
    ret Encode.113;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.115 : List U8 = CallByName #Derived.7 Encode.99 Encode.101 Encode.107;
    ret Encode.115;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.117 : List U8 = CallByName TotallyNotJson.202 Encode.99 Encode.101 Encode.107;
    ret Encode.117;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.120 : List U8 = CallByName TotallyNotJson.150 Encode.99 Encode.101 Encode.107;
    ret Encode.120;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : Str = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure List.103 (List.487, List.488, List.489):
    let List.685 : U64 = 0i64;
    let List.686 : U64 = CallByName List.6 List.487;
    let List.684 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.80 List.487 List.488 List.489 List.685 List.686;
    ret List.684;

procedure List.18 (List.159, List.160, List.161):
    let List.593 : U64 = 0i64;
    let List.594 : U64 = CallByName List.6 List.159;
    let List.592 : {List U8, U64} = CallByName List.91 List.159 List.160 List.161 List.593 List.594;
    ret List.592;

procedure List.18 (List.159, List.160, List.161):
    let List.628 : U64 = 0i64;
    let List.629 : U64 = CallByName List.6 List.159;
    let List.627 : {List U8, U64} = CallByName List.91 List.159 List.160 List.161 List.628 List.629;
    ret List.627;

procedure List.18 (List.159, List.160, List.161):
    let List.640 : U64 = 0i64;
    let List.641 : U64 = CallByName List.6 List.159;
    let List.639 : List U8 = CallByName List.91 List.159 List.160 List.161 List.640 List.641;
    ret List.639;

procedure List.26 (List.200, List.201, List.202):
    let List.678 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.103 List.200 List.201 List.202;
    let List.681 : U8 = 1i64;
    let List.682 : U8 = GetTagId List.678;
    let List.683 : Int1 = lowlevel Eq List.681 List.682;
    if List.683 then
        let List.203 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.678;
        ret List.203;
    else
        let List.204 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.678;
        ret List.204;

procedure List.4 (List.123, List.124):
    let List.626 : U64 = 1i64;
    let List.625 : List U8 = CallByName List.70 List.123 List.626;
    let List.624 : List U8 = CallByName List.71 List.625 List.124;
    ret List.624;

procedure List.49 (List.419, List.420):
    let List.669 : U64 = StructAtIndex 1 List.420;
    let List.670 : U64 = StructAtIndex 0 List.420;
    let List.668 : List U8 = CallByName List.72 List.419 List.669 List.670;
    ret List.668;

procedure List.52 (List.434, List.435):
    let List.436 : U64 = CallByName List.6 List.434;
    joinpoint List.676 List.437:
        let List.674 : U64 = 0i64;
        let List.673 : {U64, U64} = Struct {List.437, List.674};
        inc List.434;
        let List.438 : List U8 = CallByName List.49 List.434 List.673;
        let List.672 : U64 = CallByName Num.75 List.436 List.437;
        let List.667 : {U64, U64} = Struct {List.672, List.437};
        let List.439 : List U8 = CallByName List.49 List.434 List.667;
        let List.666 : {List U8, List U8} = Struct {List.438, List.439};
        ret List.666;
    in
    let List.677 : Int1 = CallByName Num.24 List.436 List.435;
    if List.677 then
        jump List.676 List.435;
    else
        jump List.676 List.436;

procedure List.6 (#Attr.2):
    let List.606 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.606;

procedure List.6 (#Attr.2):
    let List.661 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.661;

procedure List.6 (#Attr.2):
    let List.663 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.663;

procedure List.66 (#Attr.2, #Attr.3):
    let List.602 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.602;

procedure List.66 (#Attr.2, #Attr.3):
    let List.637 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.637;

procedure List.66 (#Attr.2, #Attr.3):
    let List.649 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.649;

procedure List.68 (#Attr.2):
    let List.665 : List U8 = lowlevel ListWithCapacity #Attr.2;
    ret List.665;

procedure List.70 (#Attr.2, #Attr.3):
    let List.611 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.611;

procedure List.71 (#Attr.2, #Attr.3):
    let List.609 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.609;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.671 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.671;

procedure List.8 (#Attr.2, #Attr.3):
    let List.660 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.660;

procedure List.80 (#Derived_gen.26, #Derived_gen.27, #Derived_gen.28, #Derived_gen.29, #Derived_gen.30):
    joinpoint List.687 List.490 List.491 List.492 List.493 List.494:
        let List.689 : Int1 = CallByName Num.22 List.493 List.494;
        if List.689 then
            let List.698 : U8 = CallByName List.66 List.490 List.493;
            let List.690 : [C {U64, Int1}, C {U64, Int1}] = CallByName TotallyNotJson.157 List.491 List.698;
            let List.695 : U8 = 1i64;
            let List.696 : U8 = GetTagId List.690;
            let List.697 : Int1 = lowlevel Eq List.695 List.696;
            if List.697 then
                let List.495 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.690;
                let List.693 : U64 = 1i64;
                let List.692 : U64 = CallByName Num.51 List.493 List.693;
                jump List.687 List.490 List.495 List.492 List.692 List.494;
            else
                dec List.490;
                let List.496 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.690;
                let List.694 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) List.496;
                ret List.694;
        else
            dec List.490;
            let List.688 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) List.491;
            ret List.688;
    in
    jump List.687 #Derived_gen.26 #Derived_gen.27 #Derived_gen.28 #Derived_gen.29 #Derived_gen.30;

procedure List.91 (#Derived_gen.31, #Derived_gen.32, #Derived_gen.33, #Derived_gen.34, #Derived_gen.35):
    joinpoint List.595 List.162 List.163 List.164 List.165 List.166:
        let List.597 : Int1 = CallByName Num.22 List.165 List.166;
        if List.597 then
            let List.601 : {Str, Str} = CallByName List.66 List.162 List.165;
            inc List.601;
            let List.167 : {List U8, U64} = CallByName TotallyNotJson.204 List.163 List.601;
            let List.600 : U64 = 1i64;
            let List.599 : U64 = CallByName Num.51 List.165 List.600;
            jump List.595 List.162 List.167 List.164 List.599 List.166;
        else
            dec List.162;
            ret List.163;
    in
    jump List.595 #Derived_gen.31 #Derived_gen.32 #Derived_gen.33 #Derived_gen.34 #Derived_gen.35;

procedure List.91 (#Derived_gen.36, #Derived_gen.37, #Derived_gen.38, #Derived_gen.39, #Derived_gen.40):
    joinpoint List.642 List.162 List.163 List.164 List.165 List.166:
        let List.644 : Int1 = CallByName Num.22 List.165 List.166;
        if List.644 then
            let List.648 : U8 = CallByName List.66 List.162 List.165;
            let List.167 : List U8 = CallByName TotallyNotJson.183 List.163 List.648;
            let List.647 : U64 = 1i64;
            let List.646 : U64 = CallByName Num.51 List.165 List.647;
            jump List.642 List.162 List.167 List.164 List.646 List.166;
        else
            dec List.162;
            ret List.163;
    in
    jump List.642 #Derived_gen.36 #Derived_gen.37 #Derived_gen.38 #Derived_gen.39 #Derived_gen.40;

procedure List.91 (#Derived_gen.50, #Derived_gen.51, #Derived_gen.52, #Derived_gen.53, #Derived_gen.54):
    joinpoint List.630 List.162 List.163 List.164 List.165 List.166:
        let List.632 : Int1 = CallByName Num.22 List.165 List.166;
        if List.632 then
            let List.636 : {Str, Str} = CallByName List.66 List.162 List.165;
            inc List.636;
            let List.167 : {List U8, U64} = CallByName TotallyNotJson.204 List.163 List.636;
            let List.635 : U64 = 1i64;
            let List.634 : U64 = CallByName Num.51 List.165 List.635;
            jump List.630 List.162 List.167 List.164 List.634 List.166;
        else
            dec List.162;
            ret List.163;
    in
    jump List.630 #Derived_gen.50 #Derived_gen.51 #Derived_gen.52 #Derived_gen.53 #Derived_gen.54;

procedure Num.127 (#Attr.2):
    let Num.295 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.295;

procedure Num.137 (#Attr.2, #Attr.3):
    let Num.301 : U64 = lowlevel NumDivCeilUnchecked #Attr.2 #Attr.3;
    ret Num.301;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.300 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.300;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.297 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.297;

procedure Num.21 (#Attr.2, #Attr.3):
    let Num.302 : U64 = lowlevel NumMul #Attr.2 #Attr.3;
    ret Num.302;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.308 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.308;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.310 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.310;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.305 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.305;

procedure Num.75 (#Attr.2, #Attr.3):
    let Num.309 : U64 = lowlevel NumSubWrap #Attr.2 #Attr.3;
    ret Num.309;

procedure Str.12 (#Attr.2):
    let Str.242 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.242;

procedure Str.43 (#Attr.2):
    let Str.239 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8 #Attr.2;
    ret Str.239;

procedure Str.9 (Str.67):
    let Str.68 : {U64, Str, Int1, U8} = CallByName Str.43 Str.67;
    let Str.236 : Int1 = StructAtIndex 2 Str.68;
    if Str.236 then
        let Str.238 : Str = StructAtIndex 1 Str.68;
        let Str.237 : [C {U64, U8}, C Str] = TagId(1) Str.238;
        ret Str.237;
    else
        let Str.234 : U8 = StructAtIndex 3 Str.68;
        let Str.235 : U64 = StructAtIndex 0 Str.68;
        let #Derived_gen.55 : Str = StructAtIndex 1 Str.68;
        dec #Derived_gen.55;
        let Str.233 : {U64, U8} = Struct {Str.235, Str.234};
        let Str.232 : [C {U64, U8}, C Str] = TagId(0) Str.233;
        ret Str.232;

procedure TotallyNotJson.150 (TotallyNotJson.151, TotallyNotJson.1060, TotallyNotJson.149):
    let TotallyNotJson.1063 : List U8 = CallByName TotallyNotJson.26 TotallyNotJson.149;
    let TotallyNotJson.1062 : List U8 = CallByName List.8 TotallyNotJson.151 TotallyNotJson.1063;
    ret TotallyNotJson.1062;

procedure TotallyNotJson.157 (TotallyNotJson.1111, TotallyNotJson.160):
    let TotallyNotJson.158 : U64 = StructAtIndex 0 TotallyNotJson.1111;
    let TotallyNotJson.159 : Int1 = StructAtIndex 1 TotallyNotJson.1111;
    switch TotallyNotJson.160:
        case 34:
            let TotallyNotJson.1114 : Int1 = false;
            let TotallyNotJson.1113 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1114};
            let TotallyNotJson.1112 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1113;
            ret TotallyNotJson.1112;
    
        case 92:
            let TotallyNotJson.1117 : Int1 = false;
            let TotallyNotJson.1116 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1117};
            let TotallyNotJson.1115 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1116;
            ret TotallyNotJson.1115;
    
        case 47:
            let TotallyNotJson.1120 : Int1 = false;
            let TotallyNotJson.1119 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1120};
            let TotallyNotJson.1118 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1119;
            ret TotallyNotJson.1118;
    
        case 8:
            let TotallyNotJson.1123 : Int1 = false;
            let TotallyNotJson.1122 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1123};
            let TotallyNotJson.1121 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1122;
            ret TotallyNotJson.1121;
    
        case 12:
            let TotallyNotJson.1126 : Int1 = false;
            let TotallyNotJson.1125 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1126};
            let TotallyNotJson.1124 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1125;
            ret TotallyNotJson.1124;
    
        case 10:
            let TotallyNotJson.1129 : Int1 = false;
            let TotallyNotJson.1128 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1129};
            let TotallyNotJson.1127 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1128;
            ret TotallyNotJson.1127;
    
        case 13:
            let TotallyNotJson.1132 : Int1 = false;
            let TotallyNotJson.1131 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1132};
            let TotallyNotJson.1130 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1131;
            ret TotallyNotJson.1130;
    
        case 9:
            let TotallyNotJson.1135 : Int1 = false;
            let TotallyNotJson.1134 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1135};
            let TotallyNotJson.1133 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1134;
            ret TotallyNotJson.1133;
    
        default:
            let TotallyNotJson.1139 : U64 = 1i64;
            let TotallyNotJson.1138 : U64 = CallByName Num.19 TotallyNotJson.158 TotallyNotJson.1139;
            let TotallyNotJson.1137 : {U64, Int1} = Struct {TotallyNotJson.1138, TotallyNotJson.159};
            let TotallyNotJson.1136 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) TotallyNotJson.1137;
            ret TotallyNotJson.1136;
    

procedure TotallyNotJson.183 (TotallyNotJson.184, TotallyNotJson.185):
    let TotallyNotJson.1082 : List U8 = CallByName TotallyNotJson.27 TotallyNotJson.185;
    let TotallyNotJson.1081 : List U8 = CallByName List.8 TotallyNotJson.184 TotallyNotJson.1082;
    ret TotallyNotJson.1081;

procedure TotallyNotJson.202 (TotallyNotJson.203, TotallyNotJson.976, TotallyNotJson.201):
    let TotallyNotJson.1016 : I64 = 123i64;
    let TotallyNotJson.1015 : U8 = CallByName Num.127 TotallyNotJson.1016;
    let TotallyNotJson.205 : List U8 = CallByName List.4 TotallyNotJson.203 TotallyNotJson.1015;
    let TotallyNotJson.1014 : U64 = CallByName List.6 TotallyNotJson.201;
    let TotallyNotJson.984 : {List U8, U64} = Struct {TotallyNotJson.205, TotallyNotJson.1014};
    let TotallyNotJson.985 : {} = Struct {};
    let TotallyNotJson.983 : {List U8, U64} = CallByName List.18 TotallyNotJson.201 TotallyNotJson.984 TotallyNotJson.985;
    let TotallyNotJson.207 : List U8 = StructAtIndex 0 TotallyNotJson.983;
    let TotallyNotJson.982 : I64 = 125i64;
    let TotallyNotJson.981 : U8 = CallByName Num.127 TotallyNotJson.982;
    let TotallyNotJson.980 : List U8 = CallByName List.4 TotallyNotJson.207 TotallyNotJson.981;
    ret TotallyNotJson.980;

procedure TotallyNotJson.202 (TotallyNotJson.203, TotallyNotJson.976, TotallyNotJson.201):
    let TotallyNotJson.1057 : I64 = 123i64;
    let TotallyNotJson.1056 : U8 = CallByName Num.127 TotallyNotJson.1057;
    let TotallyNotJson.205 : List U8 = CallByName List.4 TotallyNotJson.203 TotallyNotJson.1056;
    let TotallyNotJson.1055 : U64 = CallByName List.6 TotallyNotJson.201;
    let TotallyNotJson.1025 : {List U8, U64} = Struct {TotallyNotJson.205, TotallyNotJson.1055};
    let TotallyNotJson.1026 : {} = Struct {};
    let TotallyNotJson.1024 : {List U8, U64} = CallByName List.18 TotallyNotJson.201 TotallyNotJson.1025 TotallyNotJson.1026;
    let TotallyNotJson.207 : List U8 = StructAtIndex 0 TotallyNotJson.1024;
    let TotallyNotJson.1023 : I64 = 125i64;
    let TotallyNotJson.1022 : U8 = CallByName Num.127 TotallyNotJson.1023;
    let TotallyNotJson.1021 : List U8 = CallByName List.4 TotallyNotJson.207 TotallyNotJson.1022;
    ret TotallyNotJson.1021;

procedure TotallyNotJson.204 (TotallyNotJson.978, TotallyNotJson.979):
    let TotallyNotJson.210 : Str = StructAtIndex 0 TotallyNotJson.979;
    let TotallyNotJson.211 : Str = StructAtIndex 1 TotallyNotJson.979;
    let TotallyNotJson.208 : List U8 = StructAtIndex 0 TotallyNotJson.978;
    let TotallyNotJson.209 : U64 = StructAtIndex 1 TotallyNotJson.978;
    let TotallyNotJson.1011 : List U8 = Array [];
    let TotallyNotJson.1012 : {} = CallByName TotallyNotJson.8;
    let TotallyNotJson.212 : List U8 = CallByName Encode.24 TotallyNotJson.1011 TotallyNotJson.211 TotallyNotJson.1012;
    let TotallyNotJson.1010 : List U8 = Array [];
    let TotallyNotJson.1006 : Int1 = CallByName Bool.11 TotallyNotJson.212 TotallyNotJson.1010;
    dec TotallyNotJson.1010;
    if TotallyNotJson.1006 then
        dec TotallyNotJson.210;
        dec TotallyNotJson.212;
        let TotallyNotJson.1009 : U64 = 1i64;
        let TotallyNotJson.1008 : U64 = CallByName Num.20 TotallyNotJson.209 TotallyNotJson.1009;
        let TotallyNotJson.1007 : {List U8, U64} = Struct {TotallyNotJson.208, TotallyNotJson.1008};
        ret TotallyNotJson.1007;
    else
        let TotallyNotJson.1005 : I64 = 34i64;
        let TotallyNotJson.1004 : U8 = CallByName Num.127 TotallyNotJson.1005;
        let TotallyNotJson.1002 : List U8 = CallByName List.4 TotallyNotJson.208 TotallyNotJson.1004;
        let TotallyNotJson.1003 : List U8 = CallByName Str.12 TotallyNotJson.210;
        let TotallyNotJson.999 : List U8 = CallByName List.8 TotallyNotJson.1002 TotallyNotJson.1003;
        let TotallyNotJson.1001 : I64 = 34i64;
        let TotallyNotJson.1000 : U8 = CallByName Num.127 TotallyNotJson.1001;
        let TotallyNotJson.996 : List U8 = CallByName List.4 TotallyNotJson.999 TotallyNotJson.1000;
        let TotallyNotJson.998 : I64 = 58i64;
        let TotallyNotJson.997 : U8 = CallByName Num.127 TotallyNotJson.998;
        let TotallyNotJson.995 : List U8 = CallByName List.4 TotallyNotJson.996 TotallyNotJson.997;
        let TotallyNotJson.214 : List U8 = CallByName List.8 TotallyNotJson.995 TotallyNotJson.212;
        joinpoint TotallyNotJson.990 TotallyNotJson.215:
            let TotallyNotJson.988 : U64 = 1i64;
            let TotallyNotJson.987 : U64 = CallByName Num.20 TotallyNotJson.209 TotallyNotJson.988;
            let TotallyNotJson.986 : {List U8, U64} = Struct {TotallyNotJson.215, TotallyNotJson.987};
            ret TotallyNotJson.986;
        in
        let TotallyNotJson.994 : U64 = 1i64;
        let TotallyNotJson.991 : Int1 = CallByName Num.24 TotallyNotJson.209 TotallyNotJson.994;
        if TotallyNotJson.991 then
            let TotallyNotJson.993 : I64 = 44i64;
            let TotallyNotJson.992 : U8 = CallByName Num.127 TotallyNotJson.993;
            let TotallyNotJson.989 : List U8 = CallByName List.4 TotallyNotJson.214 TotallyNotJson.992;
            jump TotallyNotJson.990 TotallyNotJson.989;
        else
            jump TotallyNotJson.990 TotallyNotJson.214;

procedure TotallyNotJson.204 (TotallyNotJson.978, TotallyNotJson.979):
    let TotallyNotJson.210 : Str = StructAtIndex 0 TotallyNotJson.979;
    let TotallyNotJson.211 : Str = StructAtIndex 1 TotallyNotJson.979;
    let TotallyNotJson.208 : List U8 = StructAtIndex 0 TotallyNotJson.978;
    let TotallyNotJson.209 : U64 = StructAtIndex 1 TotallyNotJson.978;
    let TotallyNotJson.1052 : List U8 = Array [];
    let TotallyNotJson.1053 : {} = CallByName TotallyNotJson.8;
    let TotallyNotJson.212 : List U8 = CallByName Encode.24 TotallyNotJson.1052 TotallyNotJson.211 TotallyNotJson.1053;
    let TotallyNotJson.1051 : List U8 = Array [];
    let TotallyNotJson.1047 : Int1 = CallByName Bool.11 TotallyNotJson.212 TotallyNotJson.1051;
    dec TotallyNotJson.1051;
    if TotallyNotJson.1047 then
        dec TotallyNotJson.210;
        dec TotallyNotJson.212;
        let TotallyNotJson.1050 : U64 = 1i64;
        let TotallyNotJson.1049 : U64 = CallByName Num.20 TotallyNotJson.209 TotallyNotJson.1050;
        let TotallyNotJson.1048 : {List U8, U64} = Struct {TotallyNotJson.208, TotallyNotJson.1049};
        ret TotallyNotJson.1048;
    else
        let TotallyNotJson.1046 : I64 = 34i64;
        let TotallyNotJson.1045 : U8 = CallByName Num.127 TotallyNotJson.1046;
        let TotallyNotJson.1043 : List U8 = CallByName List.4 TotallyNotJson.208 TotallyNotJson.1045;
        let TotallyNotJson.1044 : List U8 = CallByName Str.12 TotallyNotJson.210;
        let TotallyNotJson.1040 : List U8 = CallByName List.8 TotallyNotJson.1043 TotallyNotJson.1044;
        let TotallyNotJson.1042 : I64 = 34i64;
        let TotallyNotJson.1041 : U8 = CallByName Num.127 TotallyNotJson.1042;
        let TotallyNotJson.1037 : List U8 = CallByName List.4 TotallyNotJson.1040 TotallyNotJson.1041;
        let TotallyNotJson.1039 : I64 = 58i64;
        let TotallyNotJson.1038 : U8 = CallByName Num.127 TotallyNotJson.1039;
        let TotallyNotJson.1036 : List U8 = CallByName List.4 TotallyNotJson.1037 TotallyNotJson.1038;
        let TotallyNotJson.214 : List U8 = CallByName List.8 TotallyNotJson.1036 TotallyNotJson.212;
        joinpoint TotallyNotJson.1031 TotallyNotJson.215:
            let TotallyNotJson.1029 : U64 = 1i64;
            let TotallyNotJson.1028 : U64 = CallByName Num.20 TotallyNotJson.209 TotallyNotJson.1029;
            let TotallyNotJson.1027 : {List U8, U64} = Struct {TotallyNotJson.215, TotallyNotJson.1028};
            ret TotallyNotJson.1027;
        in
        let TotallyNotJson.1035 : U64 = 1i64;
        let TotallyNotJson.1032 : Int1 = CallByName Num.24 TotallyNotJson.209 TotallyNotJson.1035;
        if TotallyNotJson.1032 then
            let TotallyNotJson.1034 : I64 = 44i64;
            let TotallyNotJson.1033 : U8 = CallByName Num.127 TotallyNotJson.1034;
            let TotallyNotJson.1030 : List U8 = CallByName List.4 TotallyNotJson.214 TotallyNotJson.1033;
            jump TotallyNotJson.1031 TotallyNotJson.1030;
        else
            jump TotallyNotJson.1031 TotallyNotJson.214;

procedure TotallyNotJson.25 (TotallyNotJson.149):
    let TotallyNotJson.1058 : Str = CallByName Encode.23 TotallyNotJson.149;
    ret TotallyNotJson.1058;

procedure TotallyNotJson.26 (TotallyNotJson.152):
    let TotallyNotJson.153 : List U8 = CallByName Str.12 TotallyNotJson.152;
    let TotallyNotJson.1140 : U64 = 0i64;
    let TotallyNotJson.1141 : Int1 = true;
    let TotallyNotJson.154 : {U64, Int1} = Struct {TotallyNotJson.1140, TotallyNotJson.1141};
    let TotallyNotJson.1110 : {} = Struct {};
    inc TotallyNotJson.153;
    let TotallyNotJson.155 : {U64, Int1} = CallByName List.26 TotallyNotJson.153 TotallyNotJson.154 TotallyNotJson.1110;
    let TotallyNotJson.1064 : Int1 = StructAtIndex 1 TotallyNotJson.155;
    let TotallyNotJson.1108 : Int1 = true;
    let TotallyNotJson.1109 : Int1 = lowlevel Eq TotallyNotJson.1108 TotallyNotJson.1064;
    if TotallyNotJson.1109 then
        let TotallyNotJson.1074 : U64 = CallByName List.6 TotallyNotJson.153;
        let TotallyNotJson.1075 : U64 = 2i64;
        let TotallyNotJson.1073 : U64 = CallByName Num.19 TotallyNotJson.1074 TotallyNotJson.1075;
        let TotallyNotJson.1070 : List U8 = CallByName List.68 TotallyNotJson.1073;
        let TotallyNotJson.1072 : U8 = 34i64;
        let TotallyNotJson.1071 : List U8 = Array [TotallyNotJson.1072];
        let TotallyNotJson.1069 : List U8 = CallByName List.8 TotallyNotJson.1070 TotallyNotJson.1071;
        let TotallyNotJson.1066 : List U8 = CallByName List.8 TotallyNotJson.1069 TotallyNotJson.153;
        let TotallyNotJson.1068 : U8 = 34i64;
        let TotallyNotJson.1067 : List U8 = Array [TotallyNotJson.1068];
        let TotallyNotJson.1065 : List U8 = CallByName List.8 TotallyNotJson.1066 TotallyNotJson.1067;
        ret TotallyNotJson.1065;
    else
        inc TotallyNotJson.153;
        let TotallyNotJson.1107 : U64 = StructAtIndex 0 TotallyNotJson.155;
        let TotallyNotJson.1106 : {List U8, List U8} = CallByName List.52 TotallyNotJson.153 TotallyNotJson.1107;
        let TotallyNotJson.179 : List U8 = StructAtIndex 0 TotallyNotJson.1106;
        let TotallyNotJson.181 : List U8 = StructAtIndex 1 TotallyNotJson.1106;
        let TotallyNotJson.1104 : U64 = CallByName List.6 TotallyNotJson.153;
        dec TotallyNotJson.153;
        let TotallyNotJson.1105 : U64 = 120i64;
        let TotallyNotJson.1102 : U64 = CallByName Num.21 TotallyNotJson.1104 TotallyNotJson.1105;
        let TotallyNotJson.1103 : U64 = 100i64;
        let TotallyNotJson.1101 : U64 = CallByName Num.137 TotallyNotJson.1102 TotallyNotJson.1103;
        let TotallyNotJson.1098 : List U8 = CallByName List.68 TotallyNotJson.1101;
        let TotallyNotJson.1100 : U8 = 34i64;
        let TotallyNotJson.1099 : List U8 = Array [TotallyNotJson.1100];
        let TotallyNotJson.1097 : List U8 = CallByName List.8 TotallyNotJson.1098 TotallyNotJson.1099;
        let TotallyNotJson.182 : List U8 = CallByName List.8 TotallyNotJson.1097 TotallyNotJson.179;
        let TotallyNotJson.1080 : {} = Struct {};
        let TotallyNotJson.1077 : List U8 = CallByName List.18 TotallyNotJson.181 TotallyNotJson.182 TotallyNotJson.1080;
        let TotallyNotJson.1079 : U8 = 34i64;
        let TotallyNotJson.1078 : List U8 = Array [TotallyNotJson.1079];
        let TotallyNotJson.1076 : List U8 = CallByName List.8 TotallyNotJson.1077 TotallyNotJson.1078;
        ret TotallyNotJson.1076;

procedure TotallyNotJson.27 (TotallyNotJson.186):
    switch TotallyNotJson.186:
        case 34:
            let TotallyNotJson.1083 : List U8 = Array [92i64, 34i64];
            ret TotallyNotJson.1083;
    
        case 92:
            let TotallyNotJson.1084 : List U8 = Array [92i64, 92i64];
            ret TotallyNotJson.1084;
    
        case 47:
            let TotallyNotJson.1085 : List U8 = Array [92i64, 47i64];
            ret TotallyNotJson.1085;
    
        case 8:
            let TotallyNotJson.1087 : U8 = 98i64;
            let TotallyNotJson.1086 : List U8 = Array [92i64, TotallyNotJson.1087];
            ret TotallyNotJson.1086;
    
        case 12:
            let TotallyNotJson.1089 : U8 = 102i64;
            let TotallyNotJson.1088 : List U8 = Array [92i64, TotallyNotJson.1089];
            ret TotallyNotJson.1088;
    
        case 10:
            let TotallyNotJson.1091 : U8 = 110i64;
            let TotallyNotJson.1090 : List U8 = Array [92i64, TotallyNotJson.1091];
            ret TotallyNotJson.1090;
    
        case 13:
            let TotallyNotJson.1093 : U8 = 114i64;
            let TotallyNotJson.1092 : List U8 = Array [92i64, TotallyNotJson.1093];
            ret TotallyNotJson.1092;
    
        case 9:
            let TotallyNotJson.1095 : U8 = 114i64;
            let TotallyNotJson.1094 : List U8 = Array [92i64, TotallyNotJson.1095];
            ret TotallyNotJson.1094;
    
        default:
            let TotallyNotJson.1096 : List U8 = Array [TotallyNotJson.186];
            ret TotallyNotJson.1096;
    

procedure TotallyNotJson.29 (TotallyNotJson.201):
    let TotallyNotJson.1017 : List {Str, Str} = CallByName Encode.23 TotallyNotJson.201;
    ret TotallyNotJson.1017;

procedure TotallyNotJson.29 (TotallyNotJson.201):
    let TotallyNotJson.974 : List {Str, Str} = CallByName Encode.23 TotallyNotJson.201;
    ret TotallyNotJson.974;

procedure TotallyNotJson.8 ():
    let TotallyNotJson.1054 : {} = Struct {};
    ret TotallyNotJson.1054;

procedure Test.0 ():
    let Test.12 : Str = "bar";
    let Test.10 : {} = CallByName TotallyNotJson.8;
    let Test.8 : List U8 = CallByName Encode.26 Test.12 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
