procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.22 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.5 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Json.20 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.14 : Str = CallByName Encode.22 #Derived.6;
    ret #Derived_gen.14;

procedure #Derived.7 (#Derived.8, #Derived.9, #Derived.6):
    let #Derived_gen.21 : Str = "b";
    let #Derived_gen.22 : Str = CallByName Json.18 #Derived.6;
    let #Derived_gen.20 : {Str, Str} = Struct {#Derived_gen.21, #Derived_gen.22};
    let #Derived_gen.19 : List {Str, Str} = Array [#Derived_gen.20];
    let #Derived_gen.18 : List {Str, Str} = CallByName Json.20 #Derived_gen.19;
    let #Derived_gen.17 : List U8 = CallByName Encode.23 #Derived.8 #Derived_gen.18 #Derived.9;
    ret #Derived_gen.17;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.2 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.112 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.115 : List U8 = CallByName #Derived.7 Encode.94 Encode.96 Encode.102;
    ret Encode.115;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.125 : List U8 = CallByName Json.112 Encode.94 Encode.96 Encode.102;
    ret Encode.125;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.128 : List U8 = CallByName Json.96 Encode.94 Encode.96 Encode.102;
    ret Encode.128;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : Str = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.394 : {} = Struct {};
    ret Json.394;

procedure Json.112 (Json.113, Json.397, Json.111):
    let Json.430 : I64 = 123i64;
    let Json.429 : U8 = CallByName Num.125 Json.430;
    let Json.115 : List U8 = CallByName List.4 Json.113 Json.429;
    let Json.428 : U64 = CallByName List.6 Json.111;
    let Json.405 : {List U8, U64} = Struct {Json.115, Json.428};
    let Json.406 : {} = Struct {};
    let Json.404 : {List U8, U64} = CallByName List.18 Json.111 Json.405 Json.406;
    dec Json.111;
    let Json.117 : List U8 = StructAtIndex 0 Json.404;
    inc Json.117;
    dec Json.404;
    let Json.403 : I64 = 125i64;
    let Json.402 : U8 = CallByName Num.125 Json.403;
    let Json.401 : List U8 = CallByName List.4 Json.117 Json.402;
    ret Json.401;

procedure Json.112 (Json.113, Json.397, Json.111):
    let Json.470 : I64 = 123i64;
    let Json.469 : U8 = CallByName Num.125 Json.470;
    let Json.115 : List U8 = CallByName List.4 Json.113 Json.469;
    let Json.468 : U64 = CallByName List.6 Json.111;
    let Json.445 : {List U8, U64} = Struct {Json.115, Json.468};
    let Json.446 : {} = Struct {};
    let Json.444 : {List U8, U64} = CallByName List.18 Json.111 Json.445 Json.446;
    dec Json.111;
    let Json.117 : List U8 = StructAtIndex 0 Json.444;
    inc Json.117;
    dec Json.444;
    let Json.443 : I64 = 125i64;
    let Json.442 : U8 = CallByName Num.125 Json.443;
    let Json.441 : List U8 = CallByName List.4 Json.117 Json.442;
    ret Json.441;

procedure Json.114 (Json.399, Json.400):
    let Json.120 : Str = StructAtIndex 0 Json.400;
    inc Json.120;
    let Json.121 : Str = StructAtIndex 1 Json.400;
    inc Json.121;
    dec Json.400;
    let Json.118 : List U8 = StructAtIndex 0 Json.399;
    inc Json.118;
    let Json.119 : U64 = StructAtIndex 1 Json.399;
    dec Json.399;
    let Json.427 : I64 = 34i64;
    let Json.426 : U8 = CallByName Num.125 Json.427;
    let Json.424 : List U8 = CallByName List.4 Json.118 Json.426;
    let Json.425 : List U8 = CallByName Str.12 Json.120;
    let Json.421 : List U8 = CallByName List.8 Json.424 Json.425;
    let Json.423 : I64 = 34i64;
    let Json.422 : U8 = CallByName Num.125 Json.423;
    let Json.418 : List U8 = CallByName List.4 Json.421 Json.422;
    let Json.420 : I64 = 58i64;
    let Json.419 : U8 = CallByName Num.125 Json.420;
    let Json.416 : List U8 = CallByName List.4 Json.418 Json.419;
    let Json.417 : {} = Struct {};
    let Json.122 : List U8 = CallByName Encode.23 Json.416 Json.121 Json.417;
    joinpoint Json.411 Json.123:
        let Json.409 : U64 = 1i64;
        let Json.408 : U64 = CallByName Num.20 Json.119 Json.409;
        let Json.407 : {List U8, U64} = Struct {Json.123, Json.408};
        ret Json.407;
    in
    let Json.415 : U64 = 1i64;
    let Json.412 : Int1 = CallByName Num.24 Json.119 Json.415;
    if Json.412 then
        let Json.414 : I64 = 44i64;
        let Json.413 : U8 = CallByName Num.125 Json.414;
        let Json.410 : List U8 = CallByName List.4 Json.122 Json.413;
        jump Json.411 Json.410;
    else
        jump Json.411 Json.122;

procedure Json.114 (Json.399, Json.400):
    let Json.120 : Str = StructAtIndex 0 Json.400;
    inc Json.120;
    let Json.121 : Str = StructAtIndex 1 Json.400;
    inc Json.121;
    dec Json.400;
    let Json.118 : List U8 = StructAtIndex 0 Json.399;
    inc Json.118;
    let Json.119 : U64 = StructAtIndex 1 Json.399;
    dec Json.399;
    let Json.467 : I64 = 34i64;
    let Json.466 : U8 = CallByName Num.125 Json.467;
    let Json.464 : List U8 = CallByName List.4 Json.118 Json.466;
    let Json.465 : List U8 = CallByName Str.12 Json.120;
    let Json.461 : List U8 = CallByName List.8 Json.464 Json.465;
    let Json.463 : I64 = 34i64;
    let Json.462 : U8 = CallByName Num.125 Json.463;
    let Json.458 : List U8 = CallByName List.4 Json.461 Json.462;
    let Json.460 : I64 = 58i64;
    let Json.459 : U8 = CallByName Num.125 Json.460;
    let Json.456 : List U8 = CallByName List.4 Json.458 Json.459;
    let Json.457 : {} = Struct {};
    let Json.122 : List U8 = CallByName Encode.23 Json.456 Json.121 Json.457;
    joinpoint Json.451 Json.123:
        let Json.449 : U64 = 1i64;
        let Json.448 : U64 = CallByName Num.20 Json.119 Json.449;
        let Json.447 : {List U8, U64} = Struct {Json.123, Json.448};
        ret Json.447;
    in
    let Json.455 : U64 = 1i64;
    let Json.452 : Int1 = CallByName Num.24 Json.119 Json.455;
    if Json.452 then
        let Json.454 : I64 = 44i64;
        let Json.453 : U8 = CallByName Num.125 Json.454;
        let Json.450 : List U8 = CallByName List.4 Json.122 Json.453;
        jump Json.451 Json.450;
    else
        jump Json.451 Json.122;

procedure Json.18 (Json.95):
    let Json.471 : Str = CallByName Encode.22 Json.95;
    ret Json.471;

procedure Json.20 (Json.111):
    let Json.395 : List {Str, Str} = CallByName Encode.22 Json.111;
    ret Json.395;

procedure Json.20 (Json.111):
    let Json.437 : List {Str, Str} = CallByName Encode.22 Json.111;
    ret Json.437;

procedure Json.96 (Json.97, Json.473, Json.95):
    let Json.482 : I64 = 34i64;
    let Json.481 : U8 = CallByName Num.125 Json.482;
    let Json.479 : List U8 = CallByName List.4 Json.97 Json.481;
    let Json.480 : List U8 = CallByName Str.12 Json.95;
    let Json.476 : List U8 = CallByName List.8 Json.479 Json.480;
    let Json.478 : I64 = 34i64;
    let Json.477 : U8 = CallByName Num.125 Json.478;
    let Json.475 : List U8 = CallByName List.4 Json.476 Json.477;
    ret Json.475;

procedure List.137 (List.138, List.139, List.136):
    let List.450 : {List U8, U64} = CallByName Json.114 List.138 List.139;
    ret List.450;

procedure List.137 (List.138, List.139, List.136):
    let List.523 : {List U8, U64} = CallByName Json.114 List.138 List.139;
    ret List.523;

procedure List.18 (List.134, List.135, List.136):
    let List.431 : {List U8, U64} = CallByName List.89 List.134 List.135 List.136;
    ret List.431;

procedure List.18 (List.134, List.135, List.136):
    let List.504 : {List U8, U64} = CallByName List.89 List.134 List.135 List.136;
    ret List.504;

procedure List.4 (List.105, List.106):
    let List.503 : U64 = 1i64;
    let List.502 : List U8 = CallByName List.70 List.105 List.503;
    let List.501 : List U8 = CallByName List.71 List.502 List.106;
    ret List.501;

procedure List.6 (#Attr.2):
    let List.409 : U64 = lowlevel ListLen #Attr.2;
    ret List.409;

procedure List.6 (#Attr.2):
    let List.452 : U64 = lowlevel ListLen #Attr.2;
    ret List.452;

procedure List.6 (#Attr.2):
    let List.526 : U64 = lowlevel ListLen #Attr.2;
    ret List.526;

procedure List.66 (#Attr.2, #Attr.3):
    let List.447 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.447;

procedure List.66 (#Attr.2, #Attr.3):
    let List.520 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.520;

procedure List.70 (#Attr.2, #Attr.3):
    let List.482 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.482;

procedure List.71 (#Attr.2, #Attr.3):
    let List.480 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.480;

procedure List.8 (#Attr.2, #Attr.3):
    let List.525 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.525;

procedure List.89 (List.385, List.386, List.387):
    let List.435 : U64 = 0i64;
    let List.436 : U64 = CallByName List.6 List.385;
    let List.434 : {List U8, U64} = CallByName List.90 List.385 List.386 List.387 List.435 List.436;
    ret List.434;

procedure List.89 (List.385, List.386, List.387):
    let List.508 : U64 = 0i64;
    let List.509 : U64 = CallByName List.6 List.385;
    let List.507 : {List U8, U64} = CallByName List.90 List.385 List.386 List.387 List.508 List.509;
    ret List.507;

procedure List.90 (List.462, List.463, List.464, List.465, List.466):
    joinpoint List.437 List.388 List.389 List.390 List.391 List.392:
        let List.439 : Int1 = CallByName Num.22 List.391 List.392;
        if List.439 then
            let List.446 : {Str, Str} = CallByName List.66 List.388 List.391;
            let List.440 : {List U8, U64} = CallByName List.137 List.389 List.446 List.390;
            let List.443 : U64 = 1i64;
            let List.442 : U64 = CallByName Num.19 List.391 List.443;
            jump List.437 List.388 List.440 List.390 List.442 List.392;
        else
            ret List.389;
    in
    jump List.437 List.462 List.463 List.464 List.465 List.466;

procedure List.90 (List.536, List.537, List.538, List.539, List.540):
    joinpoint List.510 List.388 List.389 List.390 List.391 List.392:
        let List.512 : Int1 = CallByName Num.22 List.391 List.392;
        if List.512 then
            let List.519 : {Str, Str} = CallByName List.66 List.388 List.391;
            let List.513 : {List U8, U64} = CallByName List.137 List.389 List.519 List.390;
            let List.516 : U64 = 1i64;
            let List.515 : U64 = CallByName Num.19 List.391 List.516;
            jump List.510 List.388 List.513 List.390 List.515 List.392;
        else
            ret List.389;
    in
    jump List.510 List.536 List.537 List.538 List.539 List.540;

procedure Num.125 (#Attr.2):
    let Num.282 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.282;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.284;

procedure Str.12 (#Attr.2):
    let Str.282 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.282;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.274 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.274;

procedure Str.9 (Str.76):
    let Str.272 : U64 = 0i64;
    let Str.273 : U64 = CallByName List.6 Str.76;
    let Str.77 : {U64, Str, Int1, U8} = CallByName Str.48 Str.76 Str.272 Str.273;
    let Str.269 : Int1 = StructAtIndex 2 Str.77;
    if Str.269 then
        let Str.271 : Str = StructAtIndex 1 Str.77;
        inc Str.271;
        dec Str.77;
        let Str.270 : [C {U64, U8}, C Str] = TagId(1) Str.271;
        ret Str.270;
    else
        let Str.267 : U8 = StructAtIndex 3 Str.77;
        let Str.268 : U64 = StructAtIndex 0 Str.77;
        dec Str.77;
        let Str.266 : {U64, U8} = Struct {Str.268, Str.267};
        let Str.265 : [C {U64, U8}, C Str] = TagId(0) Str.266;
        ret Str.265;

procedure Test.0 ():
    let Test.12 : Str = "bar";
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.25 Test.12 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
