procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.5 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Json.25 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.14 : Str = CallByName Encode.23 #Derived.6;
    ret #Derived_gen.14;

procedure #Derived.7 (#Derived.8, #Derived.9, #Derived.6):
    let #Derived_gen.21 : Str = "b";
    let #Derived_gen.22 : Str = CallByName Json.23 #Derived.6;
    let #Derived_gen.20 : {Str, Str} = Struct {#Derived_gen.21, #Derived_gen.22};
    let #Derived_gen.19 : List {Str, Str} = Array [#Derived_gen.20];
    let #Derived_gen.18 : List {Str, Str} = CallByName Json.25 #Derived_gen.19;
    let #Derived_gen.17 : List U8 = CallByName Encode.24 #Derived.8 #Derived_gen.18 #Derived.9;
    ret #Derived_gen.17;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.2 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Json.162 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.120 : List U8 = CallByName #Derived.7 Encode.99 Encode.101 Encode.107;
    ret Encode.120;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.130 : List U8 = CallByName Json.162 Encode.99 Encode.101 Encode.107;
    ret Encode.130;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.133 : List U8 = CallByName Json.146 Encode.99 Encode.101 Encode.107;
    ret Encode.133;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : Str = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.878 : {} = Struct {};
    ret Json.878;

procedure Json.146 (Json.147, Json.957, Json.145):
    let Json.966 : I64 = 34i64;
    let Json.965 : U8 = CallByName Num.127 Json.966;
    let Json.963 : List U8 = CallByName List.4 Json.147 Json.965;
    let Json.964 : List U8 = CallByName Str.12 Json.145;
    let Json.960 : List U8 = CallByName List.8 Json.963 Json.964;
    let Json.962 : I64 = 34i64;
    let Json.961 : U8 = CallByName Num.127 Json.962;
    let Json.959 : List U8 = CallByName List.4 Json.960 Json.961;
    ret Json.959;

procedure Json.162 (Json.163, Json.881, Json.161):
    let Json.914 : I64 = 123i64;
    let Json.913 : U8 = CallByName Num.127 Json.914;
    let Json.165 : List U8 = CallByName List.4 Json.163 Json.913;
    let Json.912 : U64 = CallByName List.6 Json.161;
    let Json.889 : {List U8, U64} = Struct {Json.165, Json.912};
    let Json.890 : {} = Struct {};
    let Json.888 : {List U8, U64} = CallByName List.18 Json.161 Json.889 Json.890;
    dec Json.161;
    let Json.167 : List U8 = StructAtIndex 0 Json.888;
    inc Json.167;
    dec Json.888;
    let Json.887 : I64 = 125i64;
    let Json.886 : U8 = CallByName Num.127 Json.887;
    let Json.885 : List U8 = CallByName List.4 Json.167 Json.886;
    ret Json.885;

procedure Json.162 (Json.163, Json.881, Json.161):
    let Json.954 : I64 = 123i64;
    let Json.953 : U8 = CallByName Num.127 Json.954;
    let Json.165 : List U8 = CallByName List.4 Json.163 Json.953;
    let Json.952 : U64 = CallByName List.6 Json.161;
    let Json.929 : {List U8, U64} = Struct {Json.165, Json.952};
    let Json.930 : {} = Struct {};
    let Json.928 : {List U8, U64} = CallByName List.18 Json.161 Json.929 Json.930;
    dec Json.161;
    let Json.167 : List U8 = StructAtIndex 0 Json.928;
    inc Json.167;
    dec Json.928;
    let Json.927 : I64 = 125i64;
    let Json.926 : U8 = CallByName Num.127 Json.927;
    let Json.925 : List U8 = CallByName List.4 Json.167 Json.926;
    ret Json.925;

procedure Json.164 (Json.883, Json.884):
    let Json.170 : Str = StructAtIndex 0 Json.884;
    inc Json.170;
    let Json.171 : Str = StructAtIndex 1 Json.884;
    inc Json.171;
    dec Json.884;
    let Json.168 : List U8 = StructAtIndex 0 Json.883;
    inc Json.168;
    let Json.169 : U64 = StructAtIndex 1 Json.883;
    dec Json.883;
    let Json.911 : I64 = 34i64;
    let Json.910 : U8 = CallByName Num.127 Json.911;
    let Json.908 : List U8 = CallByName List.4 Json.168 Json.910;
    let Json.909 : List U8 = CallByName Str.12 Json.170;
    let Json.905 : List U8 = CallByName List.8 Json.908 Json.909;
    let Json.907 : I64 = 34i64;
    let Json.906 : U8 = CallByName Num.127 Json.907;
    let Json.902 : List U8 = CallByName List.4 Json.905 Json.906;
    let Json.904 : I64 = 58i64;
    let Json.903 : U8 = CallByName Num.127 Json.904;
    let Json.900 : List U8 = CallByName List.4 Json.902 Json.903;
    let Json.901 : {} = Struct {};
    let Json.172 : List U8 = CallByName Encode.24 Json.900 Json.171 Json.901;
    joinpoint Json.895 Json.173:
        let Json.893 : U64 = 1i64;
        let Json.892 : U64 = CallByName Num.20 Json.169 Json.893;
        let Json.891 : {List U8, U64} = Struct {Json.173, Json.892};
        ret Json.891;
    in
    let Json.899 : U64 = 1i64;
    let Json.896 : Int1 = CallByName Num.24 Json.169 Json.899;
    if Json.896 then
        let Json.898 : I64 = 44i64;
        let Json.897 : U8 = CallByName Num.127 Json.898;
        let Json.894 : List U8 = CallByName List.4 Json.172 Json.897;
        jump Json.895 Json.894;
    else
        jump Json.895 Json.172;

procedure Json.164 (Json.883, Json.884):
    let Json.170 : Str = StructAtIndex 0 Json.884;
    inc Json.170;
    let Json.171 : Str = StructAtIndex 1 Json.884;
    inc Json.171;
    dec Json.884;
    let Json.168 : List U8 = StructAtIndex 0 Json.883;
    inc Json.168;
    let Json.169 : U64 = StructAtIndex 1 Json.883;
    dec Json.883;
    let Json.951 : I64 = 34i64;
    let Json.950 : U8 = CallByName Num.127 Json.951;
    let Json.948 : List U8 = CallByName List.4 Json.168 Json.950;
    let Json.949 : List U8 = CallByName Str.12 Json.170;
    let Json.945 : List U8 = CallByName List.8 Json.948 Json.949;
    let Json.947 : I64 = 34i64;
    let Json.946 : U8 = CallByName Num.127 Json.947;
    let Json.942 : List U8 = CallByName List.4 Json.945 Json.946;
    let Json.944 : I64 = 58i64;
    let Json.943 : U8 = CallByName Num.127 Json.944;
    let Json.940 : List U8 = CallByName List.4 Json.942 Json.943;
    let Json.941 : {} = Struct {};
    let Json.172 : List U8 = CallByName Encode.24 Json.940 Json.171 Json.941;
    joinpoint Json.935 Json.173:
        let Json.933 : U64 = 1i64;
        let Json.932 : U64 = CallByName Num.20 Json.169 Json.933;
        let Json.931 : {List U8, U64} = Struct {Json.173, Json.932};
        ret Json.931;
    in
    let Json.939 : U64 = 1i64;
    let Json.936 : Int1 = CallByName Num.24 Json.169 Json.939;
    if Json.936 then
        let Json.938 : I64 = 44i64;
        let Json.937 : U8 = CallByName Num.127 Json.938;
        let Json.934 : List U8 = CallByName List.4 Json.172 Json.937;
        jump Json.935 Json.934;
    else
        jump Json.935 Json.172;

procedure Json.23 (Json.145):
    let Json.955 : Str = CallByName Encode.23 Json.145;
    ret Json.955;

procedure Json.25 (Json.161):
    let Json.879 : List {Str, Str} = CallByName Encode.23 Json.161;
    ret Json.879;

procedure Json.25 (Json.161):
    let Json.921 : List {Str, Str} = CallByName Encode.23 Json.161;
    ret Json.921;

procedure List.139 (List.140, List.141, List.138):
    let List.535 : {List U8, U64} = CallByName Json.164 List.140 List.141;
    ret List.535;

procedure List.139 (List.140, List.141, List.138):
    let List.608 : {List U8, U64} = CallByName Json.164 List.140 List.141;
    ret List.608;

procedure List.18 (List.136, List.137, List.138):
    let List.516 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.516;

procedure List.18 (List.136, List.137, List.138):
    let List.589 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.589;

procedure List.4 (List.107, List.108):
    let List.588 : U64 = 1i64;
    let List.587 : List U8 = CallByName List.70 List.107 List.588;
    let List.586 : List U8 = CallByName List.71 List.587 List.108;
    ret List.586;

procedure List.6 (#Attr.2):
    let List.494 : U64 = lowlevel ListLen #Attr.2;
    ret List.494;

procedure List.6 (#Attr.2):
    let List.537 : U64 = lowlevel ListLen #Attr.2;
    ret List.537;

procedure List.6 (#Attr.2):
    let List.611 : U64 = lowlevel ListLen #Attr.2;
    ret List.611;

procedure List.66 (#Attr.2, #Attr.3):
    let List.532 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.532;

procedure List.66 (#Attr.2, #Attr.3):
    let List.605 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.605;

procedure List.70 (#Attr.2, #Attr.3):
    let List.567 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.567;

procedure List.71 (#Attr.2, #Attr.3):
    let List.565 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.565;

procedure List.8 (#Attr.2, #Attr.3):
    let List.610 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.610;

procedure List.80 (List.547, List.548, List.549, List.550, List.551):
    joinpoint List.522 List.433 List.434 List.435 List.436 List.437:
        let List.524 : Int1 = CallByName Num.22 List.436 List.437;
        if List.524 then
            let List.531 : {Str, Str} = CallByName List.66 List.433 List.436;
            let List.525 : {List U8, U64} = CallByName List.139 List.434 List.531 List.435;
            let List.528 : U64 = 1i64;
            let List.527 : U64 = CallByName Num.19 List.436 List.528;
            jump List.522 List.433 List.525 List.435 List.527 List.437;
        else
            ret List.434;
    in
    jump List.522 List.547 List.548 List.549 List.550 List.551;

procedure List.80 (List.621, List.622, List.623, List.624, List.625):
    joinpoint List.595 List.433 List.434 List.435 List.436 List.437:
        let List.597 : Int1 = CallByName Num.22 List.436 List.437;
        if List.597 then
            let List.604 : {Str, Str} = CallByName List.66 List.433 List.436;
            let List.598 : {List U8, U64} = CallByName List.139 List.434 List.604 List.435;
            let List.601 : U64 = 1i64;
            let List.600 : U64 = CallByName Num.19 List.436 List.601;
            jump List.595 List.433 List.598 List.435 List.600 List.437;
        else
            ret List.434;
    in
    jump List.595 List.621 List.622 List.623 List.624 List.625;

procedure List.92 (List.430, List.431, List.432):
    let List.520 : U64 = 0i64;
    let List.521 : U64 = CallByName List.6 List.430;
    let List.519 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.520 List.521;
    ret List.519;

procedure List.92 (List.430, List.431, List.432):
    let List.593 : U64 = 0i64;
    let List.594 : U64 = CallByName List.6 List.430;
    let List.592 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.593 List.594;
    ret List.592;

procedure Num.127 (#Attr.2):
    let Num.301 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.301;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.304 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.304;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.302 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.302;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.305 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.305;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.303 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.303;

procedure Str.12 (#Attr.2):
    let Str.283 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.283;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.275 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.275;

procedure Str.9 (Str.77):
    let Str.273 : U64 = 0i64;
    let Str.274 : U64 = CallByName List.6 Str.77;
    let Str.78 : {U64, Str, Int1, U8} = CallByName Str.48 Str.77 Str.273 Str.274;
    let Str.270 : Int1 = StructAtIndex 2 Str.78;
    if Str.270 then
        let Str.272 : Str = StructAtIndex 1 Str.78;
        inc Str.272;
        dec Str.78;
        let Str.271 : [C {U64, U8}, C Str] = TagId(1) Str.272;
        ret Str.271;
    else
        let Str.268 : U8 = StructAtIndex 3 Str.78;
        let Str.269 : U64 = StructAtIndex 0 Str.78;
        dec Str.78;
        let Str.267 : {U64, U8} = Struct {Str.269, Str.268};
        let Str.266 : [C {U64, U8}, C Str] = TagId(0) Str.267;
        ret Str.266;

procedure Test.0 ():
    let Test.12 : Str = "bar";
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.26 Test.12 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
