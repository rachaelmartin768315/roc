procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.5 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Json.20 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.14 : Str = CallByName Encode.23 #Derived.6;
    ret #Derived_gen.14;

procedure #Derived.7 (#Derived.8, #Derived.9, #Derived.6):
    let #Derived_gen.21 : Str = "b";
    let #Derived_gen.22 : Str = CallByName Json.18 #Derived.6;
    let #Derived_gen.20 : {Str, Str} = Struct {#Derived_gen.21, #Derived_gen.22};
    let #Derived_gen.19 : List {Str, Str} = Array [#Derived_gen.20];
    let #Derived_gen.18 : List {Str, Str} = CallByName Json.20 #Derived_gen.19;
    let #Derived_gen.17 : List U8 = CallByName Encode.24 #Derived.8 #Derived_gen.18 #Derived.9;
    ret #Derived_gen.17;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.2 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Json.118 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.120 : List U8 = CallByName #Derived.7 Encode.99 Encode.101 Encode.107;
    ret Encode.120;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.130 : List U8 = CallByName Json.118 Encode.99 Encode.101 Encode.107;
    ret Encode.130;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.133 : List U8 = CallByName Json.102 Encode.99 Encode.101 Encode.107;
    ret Encode.133;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : Str = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.483 : {} = Struct {};
    ret Json.483;

procedure Json.102 (Json.103, Json.562, Json.101):
    let Json.571 : I64 = 34i64;
    let Json.570 : U8 = CallByName Num.127 Json.571;
    let Json.568 : List U8 = CallByName List.4 Json.103 Json.570;
    let Json.569 : List U8 = CallByName Str.12 Json.101;
    let Json.565 : List U8 = CallByName List.8 Json.568 Json.569;
    let Json.567 : I64 = 34i64;
    let Json.566 : U8 = CallByName Num.127 Json.567;
    let Json.564 : List U8 = CallByName List.4 Json.565 Json.566;
    ret Json.564;

procedure Json.118 (Json.119, Json.486, Json.117):
    let Json.519 : I64 = 123i64;
    let Json.518 : U8 = CallByName Num.127 Json.519;
    let Json.121 : List U8 = CallByName List.4 Json.119 Json.518;
    let Json.517 : U64 = CallByName List.6 Json.117;
    let Json.494 : {List U8, U64} = Struct {Json.121, Json.517};
    let Json.495 : {} = Struct {};
    let Json.493 : {List U8, U64} = CallByName List.18 Json.117 Json.494 Json.495;
    dec Json.117;
    let Json.123 : List U8 = StructAtIndex 0 Json.493;
    inc Json.123;
    dec Json.493;
    let Json.492 : I64 = 125i64;
    let Json.491 : U8 = CallByName Num.127 Json.492;
    let Json.490 : List U8 = CallByName List.4 Json.123 Json.491;
    ret Json.490;

procedure Json.118 (Json.119, Json.486, Json.117):
    let Json.559 : I64 = 123i64;
    let Json.558 : U8 = CallByName Num.127 Json.559;
    let Json.121 : List U8 = CallByName List.4 Json.119 Json.558;
    let Json.557 : U64 = CallByName List.6 Json.117;
    let Json.534 : {List U8, U64} = Struct {Json.121, Json.557};
    let Json.535 : {} = Struct {};
    let Json.533 : {List U8, U64} = CallByName List.18 Json.117 Json.534 Json.535;
    dec Json.117;
    let Json.123 : List U8 = StructAtIndex 0 Json.533;
    inc Json.123;
    dec Json.533;
    let Json.532 : I64 = 125i64;
    let Json.531 : U8 = CallByName Num.127 Json.532;
    let Json.530 : List U8 = CallByName List.4 Json.123 Json.531;
    ret Json.530;

procedure Json.120 (Json.488, Json.489):
    let Json.126 : Str = StructAtIndex 0 Json.489;
    inc Json.126;
    let Json.127 : Str = StructAtIndex 1 Json.489;
    inc Json.127;
    dec Json.489;
    let Json.124 : List U8 = StructAtIndex 0 Json.488;
    inc Json.124;
    let Json.125 : U64 = StructAtIndex 1 Json.488;
    dec Json.488;
    let Json.516 : I64 = 34i64;
    let Json.515 : U8 = CallByName Num.127 Json.516;
    let Json.513 : List U8 = CallByName List.4 Json.124 Json.515;
    let Json.514 : List U8 = CallByName Str.12 Json.126;
    let Json.510 : List U8 = CallByName List.8 Json.513 Json.514;
    let Json.512 : I64 = 34i64;
    let Json.511 : U8 = CallByName Num.127 Json.512;
    let Json.507 : List U8 = CallByName List.4 Json.510 Json.511;
    let Json.509 : I64 = 58i64;
    let Json.508 : U8 = CallByName Num.127 Json.509;
    let Json.505 : List U8 = CallByName List.4 Json.507 Json.508;
    let Json.506 : {} = Struct {};
    let Json.128 : List U8 = CallByName Encode.24 Json.505 Json.127 Json.506;
    joinpoint Json.500 Json.129:
        let Json.498 : U64 = 1i64;
        let Json.497 : U64 = CallByName Num.20 Json.125 Json.498;
        let Json.496 : {List U8, U64} = Struct {Json.129, Json.497};
        ret Json.496;
    in
    let Json.504 : U64 = 1i64;
    let Json.501 : Int1 = CallByName Num.24 Json.125 Json.504;
    if Json.501 then
        let Json.503 : I64 = 44i64;
        let Json.502 : U8 = CallByName Num.127 Json.503;
        let Json.499 : List U8 = CallByName List.4 Json.128 Json.502;
        jump Json.500 Json.499;
    else
        jump Json.500 Json.128;

procedure Json.120 (Json.488, Json.489):
    let Json.126 : Str = StructAtIndex 0 Json.489;
    inc Json.126;
    let Json.127 : Str = StructAtIndex 1 Json.489;
    inc Json.127;
    dec Json.489;
    let Json.124 : List U8 = StructAtIndex 0 Json.488;
    inc Json.124;
    let Json.125 : U64 = StructAtIndex 1 Json.488;
    dec Json.488;
    let Json.556 : I64 = 34i64;
    let Json.555 : U8 = CallByName Num.127 Json.556;
    let Json.553 : List U8 = CallByName List.4 Json.124 Json.555;
    let Json.554 : List U8 = CallByName Str.12 Json.126;
    let Json.550 : List U8 = CallByName List.8 Json.553 Json.554;
    let Json.552 : I64 = 34i64;
    let Json.551 : U8 = CallByName Num.127 Json.552;
    let Json.547 : List U8 = CallByName List.4 Json.550 Json.551;
    let Json.549 : I64 = 58i64;
    let Json.548 : U8 = CallByName Num.127 Json.549;
    let Json.545 : List U8 = CallByName List.4 Json.547 Json.548;
    let Json.546 : {} = Struct {};
    let Json.128 : List U8 = CallByName Encode.24 Json.545 Json.127 Json.546;
    joinpoint Json.540 Json.129:
        let Json.538 : U64 = 1i64;
        let Json.537 : U64 = CallByName Num.20 Json.125 Json.538;
        let Json.536 : {List U8, U64} = Struct {Json.129, Json.537};
        ret Json.536;
    in
    let Json.544 : U64 = 1i64;
    let Json.541 : Int1 = CallByName Num.24 Json.125 Json.544;
    if Json.541 then
        let Json.543 : I64 = 44i64;
        let Json.542 : U8 = CallByName Num.127 Json.543;
        let Json.539 : List U8 = CallByName List.4 Json.128 Json.542;
        jump Json.540 Json.539;
    else
        jump Json.540 Json.128;

procedure Json.18 (Json.101):
    let Json.560 : Str = CallByName Encode.23 Json.101;
    ret Json.560;

procedure Json.20 (Json.117):
    let Json.484 : List {Str, Str} = CallByName Encode.23 Json.117;
    ret Json.484;

procedure Json.20 (Json.117):
    let Json.526 : List {Str, Str} = CallByName Encode.23 Json.117;
    ret Json.526;

procedure List.139 (List.140, List.141, List.138):
    let List.535 : {List U8, U64} = CallByName Json.120 List.140 List.141;
    ret List.535;

procedure List.139 (List.140, List.141, List.138):
    let List.608 : {List U8, U64} = CallByName Json.120 List.140 List.141;
    ret List.608;

procedure List.18 (List.136, List.137, List.138):
    let List.516 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.516;

procedure List.18 (List.136, List.137, List.138):
    let List.589 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.589;

procedure List.4 (List.107, List.108):
    let List.588 : U64 = 1i64;
    let List.587 : List U8 = CallByName List.70 List.107 List.588;
    let List.586 : List U8 = CallByName List.71 List.587 List.108;
    ret List.586;

procedure List.6 (#Attr.2):
    let List.494 : U64 = lowlevel ListLen #Attr.2;
    ret List.494;

procedure List.6 (#Attr.2):
    let List.537 : U64 = lowlevel ListLen #Attr.2;
    ret List.537;

procedure List.6 (#Attr.2):
    let List.611 : U64 = lowlevel ListLen #Attr.2;
    ret List.611;

procedure List.66 (#Attr.2, #Attr.3):
    let List.532 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.532;

procedure List.66 (#Attr.2, #Attr.3):
    let List.605 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.605;

procedure List.70 (#Attr.2, #Attr.3):
    let List.567 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.567;

procedure List.71 (#Attr.2, #Attr.3):
    let List.565 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.565;

procedure List.8 (#Attr.2, #Attr.3):
    let List.610 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.610;

procedure List.80 (List.547, List.548, List.549, List.550, List.551):
    joinpoint List.522 List.433 List.434 List.435 List.436 List.437:
        let List.524 : Int1 = CallByName Num.22 List.436 List.437;
        if List.524 then
            let List.531 : {Str, Str} = CallByName List.66 List.433 List.436;
            let List.525 : {List U8, U64} = CallByName List.139 List.434 List.531 List.435;
            let List.528 : U64 = 1i64;
            let List.527 : U64 = CallByName Num.19 List.436 List.528;
            jump List.522 List.433 List.525 List.435 List.527 List.437;
        else
            ret List.434;
    in
    jump List.522 List.547 List.548 List.549 List.550 List.551;

procedure List.80 (List.621, List.622, List.623, List.624, List.625):
    joinpoint List.595 List.433 List.434 List.435 List.436 List.437:
        let List.597 : Int1 = CallByName Num.22 List.436 List.437;
        if List.597 then
            let List.604 : {Str, Str} = CallByName List.66 List.433 List.436;
            let List.598 : {List U8, U64} = CallByName List.139 List.434 List.604 List.435;
            let List.601 : U64 = 1i64;
            let List.600 : U64 = CallByName Num.19 List.436 List.601;
            jump List.595 List.433 List.598 List.435 List.600 List.437;
        else
            ret List.434;
    in
    jump List.595 List.621 List.622 List.623 List.624 List.625;

procedure List.92 (List.430, List.431, List.432):
    let List.520 : U64 = 0i64;
    let List.521 : U64 = CallByName List.6 List.430;
    let List.519 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.520 List.521;
    ret List.519;

procedure List.92 (List.430, List.431, List.432):
    let List.593 : U64 = 0i64;
    let List.594 : U64 = CallByName List.6 List.430;
    let List.592 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.593 List.594;
    ret List.592;

procedure Num.127 (#Attr.2):
    let Num.301 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.301;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.304 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.304;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.302 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.302;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.305 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.305;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.303 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.303;

procedure Str.12 (#Attr.2):
    let Str.283 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.283;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.275 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.275;

procedure Str.9 (Str.77):
    let Str.273 : U64 = 0i64;
    let Str.274 : U64 = CallByName List.6 Str.77;
    let Str.78 : {U64, Str, Int1, U8} = CallByName Str.48 Str.77 Str.273 Str.274;
    let Str.270 : Int1 = StructAtIndex 2 Str.78;
    if Str.270 then
        let Str.272 : Str = StructAtIndex 1 Str.78;
        inc Str.272;
        dec Str.78;
        let Str.271 : [C {U64, U8}, C Str] = TagId(1) Str.272;
        ret Str.271;
    else
        let Str.268 : U8 = StructAtIndex 3 Str.78;
        let Str.269 : U64 = StructAtIndex 0 Str.78;
        dec Str.78;
        let Str.267 : {U64, U8} = Struct {Str.269, Str.268};
        let Str.266 : [C {U64, U8}, C Str] = TagId(0) Str.267;
        ret Str.266;

procedure Test.0 ():
    let Test.12 : Str = "bar";
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.26 Test.12 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
