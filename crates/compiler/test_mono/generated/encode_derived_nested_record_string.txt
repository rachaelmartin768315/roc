procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.5 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Json.24 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.14 : Str = CallByName Encode.23 #Derived.6;
    ret #Derived_gen.14;

procedure #Derived.7 (#Derived.8, #Derived.9, #Derived.6):
    let #Derived_gen.21 : Str = "b";
    let #Derived_gen.22 : Str = CallByName Json.22 #Derived.6;
    let #Derived_gen.20 : {Str, Str} = Struct {#Derived_gen.21, #Derived_gen.22};
    let #Derived_gen.19 : List {Str, Str} = Array [#Derived_gen.20];
    let #Derived_gen.18 : List {Str, Str} = CallByName Json.24 #Derived_gen.19;
    let #Derived_gen.17 : List U8 = CallByName Encode.24 #Derived.8 #Derived_gen.18 #Derived.9;
    ret #Derived_gen.17;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.2 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Json.155 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.120 : List U8 = CallByName #Derived.7 Encode.99 Encode.101 Encode.107;
    ret Encode.120;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.130 : List U8 = CallByName Json.155 Encode.99 Encode.101 Encode.107;
    ret Encode.130;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.133 : List U8 = CallByName Json.139 Encode.99 Encode.101 Encode.107;
    ret Encode.133;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : Str = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.816 : {} = Struct {};
    ret Json.816;

procedure Json.139 (Json.140, Json.895, Json.138):
    let Json.904 : I64 = 34i64;
    let Json.903 : U8 = CallByName Num.127 Json.904;
    let Json.901 : List U8 = CallByName List.4 Json.140 Json.903;
    let Json.902 : List U8 = CallByName Str.12 Json.138;
    let Json.898 : List U8 = CallByName List.8 Json.901 Json.902;
    let Json.900 : I64 = 34i64;
    let Json.899 : U8 = CallByName Num.127 Json.900;
    let Json.897 : List U8 = CallByName List.4 Json.898 Json.899;
    ret Json.897;

procedure Json.155 (Json.156, Json.819, Json.154):
    let Json.852 : I64 = 123i64;
    let Json.851 : U8 = CallByName Num.127 Json.852;
    let Json.158 : List U8 = CallByName List.4 Json.156 Json.851;
    let Json.850 : U64 = CallByName List.6 Json.154;
    let Json.827 : {List U8, U64} = Struct {Json.158, Json.850};
    let Json.828 : {} = Struct {};
    let Json.826 : {List U8, U64} = CallByName List.18 Json.154 Json.827 Json.828;
    dec Json.154;
    let Json.160 : List U8 = StructAtIndex 0 Json.826;
    inc Json.160;
    dec Json.826;
    let Json.825 : I64 = 125i64;
    let Json.824 : U8 = CallByName Num.127 Json.825;
    let Json.823 : List U8 = CallByName List.4 Json.160 Json.824;
    ret Json.823;

procedure Json.155 (Json.156, Json.819, Json.154):
    let Json.892 : I64 = 123i64;
    let Json.891 : U8 = CallByName Num.127 Json.892;
    let Json.158 : List U8 = CallByName List.4 Json.156 Json.891;
    let Json.890 : U64 = CallByName List.6 Json.154;
    let Json.867 : {List U8, U64} = Struct {Json.158, Json.890};
    let Json.868 : {} = Struct {};
    let Json.866 : {List U8, U64} = CallByName List.18 Json.154 Json.867 Json.868;
    dec Json.154;
    let Json.160 : List U8 = StructAtIndex 0 Json.866;
    inc Json.160;
    dec Json.866;
    let Json.865 : I64 = 125i64;
    let Json.864 : U8 = CallByName Num.127 Json.865;
    let Json.863 : List U8 = CallByName List.4 Json.160 Json.864;
    ret Json.863;

procedure Json.157 (Json.821, Json.822):
    let Json.163 : Str = StructAtIndex 0 Json.822;
    inc Json.163;
    let Json.164 : Str = StructAtIndex 1 Json.822;
    inc Json.164;
    dec Json.822;
    let Json.161 : List U8 = StructAtIndex 0 Json.821;
    inc Json.161;
    let Json.162 : U64 = StructAtIndex 1 Json.821;
    dec Json.821;
    let Json.849 : I64 = 34i64;
    let Json.848 : U8 = CallByName Num.127 Json.849;
    let Json.846 : List U8 = CallByName List.4 Json.161 Json.848;
    let Json.847 : List U8 = CallByName Str.12 Json.163;
    let Json.843 : List U8 = CallByName List.8 Json.846 Json.847;
    let Json.845 : I64 = 34i64;
    let Json.844 : U8 = CallByName Num.127 Json.845;
    let Json.840 : List U8 = CallByName List.4 Json.843 Json.844;
    let Json.842 : I64 = 58i64;
    let Json.841 : U8 = CallByName Num.127 Json.842;
    let Json.838 : List U8 = CallByName List.4 Json.840 Json.841;
    let Json.839 : {} = Struct {};
    let Json.165 : List U8 = CallByName Encode.24 Json.838 Json.164 Json.839;
    joinpoint Json.833 Json.166:
        let Json.831 : U64 = 1i64;
        let Json.830 : U64 = CallByName Num.20 Json.162 Json.831;
        let Json.829 : {List U8, U64} = Struct {Json.166, Json.830};
        ret Json.829;
    in
    let Json.837 : U64 = 1i64;
    let Json.834 : Int1 = CallByName Num.24 Json.162 Json.837;
    if Json.834 then
        let Json.836 : I64 = 44i64;
        let Json.835 : U8 = CallByName Num.127 Json.836;
        let Json.832 : List U8 = CallByName List.4 Json.165 Json.835;
        jump Json.833 Json.832;
    else
        jump Json.833 Json.165;

procedure Json.157 (Json.821, Json.822):
    let Json.163 : Str = StructAtIndex 0 Json.822;
    inc Json.163;
    let Json.164 : Str = StructAtIndex 1 Json.822;
    inc Json.164;
    dec Json.822;
    let Json.161 : List U8 = StructAtIndex 0 Json.821;
    inc Json.161;
    let Json.162 : U64 = StructAtIndex 1 Json.821;
    dec Json.821;
    let Json.889 : I64 = 34i64;
    let Json.888 : U8 = CallByName Num.127 Json.889;
    let Json.886 : List U8 = CallByName List.4 Json.161 Json.888;
    let Json.887 : List U8 = CallByName Str.12 Json.163;
    let Json.883 : List U8 = CallByName List.8 Json.886 Json.887;
    let Json.885 : I64 = 34i64;
    let Json.884 : U8 = CallByName Num.127 Json.885;
    let Json.880 : List U8 = CallByName List.4 Json.883 Json.884;
    let Json.882 : I64 = 58i64;
    let Json.881 : U8 = CallByName Num.127 Json.882;
    let Json.878 : List U8 = CallByName List.4 Json.880 Json.881;
    let Json.879 : {} = Struct {};
    let Json.165 : List U8 = CallByName Encode.24 Json.878 Json.164 Json.879;
    joinpoint Json.873 Json.166:
        let Json.871 : U64 = 1i64;
        let Json.870 : U64 = CallByName Num.20 Json.162 Json.871;
        let Json.869 : {List U8, U64} = Struct {Json.166, Json.870};
        ret Json.869;
    in
    let Json.877 : U64 = 1i64;
    let Json.874 : Int1 = CallByName Num.24 Json.162 Json.877;
    if Json.874 then
        let Json.876 : I64 = 44i64;
        let Json.875 : U8 = CallByName Num.127 Json.876;
        let Json.872 : List U8 = CallByName List.4 Json.165 Json.875;
        jump Json.873 Json.872;
    else
        jump Json.873 Json.165;

procedure Json.22 (Json.138):
    let Json.893 : Str = CallByName Encode.23 Json.138;
    ret Json.893;

procedure Json.24 (Json.154):
    let Json.817 : List {Str, Str} = CallByName Encode.23 Json.154;
    ret Json.817;

procedure Json.24 (Json.154):
    let Json.859 : List {Str, Str} = CallByName Encode.23 Json.154;
    ret Json.859;

procedure List.139 (List.140, List.141, List.138):
    let List.535 : {List U8, U64} = CallByName Json.157 List.140 List.141;
    ret List.535;

procedure List.139 (List.140, List.141, List.138):
    let List.608 : {List U8, U64} = CallByName Json.157 List.140 List.141;
    ret List.608;

procedure List.18 (List.136, List.137, List.138):
    let List.516 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.516;

procedure List.18 (List.136, List.137, List.138):
    let List.589 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.589;

procedure List.4 (List.107, List.108):
    let List.588 : U64 = 1i64;
    let List.587 : List U8 = CallByName List.70 List.107 List.588;
    let List.586 : List U8 = CallByName List.71 List.587 List.108;
    ret List.586;

procedure List.6 (#Attr.2):
    let List.494 : U64 = lowlevel ListLen #Attr.2;
    ret List.494;

procedure List.6 (#Attr.2):
    let List.537 : U64 = lowlevel ListLen #Attr.2;
    ret List.537;

procedure List.6 (#Attr.2):
    let List.611 : U64 = lowlevel ListLen #Attr.2;
    ret List.611;

procedure List.66 (#Attr.2, #Attr.3):
    let List.532 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.532;

procedure List.66 (#Attr.2, #Attr.3):
    let List.605 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.605;

procedure List.70 (#Attr.2, #Attr.3):
    let List.567 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.567;

procedure List.71 (#Attr.2, #Attr.3):
    let List.565 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.565;

procedure List.8 (#Attr.2, #Attr.3):
    let List.610 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.610;

procedure List.80 (List.547, List.548, List.549, List.550, List.551):
    joinpoint List.522 List.433 List.434 List.435 List.436 List.437:
        let List.524 : Int1 = CallByName Num.22 List.436 List.437;
        if List.524 then
            let List.531 : {Str, Str} = CallByName List.66 List.433 List.436;
            let List.525 : {List U8, U64} = CallByName List.139 List.434 List.531 List.435;
            let List.528 : U64 = 1i64;
            let List.527 : U64 = CallByName Num.19 List.436 List.528;
            jump List.522 List.433 List.525 List.435 List.527 List.437;
        else
            ret List.434;
    in
    jump List.522 List.547 List.548 List.549 List.550 List.551;

procedure List.80 (List.621, List.622, List.623, List.624, List.625):
    joinpoint List.595 List.433 List.434 List.435 List.436 List.437:
        let List.597 : Int1 = CallByName Num.22 List.436 List.437;
        if List.597 then
            let List.604 : {Str, Str} = CallByName List.66 List.433 List.436;
            let List.598 : {List U8, U64} = CallByName List.139 List.434 List.604 List.435;
            let List.601 : U64 = 1i64;
            let List.600 : U64 = CallByName Num.19 List.436 List.601;
            jump List.595 List.433 List.598 List.435 List.600 List.437;
        else
            ret List.434;
    in
    jump List.595 List.621 List.622 List.623 List.624 List.625;

procedure List.92 (List.430, List.431, List.432):
    let List.520 : U64 = 0i64;
    let List.521 : U64 = CallByName List.6 List.430;
    let List.519 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.520 List.521;
    ret List.519;

procedure List.92 (List.430, List.431, List.432):
    let List.593 : U64 = 0i64;
    let List.594 : U64 = CallByName List.6 List.430;
    let List.592 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.593 List.594;
    ret List.592;

procedure Num.127 (#Attr.2):
    let Num.301 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.301;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.304 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.304;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.302 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.302;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.305 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.305;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.303 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.303;

procedure Str.12 (#Attr.2):
    let Str.283 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.283;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.275 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.275;

procedure Str.9 (Str.77):
    let Str.273 : U64 = 0i64;
    let Str.274 : U64 = CallByName List.6 Str.77;
    let Str.78 : {U64, Str, Int1, U8} = CallByName Str.48 Str.77 Str.273 Str.274;
    let Str.270 : Int1 = StructAtIndex 2 Str.78;
    if Str.270 then
        let Str.272 : Str = StructAtIndex 1 Str.78;
        inc Str.272;
        dec Str.78;
        let Str.271 : [C {U64, U8}, C Str] = TagId(1) Str.272;
        ret Str.271;
    else
        let Str.268 : U8 = StructAtIndex 3 Str.78;
        let Str.269 : U64 = StructAtIndex 0 Str.78;
        dec Str.78;
        let Str.267 : {U64, U8} = Struct {Str.269, Str.268};
        let Str.266 : [C {U64, U8}, C Str] = TagId(0) Str.267;
        ret Str.266;

procedure Test.0 ():
    let Test.12 : Str = "bar";
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.26 Test.12 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
