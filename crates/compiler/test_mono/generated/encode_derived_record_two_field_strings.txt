procedure #Derived.0 (#Derived.1):
    let #Derived_gen.1 : {{Str, Str}} = Struct {#Derived.1};
    let #Derived_gen.0 : {{Str, Str}} = CallByName Encode.22 #Derived_gen.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Attr.12):
    let #Derived.1 : {Str, Str} = StructAtIndex 0 #Attr.12;
    inc #Derived.1;
    dec #Attr.12;
    let #Derived_gen.11 : Str = "a";
    let #Derived_gen.13 : Str = StructAtIndex 0 #Derived.1;
    inc #Derived_gen.13;
    let #Derived_gen.12 : {Str} = CallByName Json.17 #Derived_gen.13;
    let #Derived_gen.6 : {Str, {Str}} = Struct {#Derived_gen.11, #Derived_gen.12};
    let #Derived_gen.8 : Str = "b";
    let #Derived_gen.10 : Str = StructAtIndex 1 #Derived.1;
    inc #Derived_gen.10;
    dec #Derived.1;
    let #Derived_gen.9 : {Str} = CallByName Json.17 #Derived_gen.10;
    let #Derived_gen.7 : {Str, {Str}} = Struct {#Derived_gen.8, #Derived_gen.9};
    let #Derived_gen.5 : List {Str, {Str}} = Array [#Derived_gen.6, #Derived_gen.7];
    let #Derived_gen.4 : {List {Str, {Str}}} = CallByName Json.19 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.2 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.81 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.117 : List U8 = CallByName Json.65 Encode.94 Encode.96 Encode.102;
    ret Encode.117;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : {{Str, Str}} = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.106 : {} = Struct {};
    ret Json.106;

procedure Json.17 (Json.64):
    let Json.114 : {Str} = Struct {Json.64};
    let Json.113 : {Str} = CallByName Encode.22 Json.114;
    ret Json.113;

procedure Json.19 (Json.80):
    let Json.108 : {List {Str, {Str}}} = Struct {Json.80};
    let Json.107 : {List {Str, {Str}}} = CallByName Encode.22 Json.108;
    ret Json.107;

procedure Json.65 (Json.66, Json.112, #Attr.12):
    let Json.64 : Str = StructAtIndex 0 #Attr.12;
    inc Json.64;
    dec #Attr.12;
    let Json.157 : I32 = 34i64;
    let Json.156 : U8 = CallByName Num.123 Json.157;
    let Json.154 : List U8 = CallByName List.4 Json.66 Json.156;
    let Json.155 : List U8 = CallByName Str.12 Json.64;
    let Json.151 : List U8 = CallByName List.8 Json.154 Json.155;
    let Json.153 : I32 = 34i64;
    let Json.152 : U8 = CallByName Num.123 Json.153;
    let Json.150 : List U8 = CallByName List.4 Json.151 Json.152;
    ret Json.150;

procedure Json.81 (Json.82, Json.109, #Attr.12):
    let Json.80 : List {Str, {Str}} = StructAtIndex 0 #Attr.12;
    inc Json.80;
    dec #Attr.12;
    let Json.148 : I32 = 123i64;
    let Json.147 : U8 = CallByName Num.123 Json.148;
    let Json.84 : List U8 = CallByName List.4 Json.82 Json.147;
    let Json.146 : U64 = CallByName List.6 Json.80;
    let Json.123 : {List U8, U64} = Struct {Json.84, Json.146};
    let Json.124 : {} = Struct {};
    let Json.122 : {List U8, U64} = CallByName List.18 Json.80 Json.123 Json.124;
    dec Json.80;
    let Json.86 : List U8 = StructAtIndex 0 Json.122;
    inc Json.86;
    dec Json.122;
    let Json.121 : I32 = 125i64;
    let Json.120 : U8 = CallByName Num.123 Json.121;
    let Json.119 : List U8 = CallByName List.4 Json.86 Json.120;
    ret Json.119;

procedure Json.83 (Json.117, Json.118):
    let Json.89 : Str = StructAtIndex 0 Json.118;
    inc Json.89;
    let Json.90 : {Str} = StructAtIndex 1 Json.118;
    inc Json.90;
    dec Json.118;
    let Json.87 : List U8 = StructAtIndex 0 Json.117;
    inc Json.87;
    let Json.88 : U64 = StructAtIndex 1 Json.117;
    dec Json.117;
    let Json.145 : I32 = 34i64;
    let Json.144 : U8 = CallByName Num.123 Json.145;
    let Json.142 : List U8 = CallByName List.4 Json.87 Json.144;
    let Json.143 : List U8 = CallByName Str.12 Json.89;
    let Json.139 : List U8 = CallByName List.8 Json.142 Json.143;
    let Json.141 : I32 = 34i64;
    let Json.140 : U8 = CallByName Num.123 Json.141;
    let Json.136 : List U8 = CallByName List.4 Json.139 Json.140;
    let Json.138 : I32 = 58i64;
    let Json.137 : U8 = CallByName Num.123 Json.138;
    let Json.134 : List U8 = CallByName List.4 Json.136 Json.137;
    let Json.135 : {} = Struct {};
    let Json.91 : List U8 = CallByName Encode.23 Json.134 Json.90 Json.135;
    joinpoint Json.129 Json.92:
        let Json.127 : U64 = 1i64;
        let Json.126 : U64 = CallByName Num.20 Json.88 Json.127;
        let Json.125 : {List U8, U64} = Struct {Json.92, Json.126};
        ret Json.125;
    in
    let Json.133 : U64 = 1i64;
    let Json.130 : Int1 = CallByName Num.24 Json.88 Json.133;
    if Json.130 then
        let Json.132 : I32 = 44i64;
        let Json.131 : U8 = CallByName Num.123 Json.132;
        let Json.128 : List U8 = CallByName List.4 Json.91 Json.131;
        jump Json.129 Json.128;
    else
        jump Json.129 Json.91;

procedure List.125 (List.126, List.127, #Attr.12):
    let List.124 : {} = StructAtIndex 0 #Attr.12;
    let List.373 : {List U8, U64} = CallByName Json.83 List.126 List.127;
    let List.372 : [C [], C {List U8, U64}] = TagId(1) List.373;
    ret List.372;

procedure List.18 (List.122, List.123, List.124):
    let List.349 : {{}} = Struct {List.124};
    let List.343 : [C [], C {List U8, U64}] = CallByName List.63 List.122 List.123 List.349;
    let List.346 : U8 = 1i64;
    let List.347 : U8 = GetTagId List.343;
    let List.348 : Int1 = lowlevel Eq List.346 List.347;
    if List.348 then
        let List.129 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.343;
        inc List.129;
        dec List.343;
        ret List.129;
    else
        let List.130 : [] = UnionAtIndex (Id 0) (Index 0) List.343;
        dec List.343;
        let List.345 : {List U8, U64} = CallByName List.64 List.130;
        ret List.345;

procedure List.4 (List.93, List.94):
    let List.342 : U64 = 1i64;
    let List.341 : List U8 = CallByName List.65 List.93 List.342;
    let List.340 : List U8 = CallByName List.66 List.341 List.94;
    ret List.340;

procedure List.6 (#Attr.2):
    let List.317 : U64 = lowlevel ListLen #Attr.2;
    ret List.317;

procedure List.6 (#Attr.2):
    let List.352 : U64 = lowlevel ListLen #Attr.2;
    ret List.352;

procedure List.60 (#Attr.2, #Attr.3):
    let List.371 : {Str, {Str}} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.371;

procedure List.63 (List.305, List.306, List.307):
    let List.357 : U64 = 0i64;
    let List.358 : U64 = CallByName List.6 List.305;
    let List.356 : [C [], C {List U8, U64}] = CallByName List.80 List.305 List.306 List.307 List.357 List.358;
    ret List.356;

procedure List.64 (#Attr.2):
    let List.355 : {List U8, U64} = lowlevel Unreachable #Attr.2;
    ret List.355;

procedure List.65 (#Attr.2, #Attr.3):
    let List.354 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.354;

procedure List.66 (#Attr.2, #Attr.3):
    let List.353 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.353;

procedure List.8 (#Attr.2, #Attr.3):
    let List.351 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.351;

procedure List.80 (List.387, List.388, List.389, List.390, List.391):
    joinpoint List.359 List.308 List.309 List.310 List.311 List.312:
        let List.361 : Int1 = CallByName Num.22 List.311 List.312;
        if List.361 then
            let List.370 : {Str, {Str}} = CallByName List.60 List.308 List.311;
            let List.362 : [C [], C {List U8, U64}] = CallByName List.125 List.309 List.370 List.310;
            let List.367 : U8 = 1i64;
            let List.368 : U8 = GetTagId List.362;
            let List.369 : Int1 = lowlevel Eq List.367 List.368;
            if List.369 then
                let List.313 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.362;
                inc List.313;
                dec List.362;
                let List.365 : U64 = 1i64;
                let List.364 : U64 = CallByName Num.19 List.311 List.365;
                jump List.359 List.308 List.313 List.310 List.364 List.312;
            else
                let List.314 : [] = UnionAtIndex (Id 0) (Index 0) List.362;
                dec List.362;
                let List.366 : [C [], C {List U8, U64}] = TagId(0) List.314;
                ret List.366;
        else
            let List.360 : [C [], C {List U8, U64}] = TagId(1) List.309;
            ret List.360;
    in
    jump List.359 List.387 List.388 List.389 List.390 List.391;

procedure Num.123 (#Attr.2):
    let Num.264 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.264;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.267 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.267;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.265 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.265;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.268 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.268;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.266 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.266;

procedure Str.12 (#Attr.2):
    let Str.210 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.210;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.204 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.204;

procedure Str.9 (Str.69):
    let Str.202 : U64 = 0i64;
    let Str.203 : U64 = CallByName List.6 Str.69;
    let Str.70 : {U64, Str, Int1, U8} = CallByName Str.48 Str.69 Str.202 Str.203;
    let Str.199 : Int1 = StructAtIndex 2 Str.70;
    if Str.199 then
        let Str.201 : Str = StructAtIndex 1 Str.70;
        inc Str.201;
        dec Str.70;
        let Str.200 : [C {U64, U8}, C Str] = TagId(1) Str.201;
        ret Str.200;
    else
        let Str.197 : U8 = StructAtIndex 3 Str.70;
        let Str.198 : U64 = StructAtIndex 0 Str.70;
        dec Str.70;
        let Str.196 : {U64, U8} = Struct {Str.198, Str.197};
        let Str.195 : [C {U64, U8}, C Str] = TagId(0) Str.196;
        ret Str.195;

procedure Test.0 ():
    let Test.11 : Str = "foo";
    let Test.12 : Str = "bar";
    let Test.9 : {Str, Str} = Struct {Test.11, Test.12};
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.25 Test.9 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
