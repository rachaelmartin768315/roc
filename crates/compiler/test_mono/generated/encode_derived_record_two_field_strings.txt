procedure #Derived.0 (#Derived.1):
    let #Derived_gen.1 : {{Str, Str}} = Struct {#Derived.1};
    let #Derived_gen.0 : {{Str, Str}} = CallByName Encode.22 #Derived_gen.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Attr.12):
    let #Derived.1 : {Str, Str} = StructAtIndex 0 #Attr.12;
    inc #Derived.1;
    dec #Attr.12;
    let #Derived_gen.11 : Str = "a";
    let #Derived_gen.13 : Str = StructAtIndex 0 #Derived.1;
    inc #Derived_gen.13;
    let #Derived_gen.12 : {Str} = CallByName Json.17 #Derived_gen.13;
    let #Derived_gen.6 : {Str, {Str}} = Struct {#Derived_gen.11, #Derived_gen.12};
    let #Derived_gen.8 : Str = "b";
    let #Derived_gen.10 : Str = StructAtIndex 1 #Derived.1;
    inc #Derived_gen.10;
    dec #Derived.1;
    let #Derived_gen.9 : {Str} = CallByName Json.17 #Derived_gen.10;
    let #Derived_gen.7 : {Str, {Str}} = Struct {#Derived_gen.8, #Derived_gen.9};
    let #Derived_gen.5 : List {Str, {Str}} = Array [#Derived_gen.6, #Derived_gen.7];
    let #Derived_gen.4 : {List {Str, {Str}}} = CallByName Json.19 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.2 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.77 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.117 : List U8 = CallByName Json.65 Encode.94 Encode.96 Encode.102;
    ret Encode.117;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : {{Str, Str}} = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.102 : {} = Struct {};
    ret Json.102;

procedure Json.17 (Json.64):
    let Json.110 : {Str} = Struct {Json.64};
    let Json.109 : {Str} = CallByName Encode.22 Json.110;
    ret Json.109;

procedure Json.19 (Json.76):
    let Json.104 : {List {Str, {Str}}} = Struct {Json.76};
    let Json.103 : {List {Str, {Str}}} = CallByName Encode.22 Json.104;
    ret Json.103;

procedure Json.65 (Json.66, Json.108, #Attr.12):
    let Json.64 : Str = StructAtIndex 0 #Attr.12;
    inc Json.64;
    dec #Attr.12;
    let Json.153 : I32 = 34i64;
    let Json.152 : U8 = CallByName Num.123 Json.153;
    let Json.150 : List U8 = CallByName List.4 Json.66 Json.152;
    let Json.151 : List U8 = CallByName Str.12 Json.64;
    let Json.147 : List U8 = CallByName List.8 Json.150 Json.151;
    let Json.149 : I32 = 34i64;
    let Json.148 : U8 = CallByName Num.123 Json.149;
    let Json.146 : List U8 = CallByName List.4 Json.147 Json.148;
    ret Json.146;

procedure Json.77 (Json.78, Json.105, #Attr.12):
    let Json.76 : List {Str, {Str}} = StructAtIndex 0 #Attr.12;
    inc Json.76;
    dec #Attr.12;
    let Json.144 : I32 = 123i64;
    let Json.143 : U8 = CallByName Num.123 Json.144;
    let Json.80 : List U8 = CallByName List.4 Json.78 Json.143;
    let Json.142 : U64 = CallByName List.6 Json.76;
    let Json.119 : {List U8, U64} = Struct {Json.80, Json.142};
    let Json.120 : {} = Struct {};
    let Json.118 : {List U8, U64} = CallByName List.18 Json.76 Json.119 Json.120;
    dec Json.76;
    let Json.82 : List U8 = StructAtIndex 0 Json.118;
    inc Json.82;
    dec Json.118;
    let Json.117 : I32 = 125i64;
    let Json.116 : U8 = CallByName Num.123 Json.117;
    let Json.115 : List U8 = CallByName List.4 Json.82 Json.116;
    ret Json.115;

procedure Json.79 (Json.113, Json.114):
    let Json.85 : Str = StructAtIndex 0 Json.114;
    inc Json.85;
    let Json.86 : {Str} = StructAtIndex 1 Json.114;
    inc Json.86;
    dec Json.114;
    let Json.83 : List U8 = StructAtIndex 0 Json.113;
    inc Json.83;
    let Json.84 : U64 = StructAtIndex 1 Json.113;
    dec Json.113;
    let Json.141 : I32 = 34i64;
    let Json.140 : U8 = CallByName Num.123 Json.141;
    let Json.138 : List U8 = CallByName List.4 Json.83 Json.140;
    let Json.139 : List U8 = CallByName Str.12 Json.85;
    let Json.135 : List U8 = CallByName List.8 Json.138 Json.139;
    let Json.137 : I32 = 34i64;
    let Json.136 : U8 = CallByName Num.123 Json.137;
    let Json.132 : List U8 = CallByName List.4 Json.135 Json.136;
    let Json.134 : I32 = 58i64;
    let Json.133 : U8 = CallByName Num.123 Json.134;
    let Json.130 : List U8 = CallByName List.4 Json.132 Json.133;
    let Json.131 : {} = Struct {};
    let Json.87 : List U8 = CallByName Encode.23 Json.130 Json.86 Json.131;
    joinpoint Json.125 Json.88:
        let Json.123 : U64 = 1i64;
        let Json.122 : U64 = CallByName Num.20 Json.84 Json.123;
        let Json.121 : {List U8, U64} = Struct {Json.88, Json.122};
        ret Json.121;
    in
    let Json.129 : U64 = 0i64;
    let Json.126 : Int1 = CallByName Num.24 Json.84 Json.129;
    if Json.126 then
        let Json.128 : I32 = 44i64;
        let Json.127 : U8 = CallByName Num.123 Json.128;
        let Json.124 : List U8 = CallByName List.4 Json.87 Json.127;
        jump Json.125 Json.124;
    else
        jump Json.125 Json.87;

procedure List.122 (List.123, List.124, #Attr.12):
    let List.121 : {} = StructAtIndex 0 #Attr.12;
    let List.351 : {List U8, U64} = CallByName Json.79 List.123 List.124;
    let List.350 : [C [], C {List U8, U64}] = TagId(1) List.351;
    ret List.350;

procedure List.18 (List.119, List.120, List.121):
    let List.327 : {{}} = Struct {List.121};
    let List.321 : [C [], C {List U8, U64}] = CallByName List.63 List.119 List.120 List.327;
    let List.324 : U8 = 1i64;
    let List.325 : U8 = GetTagId List.321;
    let List.326 : Int1 = lowlevel Eq List.324 List.325;
    if List.326 then
        let List.126 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.321;
        inc List.126;
        dec List.321;
        ret List.126;
    else
        let List.127 : [] = UnionAtIndex (Id 0) (Index 0) List.321;
        dec List.321;
        let List.323 : {List U8, U64} = CallByName List.64 List.127;
        ret List.323;

procedure List.4 (List.90, List.91):
    let List.320 : U64 = 1i64;
    let List.319 : List U8 = CallByName List.65 List.90 List.320;
    let List.318 : List U8 = CallByName List.66 List.319 List.91;
    ret List.318;

procedure List.6 (#Attr.2):
    let List.295 : U64 = lowlevel ListLen #Attr.2;
    ret List.295;

procedure List.6 (#Attr.2):
    let List.330 : U64 = lowlevel ListLen #Attr.2;
    ret List.330;

procedure List.60 (#Attr.2, #Attr.3):
    let List.349 : {Str, {Str}} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.349;

procedure List.63 (List.283, List.284, List.285):
    let List.335 : U64 = 0i64;
    let List.336 : U64 = CallByName List.6 List.283;
    let List.334 : [C [], C {List U8, U64}] = CallByName List.77 List.283 List.284 List.285 List.335 List.336;
    ret List.334;

procedure List.64 (#Attr.2):
    let List.333 : {List U8, U64} = lowlevel Unreachable #Attr.2;
    ret List.333;

procedure List.65 (#Attr.2, #Attr.3):
    let List.332 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.332;

procedure List.66 (#Attr.2, #Attr.3):
    let List.331 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.331;

procedure List.77 (List.368, List.369, List.370, List.371, List.372):
    joinpoint List.337 List.286 List.287 List.288 List.289 List.290:
        let List.339 : Int1 = CallByName Num.22 List.289 List.290;
        if List.339 then
            let List.348 : {Str, {Str}} = CallByName List.60 List.286 List.289;
            let List.340 : [C [], C {List U8, U64}] = CallByName List.122 List.287 List.348 List.288;
            let List.345 : U8 = 1i64;
            let List.346 : U8 = GetTagId List.340;
            let List.347 : Int1 = lowlevel Eq List.345 List.346;
            if List.347 then
                let List.291 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.340;
                inc List.291;
                dec List.340;
                let List.343 : U64 = 1i64;
                let List.342 : U64 = CallByName Num.19 List.289 List.343;
                jump List.337 List.286 List.291 List.288 List.342 List.290;
            else
                let List.292 : [] = UnionAtIndex (Id 0) (Index 0) List.340;
                dec List.340;
                let List.344 : [C [], C {List U8, U64}] = TagId(0) List.292;
                ret List.344;
        else
            let List.338 : [C [], C {List U8, U64}] = TagId(1) List.287;
            ret List.338;
    in
    jump List.337 List.368 List.369 List.370 List.371 List.372;

procedure List.8 (#Attr.2, #Attr.3):
    let List.329 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.329;

procedure Num.123 (#Attr.2):
    let Num.264 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.264;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.267 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.267;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.265 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.265;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.268 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.268;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.266 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.266;

procedure Str.12 (#Attr.2):
    let Str.210 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.210;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.204 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.204;

procedure Str.9 (Str.69):
    let Str.202 : U64 = 0i64;
    let Str.203 : U64 = CallByName List.6 Str.69;
    let Str.70 : {U64, Str, Int1, U8} = CallByName Str.48 Str.69 Str.202 Str.203;
    let Str.199 : Int1 = StructAtIndex 2 Str.70;
    if Str.199 then
        let Str.201 : Str = StructAtIndex 1 Str.70;
        inc Str.201;
        dec Str.70;
        let Str.200 : [C {U64, U8}, C Str] = TagId(1) Str.201;
        ret Str.200;
    else
        let Str.197 : U8 = StructAtIndex 3 Str.70;
        let Str.198 : U64 = StructAtIndex 0 Str.70;
        dec Str.70;
        let Str.196 : {U64, U8} = Struct {Str.198, Str.197};
        let Str.195 : [C {U64, U8}, C Str] = TagId(0) Str.196;
        ret Str.195;

procedure Test.0 ():
    let Test.11 : Str = "foo";
    let Test.12 : Str = "bar";
    let Test.9 : {Str, Str} = Struct {Test.11, Test.12};
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.25 Test.9 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
