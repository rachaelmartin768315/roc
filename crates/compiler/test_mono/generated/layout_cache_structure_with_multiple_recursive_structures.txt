procedure List.18 (List.160, List.161, List.162):
    let List.575 : U64 = 0i64;
    let List.576 : U64 = CallByName List.6 List.160;
    let List.574 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.92 List.160 List.161 List.162 List.575 List.576;
    ret List.574;

procedure List.6 (#Attr.2):
    let List.585 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.585;

procedure List.66 (#Attr.2, #Attr.3):
    let List.584 : [<rnu>C *self, <null>] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.584;

procedure List.92 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.577 List.163 List.164 List.165 List.166 List.167:
        let List.579 : Int1 = CallByName Num.22 List.166 List.167;
        if List.579 then
            let List.583 : [<rnu>C *self, <null>] = CallByName List.66 List.163 List.166;
            inc List.583;
            let List.168 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName Test.7 List.164 List.583;
            let List.582 : U64 = 1i64;
            let List.581 : U64 = CallByName Num.51 List.166 List.582;
            jump List.577 List.163 List.168 List.165 List.581 List.167;
        else
            dec List.163;
            ret List.164;
    in
    jump List.577 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.280 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.280;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.279 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.279;

procedure Test.7 (Test.11, Test.12):
    let Test.17 : {[<rnu>C *self, <null>], [<rnu><null>, C {[<rnu>C *self, <null>], *self}]} = Struct {Test.12, Test.11};
    let Test.16 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(0) Test.17;
    ret Test.16;

procedure Test.0 ():
    let Test.6 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(1) ;
    let Test.8 : List [<rnu>C *self, <null>] = Array [];
    let Test.15 : {} = Struct {};
    let Test.9 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.18 Test.8 Test.6 Test.15;
    ret Test.9;
