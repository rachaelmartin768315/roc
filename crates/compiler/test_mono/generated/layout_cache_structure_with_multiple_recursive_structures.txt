procedure List.18 (List.163, List.164, List.165):
    let List.578 : U64 = 0i64;
    let List.579 : U64 = CallByName List.6 List.163;
    let List.577 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.95 List.163 List.164 List.165 List.578 List.579;
    ret List.577;

procedure List.6 (#Attr.2):
    let List.588 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.588;

procedure List.66 (#Attr.2, #Attr.3):
    let List.587 : [<rnu>C *self, <null>] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.587;

procedure List.95 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.580 List.166 List.167 List.168 List.169 List.170:
        let List.582 : Int1 = CallByName Num.22 List.169 List.170;
        if List.582 then
            let List.586 : [<rnu>C *self, <null>] = CallByName List.66 List.166 List.169;
            inc List.586;
            let List.171 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName Test.7 List.167 List.586;
            let List.585 : U64 = 1i64;
            let List.584 : U64 = CallByName Num.51 List.169 List.585;
            jump List.580 List.166 List.171 List.168 List.584 List.170;
        else
            dec List.166;
            ret List.167;
    in
    jump List.580 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.7 (Test.11, Test.12):
    let Test.17 : {[<rnu>C *self, <null>], [<rnu><null>, C {[<rnu>C *self, <null>], *self}]} = Struct {Test.12, Test.11};
    let Test.16 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(0) Test.17;
    ret Test.16;

procedure Test.0 ():
    let Test.6 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(1) ;
    let Test.8 : List [<rnu>C *self, <null>] = Array [];
    let Test.15 : {} = Struct {};
    let Test.9 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.18 Test.8 Test.6 Test.15;
    ret Test.9;
