procedure List.18 (List.163, List.164, List.165):
    let List.623 : U64 = 0i64;
    let List.624 : U64 = CallByName List.6 List.163;
    let List.622 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.92 List.163 List.164 List.165 List.623 List.624;
    ret List.622;

procedure List.6 (#Attr.2):
    let List.633 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.633;

procedure List.66 (#Attr.2, #Attr.3):
    let List.632 : [<rnu>C *self, <null>] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.632;

procedure List.92 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.625 List.166 List.167 List.168 List.169 List.170:
        let List.627 : Int1 = CallByName Num.22 List.169 List.170;
        if List.627 then
            let List.631 : [<rnu>C *self, <null>] = CallByName List.66 List.166 List.169;
            inc List.631;
            let List.171 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName Test.7 List.167 List.631;
            let List.630 : U64 = 1i64;
            let List.629 : U64 = CallByName Num.51 List.169 List.630;
            jump List.625 List.166 List.171 List.168 List.629 List.170;
        else
            dec List.166;
            ret List.167;
    in
    inc #Derived_gen.0;
    jump List.625 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.280 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.280;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.279 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.279;

procedure Test.7 (Test.11, Test.12):
    let Test.17 : {[<rnu>C *self, <null>], [<rnu><null>, C {[<rnu>C *self, <null>], *self}]} = Struct {Test.12, Test.11};
    let Test.16 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(0) Test.17;
    ret Test.16;

procedure Test.0 ():
    let Test.6 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(1) ;
    let Test.8 : List [<rnu>C *self, <null>] = Array [];
    let Test.15 : {} = Struct {};
    let Test.9 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.18 Test.8 Test.6 Test.15;
    dec Test.8;
    ret Test.9;
