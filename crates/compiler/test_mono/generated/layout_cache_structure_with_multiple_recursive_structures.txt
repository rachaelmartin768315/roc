procedure List.18 (List.170, List.171, List.172):
    let List.654 : U64 = 0i64;
    let List.655 : U64 = CallByName List.6 List.170;
    let List.653 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.99 List.170 List.171 List.172 List.654 List.655;
    ret List.653;

procedure List.6 (#Attr.2):
    let List.664 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.664;

procedure List.66 (#Attr.2, #Attr.3):
    let List.663 : [<rnu>C *self, <null>] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.663;

procedure List.99 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.656 List.173 List.174 List.175 List.176 List.177:
        let List.658 : Int1 = CallByName Num.22 List.176 List.177;
        if List.658 then
            let List.662 : [<rnu>C *self, <null>] = CallByName List.66 List.173 List.176;
            inc List.662;
            let List.178 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName Test.7 List.174 List.662;
            let List.661 : U64 = 1i64;
            let List.660 : U64 = CallByName Num.51 List.176 List.661;
            jump List.656 List.173 List.178 List.175 List.660 List.177;
        else
            dec List.173;
            ret List.174;
    in
    inc #Derived_gen.0;
    jump List.656 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.7 (Test.11, Test.12):
    let Test.17 : {[<rnu>C *self, <null>], [<rnu><null>, C {[<rnu>C *self, <null>], *self}]} = Struct {Test.12, Test.11};
    let Test.16 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(0) Test.17;
    ret Test.16;

procedure Test.0 ():
    let Test.6 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(1) ;
    let Test.8 : List [<rnu>C *self, <null>] = Array [];
    let Test.15 : {} = Struct {};
    let Test.9 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.18 Test.8 Test.6 Test.15;
    dec Test.8;
    ret Test.9;
