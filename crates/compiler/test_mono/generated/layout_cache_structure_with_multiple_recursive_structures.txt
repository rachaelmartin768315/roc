procedure List.145 (List.146, List.147, List.144):
    let List.541 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName Test.7 List.146 List.147;
    ret List.541;

procedure List.18 (List.142, List.143, List.144):
    let List.522 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.93 List.142 List.143 List.144;
    ret List.522;

procedure List.6 (#Attr.2):
    let List.539 : U64 = lowlevel ListLen #Attr.2;
    ret List.539;

procedure List.66 (#Attr.2, #Attr.3):
    let List.538 : [<rnu>C *self, <null>] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.538;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.528 List.440 List.441 List.442 List.443 List.444:
        let List.530 : Int1 = CallByName Num.22 List.443 List.444;
        if List.530 then
            let List.537 : [<rnu>C *self, <null>] = CallByName List.66 List.440 List.443;
            inc List.537;
            let List.531 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.145 List.441 List.537 List.442;
            let List.534 : U64 = 1i64;
            let List.533 : U64 = CallByName Num.51 List.443 List.534;
            jump List.528 List.440 List.531 List.442 List.533 List.444;
        else
            dec List.440;
            ret List.441;
    in
    jump List.528 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure List.93 (List.437, List.438, List.439):
    let List.526 : U64 = 0i64;
    let List.527 : U64 = CallByName List.6 List.437;
    let List.525 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.80 List.437 List.438 List.439 List.526 List.527;
    ret List.525;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.293 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.293;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.292 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.292;

procedure Test.7 (Test.11, Test.12):
    let Test.17 : {[<rnu>C *self, <null>], [<rnu><null>, C {[<rnu>C *self, <null>], *self}]} = Struct {Test.12, Test.11};
    let Test.16 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(0) Test.17;
    ret Test.16;

procedure Test.0 ():
    let Test.6 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(1) ;
    let Test.8 : List [<rnu>C *self, <null>] = Array [];
    let Test.15 : {} = Struct {};
    let Test.9 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.18 Test.8 Test.6 Test.15;
    ret Test.9;
