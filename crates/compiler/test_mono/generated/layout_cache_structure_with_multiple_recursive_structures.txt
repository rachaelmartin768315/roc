procedure List.145 (List.146, List.147, List.144):
    let List.540 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName Test.7 List.146 List.147;
    ret List.540;

procedure List.18 (List.142, List.143, List.144):
    let List.521 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.93 List.142 List.143 List.144;
    ret List.521;

procedure List.6 (#Attr.2):
    let List.538 : U64 = lowlevel ListLen #Attr.2;
    ret List.538;

procedure List.66 (#Attr.2, #Attr.3):
    let List.537 : [<rnu>C *self, <null>] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.537;

procedure List.80 (List.544, List.545, List.546, List.547, List.548):
    joinpoint List.527 List.439 List.440 List.441 List.442 List.443:
        let List.529 : Int1 = CallByName Num.22 List.442 List.443;
        if List.529 then
            let List.536 : [<rnu>C *self, <null>] = CallByName List.66 List.439 List.442;
            inc List.536;
            let List.530 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.145 List.440 List.536 List.441;
            let List.533 : U64 = 1i64;
            let List.532 : U64 = CallByName Num.19 List.442 List.533;
            jump List.527 List.439 List.530 List.441 List.532 List.443;
        else
            dec List.439;
            ret List.440;
    in
    jump List.527 List.544 List.545 List.546 List.547 List.548;

procedure List.93 (List.436, List.437, List.438):
    let List.525 : U64 = 0i64;
    let List.526 : U64 = CallByName List.6 List.436;
    let List.524 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.80 List.436 List.437 List.438 List.525 List.526;
    ret List.524;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.292 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.292;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.293 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.293;

procedure Test.7 (Test.11, Test.12):
    let Test.17 : {[<rnu>C *self, <null>], [<rnu><null>, C {[<rnu>C *self, <null>], *self}]} = Struct {Test.12, Test.11};
    let Test.16 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(0) Test.17;
    ret Test.16;

procedure Test.0 ():
    let Test.6 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(1) ;
    let Test.8 : List [<rnu>C *self, <null>] = Array [];
    let Test.15 : {} = Struct {};
    let Test.9 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.18 Test.8 Test.6 Test.15;
    ret Test.9;
