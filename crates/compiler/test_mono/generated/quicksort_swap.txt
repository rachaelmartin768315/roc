procedure List.2 (List.77, List.78):
    let List.307 : U64 = CallByName List.6 List.77;
    let List.304 : Int1 = CallByName Num.22 List.78 List.307;
    if List.304 then
        let List.306 : I64 = CallByName List.60 List.77 List.78;
        let List.305 : [C {}, C I64] = TagId(1) List.306;
        ret List.305;
    else
        let List.303 : {} = Struct {};
        let List.302 : [C {}, C I64] = TagId(0) List.303;
        ret List.302;

procedure List.3 (List.85, List.86, List.87):
    let List.295 : {List I64, I64} = CallByName List.57 List.85 List.86 List.87;
    let List.294 : List I64 = StructAtIndex 0 List.295;
    inc List.294;
    dec List.295;
    ret List.294;

procedure List.57 (List.82, List.83, List.84):
    let List.312 : U64 = CallByName List.6 List.82;
    let List.309 : Int1 = CallByName Num.22 List.83 List.312;
    if List.309 then
        let List.310 : {List I64, I64} = CallByName List.61 List.82 List.83 List.84;
        ret List.310;
    else
        let List.308 : {List I64, I64} = Struct {List.82, List.84};
        ret List.308;

procedure List.6 (#Attr.2):
    let List.313 : U64 = lowlevel ListLen #Attr.2;
    ret List.313;

procedure List.60 (#Attr.2, #Attr.3):
    let List.314 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.314;

procedure List.61 (#Attr.2, #Attr.3, #Attr.4):
    let List.311 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.311;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.259 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.259;

procedure Test.1 (Test.2):
    let Test.28 : U64 = 0i64;
    let Test.26 : [C {}, C I64] = CallByName List.2 Test.2 Test.28;
    let Test.27 : U64 = 0i64;
    let Test.25 : [C {}, C I64] = CallByName List.2 Test.2 Test.27;
    let Test.8 : {[C {}, C I64], [C {}, C I64]} = Struct {Test.25, Test.26};
    joinpoint Test.22:
        let Test.13 : List I64 = Array [];
        ret Test.13;
    in
    let Test.19 : [C {}, C I64] = StructAtIndex 1 Test.8;
    let Test.20 : U8 = 1i64;
    let Test.21 : U8 = GetTagId Test.19;
    let Test.24 : Int1 = lowlevel Eq Test.20 Test.21;
    if Test.24 then
        let Test.16 : [C {}, C I64] = StructAtIndex 0 Test.8;
        let Test.17 : U8 = 1i64;
        let Test.18 : U8 = GetTagId Test.16;
        let Test.23 : Int1 = lowlevel Eq Test.17 Test.18;
        if Test.23 then
            let Test.15 : [C {}, C I64] = StructAtIndex 0 Test.8;
            let Test.4 : I64 = UnionAtIndex (Id 1) (Index 0) Test.15;
            let Test.14 : [C {}, C I64] = StructAtIndex 1 Test.8;
            let Test.5 : I64 = UnionAtIndex (Id 1) (Index 0) Test.14;
            let Test.12 : U64 = 0i64;
            let Test.10 : List I64 = CallByName List.3 Test.2 Test.12 Test.5;
            let Test.11 : U64 = 0i64;
            let Test.9 : List I64 = CallByName List.3 Test.10 Test.11 Test.4;
            ret Test.9;
        else
            dec Test.2;
            jump Test.22;
    else
        dec Test.2;
        jump Test.22;

procedure Test.0 ():
    let Test.7 : List I64 = Array [1i64, 2i64];
    let Test.6 : List I64 = CallByName Test.1 Test.7;
    ret Test.6;
