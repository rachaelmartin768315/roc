<<<<<<< HEAD
<<<<<<< HEAD
procedure List.2 (List.75, List.76):
    let List.304 : U64 = CallByName List.6 List.75;
    let List.300 : Int1 = CallByName Num.22 List.76 List.304;
    if List.300 then
        let List.302 : I64 = CallByName List.60 List.75 List.76;
        let List.301 : [C {}, C I64] = Ok List.302;
        ret List.301;
=======
<<<<<<< HEAD:crates/compiler/test_mono/generated/quicksort_swap.txt
procedure List.2 (List.73, List.74):
    let List.279 : U64 = CallByName List.6 List.73;
    let List.275 : Int1 = CallByName Num.22 List.74 List.279;
    if List.275 then
        let List.277 : I64 = CallByName List.60 List.73 List.74;
        let List.276 : [C {}, C I64] = Ok List.277;
        ret List.276;
>>>>>>> 25bb3751b (Rename multimorphic tests to capture niche)
    else
        let List.299 : {} = Struct {};
        let List.298 : [C {}, C I64] = Err List.299;
        ret List.298;

procedure List.3 (List.84, List.85, List.86):
    let List.288 : {List I64, I64} = CallByName List.57 List.84 List.85 List.86;
    let List.287 : List I64 = StructAtIndex 0 List.288;
    inc List.287;
    dec List.288;
    ret List.287;

procedure List.57 (List.81, List.82, List.83):
    let List.310 : U64 = CallByName List.6 List.81;
    let List.307 : Int1 = CallByName Num.22 List.82 List.310;
    if List.307 then
        let List.308 : {List I64, I64} = CallByName List.61 List.81 List.82 List.83;
        ret List.308;
    else
        let List.306 : {List I64, I64} = Struct {List.81, List.83};
        ret List.306;

procedure List.6 (#Attr.2):
    let List.311 : U64 = lowlevel ListLen #Attr.2;
    ret List.311;

procedure List.60 (#Attr.2, #Attr.3):
    let List.312 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.312;

procedure List.61 (#Attr.2, #Attr.3, #Attr.4):
<<<<<<< HEAD
    let List.309 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.309;
=======
    let List.284 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.284;
=======
procedure List.2 (List.71, List.72):
    let List.233 : U64 = CallByName List.6 List.71;
    let List.229 : Int1 = CallByName Num.22 List.72 List.233;
    if List.229 then
        let List.231 : I64 = CallByName List.60 List.71 List.72;
        let List.230 : [C {}, C I64] = Ok List.231;
        ret List.230;
    else
        let List.228 : {} = Struct {};
        let List.227 : [C {}, C I64] = Err List.228;
        ret List.227;

procedure List.3 (List.79, List.80, List.81):
    let List.217 : {List I64, I64} = CallByName List.57 List.79 List.80 List.81;
    let List.216 : List I64 = StructAtIndex 0 List.217;
    inc List.216;
    dec List.217;
    ret List.216;
=======
procedure List.2 (List.72, List.73):
    let List.258 : U64 = CallByName List.6 List.72;
    let List.254 : Int1 = CallByName Num.22 List.73 List.258;
    if List.254 then
        let List.256 : I64 = CallByName List.60 List.72 List.73;
        let List.255 : [C {}, C I64] = Ok List.256;
        ret List.255;
    else
        let List.253 : {} = Struct {};
        let List.252 : [C {}, C I64] = Err List.253;
        ret List.252;

procedure List.3 (List.80, List.81, List.82):
    let List.242 : {List I64, I64} = CallByName List.57 List.80 List.81 List.82;
    let List.241 : List I64 = StructAtIndex 0 List.242;
    inc List.241;
    dec List.242;
    ret List.241;
>>>>>>> 61fcac491 (Fix mono tests)

procedure List.57 (List.77, List.78, List.79):
    let List.264 : U64 = CallByName List.6 List.77;
    let List.261 : Int1 = CallByName Num.22 List.78 List.264;
    if List.261 then
        let List.262 : {List I64, I64} = CallByName List.61 List.77 List.78 List.79;
        ret List.262;
    else
        let List.260 : {List I64, I64} = Struct {List.77, List.79};
        ret List.260;

procedure List.6 (#Attr.2):
    let List.265 : U64 = lowlevel ListLen #Attr.2;
    ret List.265;

procedure List.60 (#Attr.2, #Attr.3):
    let List.266 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.266;

procedure List.61 (#Attr.2, #Attr.3, #Attr.4):
<<<<<<< HEAD
    let List.238 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.238;
>>>>>>> a5fc399f4 (Rename multimorphic tests to capture niche):compiler/test_mono/generated/quicksort_swap.txt
>>>>>>> 25bb3751b (Rename multimorphic tests to capture niche)
=======
    let List.263 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.263;
>>>>>>> 61fcac491 (Fix mono tests)

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.190 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.190;

procedure Test.1 (Test.2):
    let Test.28 : U64 = 0i64;
    let Test.26 : [C {}, C I64] = CallByName List.2 Test.2 Test.28;
    let Test.27 : U64 = 0i64;
    let Test.25 : [C {}, C I64] = CallByName List.2 Test.2 Test.27;
    let Test.8 : {[C {}, C I64], [C {}, C I64]} = Struct {Test.25, Test.26};
    joinpoint Test.22:
        let Test.13 : List I64 = Array [];
        ret Test.13;
    in
    let Test.19 : [C {}, C I64] = StructAtIndex 1 Test.8;
    let Test.20 : U8 = 1i64;
    let Test.21 : U8 = GetTagId Test.19;
    let Test.24 : Int1 = lowlevel Eq Test.20 Test.21;
    if Test.24 then
        let Test.16 : [C {}, C I64] = StructAtIndex 0 Test.8;
        let Test.17 : U8 = 1i64;
        let Test.18 : U8 = GetTagId Test.16;
        let Test.23 : Int1 = lowlevel Eq Test.17 Test.18;
        if Test.23 then
            let Test.15 : [C {}, C I64] = StructAtIndex 0 Test.8;
            let Test.4 : I64 = UnionAtIndex (Id 1) (Index 0) Test.15;
            let Test.14 : [C {}, C I64] = StructAtIndex 1 Test.8;
            let Test.5 : I64 = UnionAtIndex (Id 1) (Index 0) Test.14;
            let Test.12 : U64 = 0i64;
            let Test.10 : List I64 = CallByName List.3 Test.2 Test.12 Test.5;
            let Test.11 : U64 = 0i64;
            let Test.9 : List I64 = CallByName List.3 Test.10 Test.11 Test.4;
            ret Test.9;
        else
            dec Test.2;
            jump Test.22;
    else
        dec Test.2;
        jump Test.22;

procedure Test.0 ():
    let Test.7 : List I64 = Array [1i64, 2i64];
    let Test.6 : List I64 = CallByName Test.1 Test.7;
    ret Test.6;
