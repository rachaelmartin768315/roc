procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.4, #Derived.5, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.4 #Derived_gen.4 #Derived.5;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Json.22 #Derived.1;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9];
    let #Derived_gen.6 : {Str, List Str} = CallByName Json.26 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.3 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Json.181 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.121 : List U8 = CallByName Json.139 Encode.99 Encode.101 Encode.107;
    ret Encode.121;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : Str = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.814 : {} = Struct {};
    ret Json.814;

procedure Json.139 (Json.140, Json.858, Json.138):
    let Json.867 : I64 = 34i64;
    let Json.866 : U8 = CallByName Num.127 Json.867;
    let Json.864 : List U8 = CallByName List.4 Json.140 Json.866;
    let Json.865 : List U8 = CallByName Str.12 Json.138;
    let Json.861 : List U8 = CallByName List.8 Json.864 Json.865;
    let Json.863 : I64 = 34i64;
    let Json.862 : U8 = CallByName Num.127 Json.863;
    let Json.860 : List U8 = CallByName List.4 Json.861 Json.862;
    ret Json.860;

procedure Json.181 (Json.182, Json.817, #Attr.12):
    let Json.180 : List Str = StructAtIndex 1 #Attr.12;
    inc Json.180;
    let Json.179 : Str = StructAtIndex 0 #Attr.12;
    inc Json.179;
    dec #Attr.12;
    let Json.855 : I64 = 123i64;
    let Json.854 : U8 = CallByName Num.127 Json.855;
    let Json.851 : List U8 = CallByName List.4 Json.182 Json.854;
    let Json.853 : I64 = 34i64;
    let Json.852 : U8 = CallByName Num.127 Json.853;
    let Json.849 : List U8 = CallByName List.4 Json.851 Json.852;
    let Json.850 : List U8 = CallByName Str.12 Json.179;
    let Json.846 : List U8 = CallByName List.8 Json.849 Json.850;
    let Json.848 : I64 = 34i64;
    let Json.847 : U8 = CallByName Num.127 Json.848;
    let Json.843 : List U8 = CallByName List.4 Json.846 Json.847;
    let Json.845 : I64 = 58i64;
    let Json.844 : U8 = CallByName Num.127 Json.845;
    let Json.840 : List U8 = CallByName List.4 Json.843 Json.844;
    let Json.842 : I64 = 91i64;
    let Json.841 : U8 = CallByName Num.127 Json.842;
    let Json.184 : List U8 = CallByName List.4 Json.840 Json.841;
    let Json.839 : U64 = CallByName List.6 Json.180;
    let Json.827 : {List U8, U64} = Struct {Json.184, Json.839};
    let Json.828 : {} = Struct {};
    let Json.826 : {List U8, U64} = CallByName List.18 Json.180 Json.827 Json.828;
    dec Json.180;
    let Json.186 : List U8 = StructAtIndex 0 Json.826;
    inc Json.186;
    dec Json.826;
    let Json.825 : I64 = 93i64;
    let Json.824 : U8 = CallByName Num.127 Json.825;
    let Json.821 : List U8 = CallByName List.4 Json.186 Json.824;
    let Json.823 : I64 = 125i64;
    let Json.822 : U8 = CallByName Num.127 Json.823;
    let Json.820 : List U8 = CallByName List.4 Json.821 Json.822;
    ret Json.820;

procedure Json.183 (Json.819, Json.189):
    let Json.187 : List U8 = StructAtIndex 0 Json.819;
    inc Json.187;
    let Json.188 : U64 = StructAtIndex 1 Json.819;
    dec Json.819;
    let Json.838 : {} = Struct {};
    let Json.190 : List U8 = CallByName Encode.24 Json.187 Json.189 Json.838;
    joinpoint Json.833 Json.191:
        let Json.831 : U64 = 1i64;
        let Json.830 : U64 = CallByName Num.20 Json.188 Json.831;
        let Json.829 : {List U8, U64} = Struct {Json.191, Json.830};
        ret Json.829;
    in
    let Json.837 : U64 = 1i64;
    let Json.834 : Int1 = CallByName Num.24 Json.188 Json.837;
    if Json.834 then
        let Json.836 : I64 = 44i64;
        let Json.835 : U8 = CallByName Num.127 Json.836;
        let Json.832 : List U8 = CallByName List.4 Json.190 Json.835;
        jump Json.833 Json.832;
    else
        jump Json.833 Json.190;

procedure Json.22 (Json.138):
    let Json.856 : Str = CallByName Encode.23 Json.138;
    ret Json.856;

procedure Json.26 (Json.179, Json.180):
    let Json.816 : {Str, List Str} = Struct {Json.179, Json.180};
    let Json.815 : {Str, List Str} = CallByName Encode.23 Json.816;
    ret Json.815;

procedure List.139 (List.140, List.141, List.138):
    let List.547 : {List U8, U64} = CallByName Json.183 List.140 List.141;
    ret List.547;

procedure List.18 (List.136, List.137, List.138):
    let List.528 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.528;

procedure List.4 (List.107, List.108):
    let List.527 : U64 = 1i64;
    let List.526 : List U8 = CallByName List.70 List.107 List.527;
    let List.525 : List U8 = CallByName List.71 List.526 List.108;
    ret List.525;

procedure List.6 (#Attr.2):
    let List.494 : U64 = lowlevel ListLen #Attr.2;
    ret List.494;

procedure List.6 (#Attr.2):
    let List.548 : U64 = lowlevel ListLen #Attr.2;
    ret List.548;

procedure List.66 (#Attr.2, #Attr.3):
    let List.544 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.544;

procedure List.70 (#Attr.2, #Attr.3):
    let List.500 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.500;

procedure List.71 (#Attr.2, #Attr.3):
    let List.498 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.498;

procedure List.8 (#Attr.2, #Attr.3):
    let List.550 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.550;

procedure List.80 (List.560, List.561, List.562, List.563, List.564):
    joinpoint List.534 List.433 List.434 List.435 List.436 List.437:
        let List.536 : Int1 = CallByName Num.22 List.436 List.437;
        if List.536 then
            let List.543 : Str = CallByName List.66 List.433 List.436;
            let List.537 : {List U8, U64} = CallByName List.139 List.434 List.543 List.435;
            let List.540 : U64 = 1i64;
            let List.539 : U64 = CallByName Num.19 List.436 List.540;
            jump List.534 List.433 List.537 List.435 List.539 List.437;
        else
            ret List.434;
    in
    jump List.534 List.560 List.561 List.562 List.563 List.564;

procedure List.92 (List.430, List.431, List.432):
    let List.532 : U64 = 0i64;
    let List.533 : U64 = CallByName List.6 List.430;
    let List.531 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.532 List.533;
    ret List.531;

procedure Num.127 (#Attr.2):
    let Num.284 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.284;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.287 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.287;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.288 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.286;

procedure Str.12 (#Attr.2):
    let Str.281 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.281;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.275 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.275;

procedure Str.9 (Str.77):
    let Str.273 : U64 = 0i64;
    let Str.274 : U64 = CallByName List.6 Str.77;
    let Str.78 : {U64, Str, Int1, U8} = CallByName Str.48 Str.77 Str.273 Str.274;
    let Str.270 : Int1 = StructAtIndex 2 Str.78;
    if Str.270 then
        let Str.272 : Str = StructAtIndex 1 Str.78;
        inc Str.272;
        dec Str.78;
        let Str.271 : [C {U64, U8}, C Str] = TagId(1) Str.272;
        ret Str.271;
    else
        let Str.268 : U8 = StructAtIndex 3 Str.78;
        let Str.269 : U64 = StructAtIndex 0 Str.78;
        dec Str.78;
        let Str.267 : {U64, U8} = Struct {Str.269, Str.268};
        let Str.266 : [C {U64, U8}, C Str] = TagId(0) Str.267;
        ret Str.266;

procedure Test.0 ():
    let Test.12 : Str = "foo";
    let Test.11 : {} = CallByName Json.1;
    let Test.10 : List U8 = CallByName Encode.26 Test.12 Test.11;
    let Test.2 : [C {U64, U8}, C Str] = CallByName Str.9 Test.10;
    let Test.7 : U8 = 1i64;
    let Test.8 : U8 = GetTagId Test.2;
    let Test.9 : Int1 = lowlevel Eq Test.7 Test.8;
    if Test.9 then
        let Test.4 : Str = UnionAtIndex (Id 1) (Index 0) Test.2;
        inc Test.4;
        dec Test.2;
        ret Test.4;
    else
        dec Test.2;
        let Test.6 : Str = "<bad>";
        ret Test.6;
