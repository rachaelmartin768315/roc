procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.22 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.4, #Derived.5, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.4 #Derived_gen.4 #Derived.5;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Json.18 #Derived.1;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9];
    let #Derived_gen.6 : {Str, List Str} = CallByName Json.21 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.3 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.126 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.116 : List U8 = CallByName Json.96 Encode.94 Encode.96 Encode.102;
    ret Encode.116;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : Str = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.394 : {} = Struct {};
    ret Json.394;

procedure Json.126 (Json.127, Json.397, #Attr.12):
    let Json.125 : List Str = StructAtIndex 1 #Attr.12;
    inc Json.125;
    let Json.124 : Str = StructAtIndex 0 #Attr.12;
    inc Json.124;
    dec #Attr.12;
    let Json.435 : I64 = 123i64;
    let Json.434 : U8 = CallByName Num.125 Json.435;
    let Json.431 : List U8 = CallByName List.4 Json.127 Json.434;
    let Json.433 : I64 = 34i64;
    let Json.432 : U8 = CallByName Num.125 Json.433;
    let Json.429 : List U8 = CallByName List.4 Json.431 Json.432;
    let Json.430 : List U8 = CallByName Str.12 Json.124;
    let Json.426 : List U8 = CallByName List.8 Json.429 Json.430;
    let Json.428 : I64 = 34i64;
    let Json.427 : U8 = CallByName Num.125 Json.428;
    let Json.423 : List U8 = CallByName List.4 Json.426 Json.427;
    let Json.425 : I64 = 58i64;
    let Json.424 : U8 = CallByName Num.125 Json.425;
    let Json.420 : List U8 = CallByName List.4 Json.423 Json.424;
    let Json.422 : I64 = 91i64;
    let Json.421 : U8 = CallByName Num.125 Json.422;
    let Json.129 : List U8 = CallByName List.4 Json.420 Json.421;
    let Json.419 : U64 = CallByName List.6 Json.125;
    let Json.407 : {List U8, U64} = Struct {Json.129, Json.419};
    let Json.408 : {} = Struct {};
    let Json.406 : {List U8, U64} = CallByName List.18 Json.125 Json.407 Json.408;
    dec Json.125;
    let Json.131 : List U8 = StructAtIndex 0 Json.406;
    inc Json.131;
    dec Json.406;
    let Json.405 : I64 = 93i64;
    let Json.404 : U8 = CallByName Num.125 Json.405;
    let Json.401 : List U8 = CallByName List.4 Json.131 Json.404;
    let Json.403 : I64 = 125i64;
    let Json.402 : U8 = CallByName Num.125 Json.403;
    let Json.400 : List U8 = CallByName List.4 Json.401 Json.402;
    ret Json.400;

procedure Json.128 (Json.399, Json.134):
    let Json.132 : List U8 = StructAtIndex 0 Json.399;
    inc Json.132;
    let Json.133 : U64 = StructAtIndex 1 Json.399;
    dec Json.399;
    let Json.418 : {} = Struct {};
    let Json.135 : List U8 = CallByName Encode.23 Json.132 Json.134 Json.418;
    joinpoint Json.413 Json.136:
        let Json.411 : U64 = 1i64;
        let Json.410 : U64 = CallByName Num.20 Json.133 Json.411;
        let Json.409 : {List U8, U64} = Struct {Json.136, Json.410};
        ret Json.409;
    in
    let Json.417 : U64 = 1i64;
    let Json.414 : Int1 = CallByName Num.24 Json.133 Json.417;
    if Json.414 then
        let Json.416 : I64 = 44i64;
        let Json.415 : U8 = CallByName Num.125 Json.416;
        let Json.412 : List U8 = CallByName List.4 Json.135 Json.415;
        jump Json.413 Json.412;
    else
        jump Json.413 Json.135;

procedure Json.18 (Json.95):
    let Json.436 : Str = CallByName Encode.22 Json.95;
    ret Json.436;

procedure Json.21 (Json.124, Json.125):
    let Json.396 : {Str, List Str} = Struct {Json.124, Json.125};
    let Json.395 : {Str, List Str} = CallByName Encode.22 Json.396;
    ret Json.395;

procedure Json.96 (Json.97, Json.438, Json.95):
    let Json.447 : I64 = 34i64;
    let Json.446 : U8 = CallByName Num.125 Json.447;
    let Json.444 : List U8 = CallByName List.4 Json.97 Json.446;
    let Json.445 : List U8 = CallByName Str.12 Json.95;
    let Json.441 : List U8 = CallByName List.8 Json.444 Json.445;
    let Json.443 : I64 = 34i64;
    let Json.442 : U8 = CallByName Num.125 Json.443;
    let Json.440 : List U8 = CallByName List.4 Json.441 Json.442;
    ret Json.440;

procedure List.137 (List.138, List.139, List.136):
    let List.462 : {List U8, U64} = CallByName Json.128 List.138 List.139;
    ret List.462;

procedure List.18 (List.134, List.135, List.136):
    let List.443 : {List U8, U64} = CallByName List.89 List.134 List.135 List.136;
    ret List.443;

procedure List.4 (List.105, List.106):
    let List.442 : U64 = 1i64;
    let List.441 : List U8 = CallByName List.70 List.105 List.442;
    let List.440 : List U8 = CallByName List.71 List.441 List.106;
    ret List.440;

procedure List.6 (#Attr.2):
    let List.409 : U64 = lowlevel ListLen #Attr.2;
    ret List.409;

procedure List.6 (#Attr.2):
    let List.463 : U64 = lowlevel ListLen #Attr.2;
    ret List.463;

procedure List.66 (#Attr.2, #Attr.3):
    let List.459 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.459;

procedure List.70 (#Attr.2, #Attr.3):
    let List.415 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.415;

procedure List.71 (#Attr.2, #Attr.3):
    let List.413 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.413;

procedure List.8 (#Attr.2, #Attr.3):
    let List.465 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.465;

procedure List.89 (List.385, List.386, List.387):
    let List.447 : U64 = 0i64;
    let List.448 : U64 = CallByName List.6 List.385;
    let List.446 : {List U8, U64} = CallByName List.90 List.385 List.386 List.387 List.447 List.448;
    ret List.446;

procedure List.90 (List.475, List.476, List.477, List.478, List.479):
    joinpoint List.449 List.388 List.389 List.390 List.391 List.392:
        let List.451 : Int1 = CallByName Num.22 List.391 List.392;
        if List.451 then
            let List.458 : Str = CallByName List.66 List.388 List.391;
            let List.452 : {List U8, U64} = CallByName List.137 List.389 List.458 List.390;
            let List.455 : U64 = 1i64;
            let List.454 : U64 = CallByName Num.19 List.391 List.455;
            jump List.449 List.388 List.452 List.390 List.454 List.392;
        else
            ret List.389;
    in
    jump List.449 List.475 List.476 List.477 List.478 List.479;

procedure Num.125 (#Attr.2):
    let Num.265 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.265;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.268 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.268;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.266 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.266;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.269 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.269;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.267 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.267;

procedure Str.12 (#Attr.2):
    let Str.280 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.280;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.274 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.274;

procedure Str.9 (Str.76):
    let Str.272 : U64 = 0i64;
    let Str.273 : U64 = CallByName List.6 Str.76;
    let Str.77 : {U64, Str, Int1, U8} = CallByName Str.48 Str.76 Str.272 Str.273;
    let Str.269 : Int1 = StructAtIndex 2 Str.77;
    if Str.269 then
        let Str.271 : Str = StructAtIndex 1 Str.77;
        inc Str.271;
        dec Str.77;
        let Str.270 : [C {U64, U8}, C Str] = TagId(1) Str.271;
        ret Str.270;
    else
        let Str.267 : U8 = StructAtIndex 3 Str.77;
        let Str.268 : U64 = StructAtIndex 0 Str.77;
        dec Str.77;
        let Str.266 : {U64, U8} = Struct {Str.268, Str.267};
        let Str.265 : [C {U64, U8}, C Str] = TagId(0) Str.266;
        ret Str.265;

procedure Test.0 ():
    let Test.12 : Str = "foo";
    let Test.11 : {} = CallByName Json.1;
    let Test.10 : List U8 = CallByName Encode.25 Test.12 Test.11;
    let Test.2 : [C {U64, U8}, C Str] = CallByName Str.9 Test.10;
    let Test.7 : U8 = 1i64;
    let Test.8 : U8 = GetTagId Test.2;
    let Test.9 : Int1 = lowlevel Eq Test.7 Test.8;
    if Test.9 then
        let Test.4 : Str = UnionAtIndex (Id 1) (Index 0) Test.2;
        inc Test.4;
        dec Test.2;
        ret Test.4;
    else
        dec Test.2;
        let Test.6 : Str = "<bad>";
        ret Test.6;
