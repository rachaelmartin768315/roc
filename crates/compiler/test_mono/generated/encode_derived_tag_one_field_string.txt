procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.4, #Derived.5, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.4 #Derived_gen.4 #Derived.5;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName TotallyNotJson.25 #Derived.1;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9];
    let #Derived_gen.6 : {Str, List Str} = CallByName TotallyNotJson.32 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.3 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.113 : List U8 = CallByName TotallyNotJson.264 Encode.99 Encode.101 Encode.107;
    ret Encode.113;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.116 : List U8 = CallByName TotallyNotJson.182 Encode.99 Encode.101 Encode.107;
    ret Encode.116;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : Str = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure List.145 (List.146, List.147, List.144):
    let List.568 : {List U8, U64} = CallByName TotallyNotJson.267 List.146 List.147 List.144;
    ret List.568;

procedure List.145 (List.146, List.147, List.144):
    let List.588 : List U8 = CallByName TotallyNotJson.215 List.146 List.147;
    ret List.588;

procedure List.18 (List.142, List.143, List.144):
    let List.549 : {List U8, U64} = CallByName List.93 List.142 List.143 List.144;
    ret List.549;

procedure List.18 (List.142, List.143, List.144):
    let List.569 : List U8 = CallByName List.93 List.142 List.143 List.144;
    ret List.569;

procedure List.26 (List.159, List.160, List.161):
    let List.619 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.93 List.159 List.160 List.161;
    let List.622 : U8 = 1i64;
    let List.623 : U8 = GetTagId List.619;
    let List.624 : Int1 = lowlevel Eq List.622 List.623;
    if List.624 then
        let List.162 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.619;
        ret List.162;
    else
        let List.163 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.619;
        ret List.163;

procedure List.4 (List.113, List.114):
    let List.548 : U64 = 1i64;
    let List.547 : List U8 = CallByName List.70 List.113 List.548;
    let List.546 : List U8 = CallByName List.71 List.547 List.114;
    ret List.546;

procedure List.49 (List.377, List.378):
    let List.611 : U64 = StructAtIndex 0 List.378;
    let List.612 : U64 = 0i64;
    let List.609 : Int1 = CallByName Bool.11 List.611 List.612;
    if List.609 then
        dec List.377;
        let List.610 : List U8 = Array [];
        ret List.610;
    else
        let List.606 : U64 = StructAtIndex 1 List.378;
        let List.607 : U64 = StructAtIndex 0 List.378;
        let List.605 : List U8 = CallByName List.72 List.377 List.606 List.607;
        ret List.605;

procedure List.52 (List.392, List.393):
    let List.394 : U64 = CallByName List.6 List.392;
    joinpoint List.617 List.395:
        let List.615 : U64 = 0i64;
        let List.614 : {U64, U64} = Struct {List.395, List.615};
        inc List.392;
        let List.396 : List U8 = CallByName List.49 List.392 List.614;
        let List.613 : U64 = CallByName Num.75 List.394 List.395;
        let List.604 : {U64, U64} = Struct {List.613, List.395};
        let List.397 : List U8 = CallByName List.49 List.392 List.604;
        let List.603 : {List U8, List U8} = Struct {List.396, List.397};
        ret List.603;
    in
    let List.618 : Int1 = CallByName Num.24 List.394 List.393;
    if List.618 then
        jump List.617 List.393;
    else
        jump List.617 List.394;

procedure List.6 (#Attr.2):
    let List.589 : U64 = lowlevel ListLen #Attr.2;
    ret List.589;

procedure List.6 (#Attr.2):
    let List.591 : U64 = lowlevel ListLen #Attr.2;
    ret List.591;

procedure List.66 (#Attr.2, #Attr.3):
    let List.565 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.565;

procedure List.66 (#Attr.2, #Attr.3):
    let List.585 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.585;

procedure List.68 (#Attr.2):
    let List.602 : List U8 = lowlevel ListWithCapacity #Attr.2;
    ret List.602;

procedure List.70 (#Attr.2, #Attr.3):
    let List.527 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.527;

procedure List.71 (#Attr.2, #Attr.3):
    let List.525 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.525;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.608 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.608;

procedure List.8 (#Attr.2, #Attr.3):
    let List.600 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.600;

procedure List.80 (#Derived_gen.16, #Derived_gen.17, #Derived_gen.18, #Derived_gen.19, #Derived_gen.20):
    joinpoint List.575 List.440 List.441 List.442 List.443 List.444:
        let List.577 : Int1 = CallByName Num.22 List.443 List.444;
        if List.577 then
            let List.584 : U8 = CallByName List.66 List.440 List.443;
            let List.578 : List U8 = CallByName List.145 List.441 List.584 List.442;
            let List.581 : U64 = 1i64;
            let List.580 : U64 = CallByName Num.51 List.443 List.581;
            jump List.575 List.440 List.578 List.442 List.580 List.444;
        else
            dec List.440;
            ret List.441;
    in
    jump List.575 #Derived_gen.16 #Derived_gen.17 #Derived_gen.18 #Derived_gen.19 #Derived_gen.20;

procedure List.80 (#Derived_gen.21, #Derived_gen.22, #Derived_gen.23, #Derived_gen.24, #Derived_gen.25):
    joinpoint List.628 List.440 List.441 List.442 List.443 List.444:
        let List.630 : Int1 = CallByName Num.22 List.443 List.444;
        if List.630 then
            let List.639 : U8 = CallByName List.66 List.440 List.443;
            let List.631 : [C {U64, Int1}, C {U64, Int1}] = CallByName TotallyNotJson.189 List.441 List.639;
            let List.636 : U8 = 1i64;
            let List.637 : U8 = GetTagId List.631;
            let List.638 : Int1 = lowlevel Eq List.636 List.637;
            if List.638 then
                let List.445 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.631;
                let List.634 : U64 = 1i64;
                let List.633 : U64 = CallByName Num.51 List.443 List.634;
                jump List.628 List.440 List.445 List.442 List.633 List.444;
            else
                dec List.440;
                let List.446 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.631;
                let List.635 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) List.446;
                ret List.635;
        else
            dec List.440;
            let List.629 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) List.441;
            ret List.629;
    in
    jump List.628 #Derived_gen.21 #Derived_gen.22 #Derived_gen.23 #Derived_gen.24 #Derived_gen.25;

procedure List.80 (#Derived_gen.29, #Derived_gen.30, #Derived_gen.31, #Derived_gen.32, #Derived_gen.33):
    joinpoint List.555 List.440 List.441 List.442 List.443 List.444:
        let List.557 : Int1 = CallByName Num.22 List.443 List.444;
        if List.557 then
            let List.564 : Str = CallByName List.66 List.440 List.443;
            inc List.564;
            let List.558 : {List U8, U64} = CallByName List.145 List.441 List.564 List.442;
            let List.561 : U64 = 1i64;
            let List.560 : U64 = CallByName Num.51 List.443 List.561;
            jump List.555 List.440 List.558 List.442 List.560 List.444;
        else
            dec List.440;
            ret List.441;
    in
    jump List.555 #Derived_gen.29 #Derived_gen.30 #Derived_gen.31 #Derived_gen.32 #Derived_gen.33;

procedure List.93 (List.437, List.438, List.439):
    let List.553 : U64 = 0i64;
    let List.554 : U64 = CallByName List.6 List.437;
    let List.552 : {List U8, U64} = CallByName List.80 List.437 List.438 List.439 List.553 List.554;
    ret List.552;

procedure List.93 (List.437, List.438, List.439):
    let List.573 : U64 = 0i64;
    let List.574 : U64 = CallByName List.6 List.437;
    let List.572 : List U8 = CallByName List.80 List.437 List.438 List.439 List.573 List.574;
    ret List.572;

procedure List.93 (List.437, List.438, List.439):
    let List.626 : U64 = 0i64;
    let List.627 : U64 = CallByName List.6 List.437;
    let List.625 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.80 List.437 List.438 List.439 List.626 List.627;
    ret List.625;

procedure Num.127 (#Attr.2):
    let Num.299 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.299;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.303 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.303;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.300 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.300;

procedure Num.21 (#Attr.2, #Attr.3):
    let Num.305 : U64 = lowlevel NumMul #Attr.2 #Attr.3;
    ret Num.305;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.311 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.311;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.313 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.313;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.308 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.308;

procedure Num.75 (#Attr.2, #Attr.3):
    let Num.312 : U64 = lowlevel NumSubWrap #Attr.2 #Attr.3;
    ret Num.312;

procedure Num.94 (#Attr.2, #Attr.3):
    let Num.304 : U64 = lowlevel NumDivCeilUnchecked #Attr.2 #Attr.3;
    ret Num.304;

procedure Str.12 (#Attr.2):
    let Str.300 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.300;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.298 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.298;

procedure Str.9 (Str.79):
    let Str.296 : U64 = 0i64;
    let Str.297 : U64 = CallByName List.6 Str.79;
    let Str.80 : {U64, Str, Int1, U8} = CallByName Str.48 Str.79 Str.296 Str.297;
    let Str.293 : Int1 = StructAtIndex 2 Str.80;
    if Str.293 then
        let Str.295 : Str = StructAtIndex 1 Str.80;
        let Str.294 : [C {U64, U8}, C Str] = TagId(1) Str.295;
        ret Str.294;
    else
        let Str.291 : U8 = StructAtIndex 3 Str.80;
        let Str.292 : U64 = StructAtIndex 0 Str.80;
        let #Derived_gen.34 : Str = StructAtIndex 1 Str.80;
        dec #Derived_gen.34;
        let Str.290 : {U64, U8} = Struct {Str.292, Str.291};
        let Str.289 : [C {U64, U8}, C Str] = TagId(0) Str.290;
        ret Str.289;

procedure TotallyNotJson.182 (TotallyNotJson.183, TotallyNotJson.1216, TotallyNotJson.181):
    let TotallyNotJson.1219 : List U8 = CallByName TotallyNotJson.26 TotallyNotJson.181;
    let TotallyNotJson.1218 : List U8 = CallByName List.8 TotallyNotJson.183 TotallyNotJson.1219;
    ret TotallyNotJson.1218;

procedure TotallyNotJson.189 (TotallyNotJson.1267, TotallyNotJson.192):
    let TotallyNotJson.190 : U64 = StructAtIndex 0 TotallyNotJson.1267;
    let TotallyNotJson.191 : Int1 = StructAtIndex 1 TotallyNotJson.1267;
    switch TotallyNotJson.192:
        case 34:
            let TotallyNotJson.1270 : Int1 = false;
            let TotallyNotJson.1269 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1270};
            let TotallyNotJson.1268 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1269;
            ret TotallyNotJson.1268;
    
        case 92:
            let TotallyNotJson.1273 : Int1 = false;
            let TotallyNotJson.1272 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1273};
            let TotallyNotJson.1271 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1272;
            ret TotallyNotJson.1271;
    
        case 47:
            let TotallyNotJson.1276 : Int1 = false;
            let TotallyNotJson.1275 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1276};
            let TotallyNotJson.1274 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1275;
            ret TotallyNotJson.1274;
    
        case 8:
            let TotallyNotJson.1279 : Int1 = false;
            let TotallyNotJson.1278 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1279};
            let TotallyNotJson.1277 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1278;
            ret TotallyNotJson.1277;
    
        case 12:
            let TotallyNotJson.1282 : Int1 = false;
            let TotallyNotJson.1281 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1282};
            let TotallyNotJson.1280 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1281;
            ret TotallyNotJson.1280;
    
        case 10:
            let TotallyNotJson.1285 : Int1 = false;
            let TotallyNotJson.1284 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1285};
            let TotallyNotJson.1283 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1284;
            ret TotallyNotJson.1283;
    
        case 13:
            let TotallyNotJson.1288 : Int1 = false;
            let TotallyNotJson.1287 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1288};
            let TotallyNotJson.1286 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1287;
            ret TotallyNotJson.1286;
    
        case 9:
            let TotallyNotJson.1291 : Int1 = false;
            let TotallyNotJson.1290 : {U64, Int1} = Struct {TotallyNotJson.190, TotallyNotJson.1291};
            let TotallyNotJson.1289 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1290;
            ret TotallyNotJson.1289;
    
        default:
            let TotallyNotJson.1295 : U64 = 1i64;
            let TotallyNotJson.1294 : U64 = CallByName Num.19 TotallyNotJson.190 TotallyNotJson.1295;
            let TotallyNotJson.1293 : {U64, Int1} = Struct {TotallyNotJson.1294, TotallyNotJson.191};
            let TotallyNotJson.1292 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) TotallyNotJson.1293;
            ret TotallyNotJson.1292;
    

procedure TotallyNotJson.2 ():
    let TotallyNotJson.1172 : [C , C [], C , C , C , C ] = TagId(2) ;
    ret TotallyNotJson.1172;

procedure TotallyNotJson.215 (TotallyNotJson.216, TotallyNotJson.217):
    let TotallyNotJson.1238 : List U8 = CallByName TotallyNotJson.27 TotallyNotJson.217;
    let TotallyNotJson.1237 : List U8 = CallByName List.8 TotallyNotJson.216 TotallyNotJson.1238;
    ret TotallyNotJson.1237;

procedure TotallyNotJson.25 (TotallyNotJson.181):
    let TotallyNotJson.1214 : Str = CallByName Encode.23 TotallyNotJson.181;
    ret TotallyNotJson.1214;

procedure TotallyNotJson.26 (TotallyNotJson.184):
    let TotallyNotJson.185 : List U8 = CallByName Str.12 TotallyNotJson.184;
    let TotallyNotJson.1296 : U64 = 0i64;
    let TotallyNotJson.1297 : Int1 = true;
    let TotallyNotJson.186 : {U64, Int1} = Struct {TotallyNotJson.1296, TotallyNotJson.1297};
    let TotallyNotJson.1266 : {} = Struct {};
    inc TotallyNotJson.185;
    let TotallyNotJson.187 : {U64, Int1} = CallByName List.26 TotallyNotJson.185 TotallyNotJson.186 TotallyNotJson.1266;
    let TotallyNotJson.1220 : Int1 = StructAtIndex 1 TotallyNotJson.187;
    let TotallyNotJson.1264 : Int1 = true;
    let TotallyNotJson.1265 : Int1 = lowlevel Eq TotallyNotJson.1264 TotallyNotJson.1220;
    if TotallyNotJson.1265 then
        let TotallyNotJson.1230 : U64 = CallByName List.6 TotallyNotJson.185;
        let TotallyNotJson.1231 : U64 = 2i64;
        let TotallyNotJson.1229 : U64 = CallByName Num.19 TotallyNotJson.1230 TotallyNotJson.1231;
        let TotallyNotJson.1226 : List U8 = CallByName List.68 TotallyNotJson.1229;
        let TotallyNotJson.1228 : U8 = 34i64;
        let TotallyNotJson.1227 : List U8 = Array [TotallyNotJson.1228];
        let TotallyNotJson.1225 : List U8 = CallByName List.8 TotallyNotJson.1226 TotallyNotJson.1227;
        let TotallyNotJson.1222 : List U8 = CallByName List.8 TotallyNotJson.1225 TotallyNotJson.185;
        let TotallyNotJson.1224 : U8 = 34i64;
        let TotallyNotJson.1223 : List U8 = Array [TotallyNotJson.1224];
        let TotallyNotJson.1221 : List U8 = CallByName List.8 TotallyNotJson.1222 TotallyNotJson.1223;
        ret TotallyNotJson.1221;
    else
        inc TotallyNotJson.185;
        let TotallyNotJson.1263 : U64 = StructAtIndex 0 TotallyNotJson.187;
        let TotallyNotJson.1262 : {List U8, List U8} = CallByName List.52 TotallyNotJson.185 TotallyNotJson.1263;
        let TotallyNotJson.211 : List U8 = StructAtIndex 0 TotallyNotJson.1262;
        let TotallyNotJson.213 : List U8 = StructAtIndex 1 TotallyNotJson.1262;
        let TotallyNotJson.1260 : U64 = CallByName List.6 TotallyNotJson.185;
        dec TotallyNotJson.185;
        let TotallyNotJson.1261 : U64 = 120i64;
        let TotallyNotJson.1258 : U64 = CallByName Num.21 TotallyNotJson.1260 TotallyNotJson.1261;
        let TotallyNotJson.1259 : U64 = 100i64;
        let TotallyNotJson.1257 : U64 = CallByName Num.94 TotallyNotJson.1258 TotallyNotJson.1259;
        let TotallyNotJson.1254 : List U8 = CallByName List.68 TotallyNotJson.1257;
        let TotallyNotJson.1256 : U8 = 34i64;
        let TotallyNotJson.1255 : List U8 = Array [TotallyNotJson.1256];
        let TotallyNotJson.1253 : List U8 = CallByName List.8 TotallyNotJson.1254 TotallyNotJson.1255;
        let TotallyNotJson.214 : List U8 = CallByName List.8 TotallyNotJson.1253 TotallyNotJson.211;
        let TotallyNotJson.1236 : {} = Struct {};
        let TotallyNotJson.1233 : List U8 = CallByName List.18 TotallyNotJson.213 TotallyNotJson.214 TotallyNotJson.1236;
        let TotallyNotJson.1235 : U8 = 34i64;
        let TotallyNotJson.1234 : List U8 = Array [TotallyNotJson.1235];
        let TotallyNotJson.1232 : List U8 = CallByName List.8 TotallyNotJson.1233 TotallyNotJson.1234;
        ret TotallyNotJson.1232;

procedure TotallyNotJson.264 (TotallyNotJson.265, TotallyNotJson.1175, #Attr.12):
    let TotallyNotJson.263 : List Str = StructAtIndex 1 #Attr.12;
    let TotallyNotJson.262 : Str = StructAtIndex 0 #Attr.12;
    let TotallyNotJson.1213 : I64 = 123i64;
    let TotallyNotJson.1212 : U8 = CallByName Num.127 TotallyNotJson.1213;
    let TotallyNotJson.1209 : List U8 = CallByName List.4 TotallyNotJson.265 TotallyNotJson.1212;
    let TotallyNotJson.1211 : I64 = 34i64;
    let TotallyNotJson.1210 : U8 = CallByName Num.127 TotallyNotJson.1211;
    let TotallyNotJson.1207 : List U8 = CallByName List.4 TotallyNotJson.1209 TotallyNotJson.1210;
    let TotallyNotJson.1208 : List U8 = CallByName Str.12 TotallyNotJson.262;
    let TotallyNotJson.1204 : List U8 = CallByName List.8 TotallyNotJson.1207 TotallyNotJson.1208;
    let TotallyNotJson.1206 : I64 = 34i64;
    let TotallyNotJson.1205 : U8 = CallByName Num.127 TotallyNotJson.1206;
    let TotallyNotJson.1201 : List U8 = CallByName List.4 TotallyNotJson.1204 TotallyNotJson.1205;
    let TotallyNotJson.1203 : I64 = 58i64;
    let TotallyNotJson.1202 : U8 = CallByName Num.127 TotallyNotJson.1203;
    let TotallyNotJson.1198 : List U8 = CallByName List.4 TotallyNotJson.1201 TotallyNotJson.1202;
    let TotallyNotJson.1200 : I64 = 91i64;
    let TotallyNotJson.1199 : U8 = CallByName Num.127 TotallyNotJson.1200;
    let TotallyNotJson.268 : List U8 = CallByName List.4 TotallyNotJson.1198 TotallyNotJson.1199;
    let TotallyNotJson.1197 : U64 = CallByName List.6 TotallyNotJson.263;
    let TotallyNotJson.1185 : {List U8, U64} = Struct {TotallyNotJson.268, TotallyNotJson.1197};
    let TotallyNotJson.1184 : {List U8, U64} = CallByName List.18 TotallyNotJson.263 TotallyNotJson.1185 TotallyNotJson.1175;
    let TotallyNotJson.270 : List U8 = StructAtIndex 0 TotallyNotJson.1184;
    let TotallyNotJson.1183 : I64 = 93i64;
    let TotallyNotJson.1182 : U8 = CallByName Num.127 TotallyNotJson.1183;
    let TotallyNotJson.1179 : List U8 = CallByName List.4 TotallyNotJson.270 TotallyNotJson.1182;
    let TotallyNotJson.1181 : I64 = 125i64;
    let TotallyNotJson.1180 : U8 = CallByName Num.127 TotallyNotJson.1181;
    let TotallyNotJson.1178 : List U8 = CallByName List.4 TotallyNotJson.1179 TotallyNotJson.1180;
    ret TotallyNotJson.1178;

procedure TotallyNotJson.267 (TotallyNotJson.1177, TotallyNotJson.273, TotallyNotJson.266):
    let TotallyNotJson.271 : List U8 = StructAtIndex 0 TotallyNotJson.1177;
    let TotallyNotJson.272 : U64 = StructAtIndex 1 TotallyNotJson.1177;
    let TotallyNotJson.274 : List U8 = CallByName Encode.24 TotallyNotJson.271 TotallyNotJson.273 TotallyNotJson.266;
    joinpoint TotallyNotJson.1191 TotallyNotJson.275:
        let TotallyNotJson.1189 : U64 = 1i64;
        let TotallyNotJson.1188 : U64 = CallByName Num.20 TotallyNotJson.272 TotallyNotJson.1189;
        let TotallyNotJson.1187 : {List U8, U64} = Struct {TotallyNotJson.275, TotallyNotJson.1188};
        ret TotallyNotJson.1187;
    in
    let TotallyNotJson.1195 : U64 = 1i64;
    let TotallyNotJson.1192 : Int1 = CallByName Num.24 TotallyNotJson.272 TotallyNotJson.1195;
    if TotallyNotJson.1192 then
        let TotallyNotJson.1194 : I64 = 44i64;
        let TotallyNotJson.1193 : U8 = CallByName Num.127 TotallyNotJson.1194;
        let TotallyNotJson.1190 : List U8 = CallByName List.4 TotallyNotJson.274 TotallyNotJson.1193;
        jump TotallyNotJson.1191 TotallyNotJson.1190;
    else
        jump TotallyNotJson.1191 TotallyNotJson.274;

procedure TotallyNotJson.27 (TotallyNotJson.218):
    switch TotallyNotJson.218:
        case 34:
            let TotallyNotJson.1239 : List U8 = Array [92i64, 34i64];
            ret TotallyNotJson.1239;
    
        case 92:
            let TotallyNotJson.1240 : List U8 = Array [92i64, 92i64];
            ret TotallyNotJson.1240;
    
        case 47:
            let TotallyNotJson.1241 : List U8 = Array [92i64, 47i64];
            ret TotallyNotJson.1241;
    
        case 8:
            let TotallyNotJson.1243 : U8 = 98i64;
            let TotallyNotJson.1242 : List U8 = Array [92i64, TotallyNotJson.1243];
            ret TotallyNotJson.1242;
    
        case 12:
            let TotallyNotJson.1245 : U8 = 102i64;
            let TotallyNotJson.1244 : List U8 = Array [92i64, TotallyNotJson.1245];
            ret TotallyNotJson.1244;
    
        case 10:
            let TotallyNotJson.1247 : U8 = 110i64;
            let TotallyNotJson.1246 : List U8 = Array [92i64, TotallyNotJson.1247];
            ret TotallyNotJson.1246;
    
        case 13:
            let TotallyNotJson.1249 : U8 = 114i64;
            let TotallyNotJson.1248 : List U8 = Array [92i64, TotallyNotJson.1249];
            ret TotallyNotJson.1248;
    
        case 9:
            let TotallyNotJson.1251 : U8 = 114i64;
            let TotallyNotJson.1250 : List U8 = Array [92i64, TotallyNotJson.1251];
            ret TotallyNotJson.1250;
    
        default:
            let TotallyNotJson.1252 : List U8 = Array [TotallyNotJson.218];
            ret TotallyNotJson.1252;
    

procedure TotallyNotJson.32 (TotallyNotJson.262, TotallyNotJson.263):
    let TotallyNotJson.1174 : {Str, List Str} = Struct {TotallyNotJson.262, TotallyNotJson.263};
    let TotallyNotJson.1173 : {Str, List Str} = CallByName Encode.23 TotallyNotJson.1174;
    ret TotallyNotJson.1173;

procedure Test.0 ():
    let Test.12 : Str = "foo";
    let Test.11 : [C , C [], C , C , C , C ] = CallByName TotallyNotJson.2;
    let Test.10 : List U8 = CallByName Encode.26 Test.12 Test.11;
    let Test.2 : [C {U64, U8}, C Str] = CallByName Str.9 Test.10;
    let Test.7 : U8 = 1i64;
    let Test.8 : U8 = GetTagId Test.2;
    let Test.9 : Int1 = lowlevel Eq Test.7 Test.8;
    if Test.9 then
        let Test.4 : Str = UnionAtIndex (Id 1) (Index 0) Test.2;
        ret Test.4;
    else
        dec Test.2;
        let Test.6 : Str = "<bad>";
        ret Test.6;
