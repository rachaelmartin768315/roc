procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.4, #Derived.5, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.4 #Derived_gen.4 #Derived.5;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName TotallyNotJson.25 #Derived.1;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9];
    let #Derived_gen.6 : {Str, List Str} = CallByName TotallyNotJson.31 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.3 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.113 : List U8 = CallByName TotallyNotJson.228 Encode.99 Encode.101 Encode.107;
    ret Encode.113;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.116 : List U8 = CallByName TotallyNotJson.150 Encode.99 Encode.101 Encode.107;
    ret Encode.116;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : Str = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure List.103 (List.487, List.488, List.489):
    let List.656 : U64 = 0i64;
    let List.657 : U64 = CallByName List.6 List.487;
    let List.655 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.80 List.487 List.488 List.489 List.656 List.657;
    ret List.655;

procedure List.18 (List.159, List.160, List.161):
    let List.600 : U64 = 0i64;
    let List.601 : U64 = CallByName List.6 List.159;
    let List.599 : {List U8, U64} = CallByName List.91 List.159 List.160 List.161 List.600 List.601;
    ret List.599;

procedure List.18 (List.159, List.160, List.161):
    let List.612 : U64 = 0i64;
    let List.613 : U64 = CallByName List.6 List.159;
    let List.611 : List U8 = CallByName List.91 List.159 List.160 List.161 List.612 List.613;
    ret List.611;

procedure List.26 (List.200, List.201, List.202):
    let List.649 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.103 List.200 List.201 List.202;
    let List.652 : U8 = 1i64;
    let List.653 : U8 = GetTagId List.649;
    let List.654 : Int1 = lowlevel Eq List.652 List.653;
    if List.654 then
        let List.203 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.649;
        ret List.203;
    else
        let List.204 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.649;
        ret List.204;

procedure List.4 (List.123, List.124):
    let List.598 : U64 = 1i64;
    let List.597 : List U8 = CallByName List.70 List.123 List.598;
    let List.596 : List U8 = CallByName List.71 List.597 List.124;
    ret List.596;

procedure List.49 (List.419, List.420):
    let List.640 : U64 = StructAtIndex 1 List.420;
    let List.641 : U64 = StructAtIndex 0 List.420;
    let List.639 : List U8 = CallByName List.72 List.419 List.640 List.641;
    ret List.639;

procedure List.52 (List.434, List.435):
    let List.436 : U64 = CallByName List.6 List.434;
    joinpoint List.647 List.437:
        let List.645 : U64 = 0i64;
        let List.644 : {U64, U64} = Struct {List.437, List.645};
        inc List.434;
        let List.438 : List U8 = CallByName List.49 List.434 List.644;
        let List.643 : U64 = CallByName Num.75 List.436 List.437;
        let List.638 : {U64, U64} = Struct {List.643, List.437};
        let List.439 : List U8 = CallByName List.49 List.434 List.638;
        let List.637 : {List U8, List U8} = Struct {List.438, List.439};
        ret List.637;
    in
    let List.648 : Int1 = CallByName Num.24 List.436 List.435;
    if List.648 then
        jump List.647 List.435;
    else
        jump List.647 List.436;

procedure List.6 (#Attr.2):
    let List.623 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.623;

procedure List.6 (#Attr.2):
    let List.625 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.625;

procedure List.66 (#Attr.2, #Attr.3):
    let List.609 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.609;

procedure List.66 (#Attr.2, #Attr.3):
    let List.621 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.621;

procedure List.68 (#Attr.2):
    let List.636 : List U8 = lowlevel ListWithCapacity #Attr.2;
    ret List.636;

procedure List.70 (#Attr.2, #Attr.3):
    let List.577 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.577;

procedure List.71 (#Attr.2, #Attr.3):
    let List.575 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.575;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.642 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.642;

procedure List.8 (#Attr.2, #Attr.3):
    let List.634 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.634;

procedure List.80 (#Derived_gen.26, #Derived_gen.27, #Derived_gen.28, #Derived_gen.29, #Derived_gen.30):
    joinpoint List.658 List.490 List.491 List.492 List.493 List.494:
        let List.660 : Int1 = CallByName Num.22 List.493 List.494;
        if List.660 then
            let List.669 : U8 = CallByName List.66 List.490 List.493;
            let List.661 : [C {U64, Int1}, C {U64, Int1}] = CallByName TotallyNotJson.157 List.491 List.669;
            let List.666 : U8 = 1i64;
            let List.667 : U8 = GetTagId List.661;
            let List.668 : Int1 = lowlevel Eq List.666 List.667;
            if List.668 then
                let List.495 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.661;
                let List.664 : U64 = 1i64;
                let List.663 : U64 = CallByName Num.51 List.493 List.664;
                jump List.658 List.490 List.495 List.492 List.663 List.494;
            else
                dec List.490;
                let List.496 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.661;
                let List.665 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) List.496;
                ret List.665;
        else
            dec List.490;
            let List.659 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) List.491;
            ret List.659;
    in
    jump List.658 #Derived_gen.26 #Derived_gen.27 #Derived_gen.28 #Derived_gen.29 #Derived_gen.30;

procedure List.91 (#Derived_gen.13, #Derived_gen.14, #Derived_gen.15, #Derived_gen.16, #Derived_gen.17):
    joinpoint List.614 List.162 List.163 List.164 List.165 List.166:
        let List.616 : Int1 = CallByName Num.22 List.165 List.166;
        if List.616 then
            let List.620 : U8 = CallByName List.66 List.162 List.165;
            let List.167 : List U8 = CallByName TotallyNotJson.183 List.163 List.620;
            let List.619 : U64 = 1i64;
            let List.618 : U64 = CallByName Num.51 List.165 List.619;
            jump List.614 List.162 List.167 List.164 List.618 List.166;
        else
            dec List.162;
            ret List.163;
    in
    jump List.614 #Derived_gen.13 #Derived_gen.14 #Derived_gen.15 #Derived_gen.16 #Derived_gen.17;

procedure List.91 (#Derived_gen.18, #Derived_gen.19, #Derived_gen.20, #Derived_gen.21, #Derived_gen.22):
    joinpoint List.602 List.162 List.163 List.164 List.165 List.166:
        let List.604 : Int1 = CallByName Num.22 List.165 List.166;
        if List.604 then
            let List.608 : Str = CallByName List.66 List.162 List.165;
            inc List.608;
            let List.167 : {List U8, U64} = CallByName TotallyNotJson.230 List.163 List.608;
            let List.607 : U64 = 1i64;
            let List.606 : U64 = CallByName Num.51 List.165 List.607;
            jump List.602 List.162 List.167 List.164 List.606 List.166;
        else
            dec List.162;
            ret List.163;
    in
    jump List.602 #Derived_gen.18 #Derived_gen.19 #Derived_gen.20 #Derived_gen.21 #Derived_gen.22;

procedure Num.127 (#Attr.2):
    let Num.274 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.274;

procedure Num.137 (#Attr.2, #Attr.3):
    let Num.279 : U64 = lowlevel NumDivCeilUnchecked #Attr.2 #Attr.3;
    ret Num.279;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.278 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.278;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.275 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.275;

procedure Num.21 (#Attr.2, #Attr.3):
    let Num.280 : U64 = lowlevel NumMul #Attr.2 #Attr.3;
    ret Num.280;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.288 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.75 (#Attr.2, #Attr.3):
    let Num.287 : U64 = lowlevel NumSubWrap #Attr.2 #Attr.3;
    ret Num.287;

procedure Str.12 (#Attr.2):
    let Str.260 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.260;

procedure Str.43 (#Attr.2, #Attr.3, #Attr.4):
    let Str.258 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.258;

procedure Str.9 (Str.67):
    let Str.256 : U64 = 0i64;
    let Str.257 : U64 = CallByName List.6 Str.67;
    let Str.68 : {U64, Str, Int1, U8} = CallByName Str.43 Str.67 Str.256 Str.257;
    let Str.253 : Int1 = StructAtIndex 2 Str.68;
    if Str.253 then
        let Str.255 : Str = StructAtIndex 1 Str.68;
        let Str.254 : [C {U64, U8}, C Str] = TagId(1) Str.255;
        ret Str.254;
    else
        let Str.251 : U8 = StructAtIndex 3 Str.68;
        let Str.252 : U64 = StructAtIndex 0 Str.68;
        let #Derived_gen.34 : Str = StructAtIndex 1 Str.68;
        dec #Derived_gen.34;
        let Str.250 : {U64, U8} = Struct {Str.252, Str.251};
        let Str.249 : [C {U64, U8}, C Str] = TagId(0) Str.250;
        ret Str.249;

procedure TotallyNotJson.150 (TotallyNotJson.151, TotallyNotJson.1014, TotallyNotJson.149):
    let TotallyNotJson.1017 : List U8 = CallByName TotallyNotJson.26 TotallyNotJson.149;
    let TotallyNotJson.1016 : List U8 = CallByName List.8 TotallyNotJson.151 TotallyNotJson.1017;
    ret TotallyNotJson.1016;

procedure TotallyNotJson.157 (TotallyNotJson.1065, TotallyNotJson.160):
    let TotallyNotJson.158 : U64 = StructAtIndex 0 TotallyNotJson.1065;
    let TotallyNotJson.159 : Int1 = StructAtIndex 1 TotallyNotJson.1065;
    switch TotallyNotJson.160:
        case 34:
            let TotallyNotJson.1068 : Int1 = false;
            let TotallyNotJson.1067 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1068};
            let TotallyNotJson.1066 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1067;
            ret TotallyNotJson.1066;
    
        case 92:
            let TotallyNotJson.1071 : Int1 = false;
            let TotallyNotJson.1070 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1071};
            let TotallyNotJson.1069 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1070;
            ret TotallyNotJson.1069;
    
        case 47:
            let TotallyNotJson.1074 : Int1 = false;
            let TotallyNotJson.1073 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1074};
            let TotallyNotJson.1072 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1073;
            ret TotallyNotJson.1072;
    
        case 8:
            let TotallyNotJson.1077 : Int1 = false;
            let TotallyNotJson.1076 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1077};
            let TotallyNotJson.1075 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1076;
            ret TotallyNotJson.1075;
    
        case 12:
            let TotallyNotJson.1080 : Int1 = false;
            let TotallyNotJson.1079 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1080};
            let TotallyNotJson.1078 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1079;
            ret TotallyNotJson.1078;
    
        case 10:
            let TotallyNotJson.1083 : Int1 = false;
            let TotallyNotJson.1082 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1083};
            let TotallyNotJson.1081 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1082;
            ret TotallyNotJson.1081;
    
        case 13:
            let TotallyNotJson.1086 : Int1 = false;
            let TotallyNotJson.1085 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1086};
            let TotallyNotJson.1084 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1085;
            ret TotallyNotJson.1084;
    
        case 9:
            let TotallyNotJson.1089 : Int1 = false;
            let TotallyNotJson.1088 : {U64, Int1} = Struct {TotallyNotJson.158, TotallyNotJson.1089};
            let TotallyNotJson.1087 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) TotallyNotJson.1088;
            ret TotallyNotJson.1087;
    
        default:
            let TotallyNotJson.1093 : U64 = 1i64;
            let TotallyNotJson.1092 : U64 = CallByName Num.19 TotallyNotJson.158 TotallyNotJson.1093;
            let TotallyNotJson.1091 : {U64, Int1} = Struct {TotallyNotJson.1092, TotallyNotJson.159};
            let TotallyNotJson.1090 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) TotallyNotJson.1091;
            ret TotallyNotJson.1090;
    

procedure TotallyNotJson.183 (TotallyNotJson.184, TotallyNotJson.185):
    let TotallyNotJson.1036 : List U8 = CallByName TotallyNotJson.27 TotallyNotJson.185;
    let TotallyNotJson.1035 : List U8 = CallByName List.8 TotallyNotJson.184 TotallyNotJson.1036;
    ret TotallyNotJson.1035;

procedure TotallyNotJson.228 (TotallyNotJson.229, TotallyNotJson.973, #Attr.12):
    let TotallyNotJson.227 : List Str = StructAtIndex 1 #Attr.12;
    let TotallyNotJson.226 : Str = StructAtIndex 0 #Attr.12;
    let TotallyNotJson.1011 : I64 = 123i64;
    let TotallyNotJson.1010 : U8 = CallByName Num.127 TotallyNotJson.1011;
    let TotallyNotJson.1007 : List U8 = CallByName List.4 TotallyNotJson.229 TotallyNotJson.1010;
    let TotallyNotJson.1009 : I64 = 34i64;
    let TotallyNotJson.1008 : U8 = CallByName Num.127 TotallyNotJson.1009;
    let TotallyNotJson.1005 : List U8 = CallByName List.4 TotallyNotJson.1007 TotallyNotJson.1008;
    let TotallyNotJson.1006 : List U8 = CallByName Str.12 TotallyNotJson.226;
    let TotallyNotJson.1002 : List U8 = CallByName List.8 TotallyNotJson.1005 TotallyNotJson.1006;
    let TotallyNotJson.1004 : I64 = 34i64;
    let TotallyNotJson.1003 : U8 = CallByName Num.127 TotallyNotJson.1004;
    let TotallyNotJson.999 : List U8 = CallByName List.4 TotallyNotJson.1002 TotallyNotJson.1003;
    let TotallyNotJson.1001 : I64 = 58i64;
    let TotallyNotJson.1000 : U8 = CallByName Num.127 TotallyNotJson.1001;
    let TotallyNotJson.996 : List U8 = CallByName List.4 TotallyNotJson.999 TotallyNotJson.1000;
    let TotallyNotJson.998 : I64 = 91i64;
    let TotallyNotJson.997 : U8 = CallByName Num.127 TotallyNotJson.998;
    let TotallyNotJson.231 : List U8 = CallByName List.4 TotallyNotJson.996 TotallyNotJson.997;
    let TotallyNotJson.995 : U64 = CallByName List.6 TotallyNotJson.227;
    let TotallyNotJson.983 : {List U8, U64} = Struct {TotallyNotJson.231, TotallyNotJson.995};
    let TotallyNotJson.984 : {} = Struct {};
    let TotallyNotJson.982 : {List U8, U64} = CallByName List.18 TotallyNotJson.227 TotallyNotJson.983 TotallyNotJson.984;
    let TotallyNotJson.233 : List U8 = StructAtIndex 0 TotallyNotJson.982;
    let TotallyNotJson.981 : I64 = 93i64;
    let TotallyNotJson.980 : U8 = CallByName Num.127 TotallyNotJson.981;
    let TotallyNotJson.977 : List U8 = CallByName List.4 TotallyNotJson.233 TotallyNotJson.980;
    let TotallyNotJson.979 : I64 = 125i64;
    let TotallyNotJson.978 : U8 = CallByName Num.127 TotallyNotJson.979;
    let TotallyNotJson.976 : List U8 = CallByName List.4 TotallyNotJson.977 TotallyNotJson.978;
    ret TotallyNotJson.976;

procedure TotallyNotJson.230 (TotallyNotJson.975, TotallyNotJson.236):
    let TotallyNotJson.234 : List U8 = StructAtIndex 0 TotallyNotJson.975;
    let TotallyNotJson.235 : U64 = StructAtIndex 1 TotallyNotJson.975;
    let TotallyNotJson.994 : {} = Struct {};
    let TotallyNotJson.237 : List U8 = CallByName Encode.24 TotallyNotJson.234 TotallyNotJson.236 TotallyNotJson.994;
    joinpoint TotallyNotJson.989 TotallyNotJson.238:
        let TotallyNotJson.987 : U64 = 1i64;
        let TotallyNotJson.986 : U64 = CallByName Num.20 TotallyNotJson.235 TotallyNotJson.987;
        let TotallyNotJson.985 : {List U8, U64} = Struct {TotallyNotJson.238, TotallyNotJson.986};
        ret TotallyNotJson.985;
    in
    let TotallyNotJson.993 : U64 = 1i64;
    let TotallyNotJson.990 : Int1 = CallByName Num.24 TotallyNotJson.235 TotallyNotJson.993;
    if TotallyNotJson.990 then
        let TotallyNotJson.992 : I64 = 44i64;
        let TotallyNotJson.991 : U8 = CallByName Num.127 TotallyNotJson.992;
        let TotallyNotJson.988 : List U8 = CallByName List.4 TotallyNotJson.237 TotallyNotJson.991;
        jump TotallyNotJson.989 TotallyNotJson.988;
    else
        jump TotallyNotJson.989 TotallyNotJson.237;

procedure TotallyNotJson.25 (TotallyNotJson.149):
    let TotallyNotJson.1012 : Str = CallByName Encode.23 TotallyNotJson.149;
    ret TotallyNotJson.1012;

procedure TotallyNotJson.26 (TotallyNotJson.152):
    let TotallyNotJson.153 : List U8 = CallByName Str.12 TotallyNotJson.152;
    let TotallyNotJson.1094 : U64 = 0i64;
    let TotallyNotJson.1095 : Int1 = true;
    let TotallyNotJson.154 : {U64, Int1} = Struct {TotallyNotJson.1094, TotallyNotJson.1095};
    let TotallyNotJson.1064 : {} = Struct {};
    inc TotallyNotJson.153;
    let TotallyNotJson.155 : {U64, Int1} = CallByName List.26 TotallyNotJson.153 TotallyNotJson.154 TotallyNotJson.1064;
    let TotallyNotJson.1018 : Int1 = StructAtIndex 1 TotallyNotJson.155;
    let TotallyNotJson.1062 : Int1 = true;
    let TotallyNotJson.1063 : Int1 = lowlevel Eq TotallyNotJson.1062 TotallyNotJson.1018;
    if TotallyNotJson.1063 then
        let TotallyNotJson.1028 : U64 = CallByName List.6 TotallyNotJson.153;
        let TotallyNotJson.1029 : U64 = 2i64;
        let TotallyNotJson.1027 : U64 = CallByName Num.19 TotallyNotJson.1028 TotallyNotJson.1029;
        let TotallyNotJson.1024 : List U8 = CallByName List.68 TotallyNotJson.1027;
        let TotallyNotJson.1026 : U8 = 34i64;
        let TotallyNotJson.1025 : List U8 = Array [TotallyNotJson.1026];
        let TotallyNotJson.1023 : List U8 = CallByName List.8 TotallyNotJson.1024 TotallyNotJson.1025;
        let TotallyNotJson.1020 : List U8 = CallByName List.8 TotallyNotJson.1023 TotallyNotJson.153;
        let TotallyNotJson.1022 : U8 = 34i64;
        let TotallyNotJson.1021 : List U8 = Array [TotallyNotJson.1022];
        let TotallyNotJson.1019 : List U8 = CallByName List.8 TotallyNotJson.1020 TotallyNotJson.1021;
        ret TotallyNotJson.1019;
    else
        inc TotallyNotJson.153;
        let TotallyNotJson.1061 : U64 = StructAtIndex 0 TotallyNotJson.155;
        let TotallyNotJson.1060 : {List U8, List U8} = CallByName List.52 TotallyNotJson.153 TotallyNotJson.1061;
        let TotallyNotJson.179 : List U8 = StructAtIndex 0 TotallyNotJson.1060;
        let TotallyNotJson.181 : List U8 = StructAtIndex 1 TotallyNotJson.1060;
        let TotallyNotJson.1058 : U64 = CallByName List.6 TotallyNotJson.153;
        dec TotallyNotJson.153;
        let TotallyNotJson.1059 : U64 = 120i64;
        let TotallyNotJson.1056 : U64 = CallByName Num.21 TotallyNotJson.1058 TotallyNotJson.1059;
        let TotallyNotJson.1057 : U64 = 100i64;
        let TotallyNotJson.1055 : U64 = CallByName Num.137 TotallyNotJson.1056 TotallyNotJson.1057;
        let TotallyNotJson.1052 : List U8 = CallByName List.68 TotallyNotJson.1055;
        let TotallyNotJson.1054 : U8 = 34i64;
        let TotallyNotJson.1053 : List U8 = Array [TotallyNotJson.1054];
        let TotallyNotJson.1051 : List U8 = CallByName List.8 TotallyNotJson.1052 TotallyNotJson.1053;
        let TotallyNotJson.182 : List U8 = CallByName List.8 TotallyNotJson.1051 TotallyNotJson.179;
        let TotallyNotJson.1034 : {} = Struct {};
        let TotallyNotJson.1031 : List U8 = CallByName List.18 TotallyNotJson.181 TotallyNotJson.182 TotallyNotJson.1034;
        let TotallyNotJson.1033 : U8 = 34i64;
        let TotallyNotJson.1032 : List U8 = Array [TotallyNotJson.1033];
        let TotallyNotJson.1030 : List U8 = CallByName List.8 TotallyNotJson.1031 TotallyNotJson.1032;
        ret TotallyNotJson.1030;

procedure TotallyNotJson.27 (TotallyNotJson.186):
    switch TotallyNotJson.186:
        case 34:
            let TotallyNotJson.1037 : List U8 = Array [92i64, 34i64];
            ret TotallyNotJson.1037;
    
        case 92:
            let TotallyNotJson.1038 : List U8 = Array [92i64, 92i64];
            ret TotallyNotJson.1038;
    
        case 47:
            let TotallyNotJson.1039 : List U8 = Array [92i64, 47i64];
            ret TotallyNotJson.1039;
    
        case 8:
            let TotallyNotJson.1041 : U8 = 98i64;
            let TotallyNotJson.1040 : List U8 = Array [92i64, TotallyNotJson.1041];
            ret TotallyNotJson.1040;
    
        case 12:
            let TotallyNotJson.1043 : U8 = 102i64;
            let TotallyNotJson.1042 : List U8 = Array [92i64, TotallyNotJson.1043];
            ret TotallyNotJson.1042;
    
        case 10:
            let TotallyNotJson.1045 : U8 = 110i64;
            let TotallyNotJson.1044 : List U8 = Array [92i64, TotallyNotJson.1045];
            ret TotallyNotJson.1044;
    
        case 13:
            let TotallyNotJson.1047 : U8 = 114i64;
            let TotallyNotJson.1046 : List U8 = Array [92i64, TotallyNotJson.1047];
            ret TotallyNotJson.1046;
    
        case 9:
            let TotallyNotJson.1049 : U8 = 114i64;
            let TotallyNotJson.1048 : List U8 = Array [92i64, TotallyNotJson.1049];
            ret TotallyNotJson.1048;
    
        default:
            let TotallyNotJson.1050 : List U8 = Array [TotallyNotJson.186];
            ret TotallyNotJson.1050;
    

procedure TotallyNotJson.31 (TotallyNotJson.226, TotallyNotJson.227):
    let TotallyNotJson.972 : {Str, List Str} = Struct {TotallyNotJson.226, TotallyNotJson.227};
    let TotallyNotJson.971 : {Str, List Str} = CallByName Encode.23 TotallyNotJson.972;
    ret TotallyNotJson.971;

procedure TotallyNotJson.8 ():
    let TotallyNotJson.970 : {} = Struct {};
    ret TotallyNotJson.970;

procedure Test.0 ():
    let Test.12 : Str = "foo";
    let Test.11 : {} = CallByName TotallyNotJson.8;
    let Test.10 : List U8 = CallByName Encode.26 Test.12 Test.11;
    let Test.2 : [C {U64, U8}, C Str] = CallByName Str.9 Test.10;
    let Test.7 : U8 = 1i64;
    let Test.8 : U8 = GetTagId Test.2;
    let Test.9 : Int1 = lowlevel Eq Test.7 Test.8;
    if Test.9 then
        let Test.4 : Str = UnionAtIndex (Id 1) (Index 0) Test.2;
        ret Test.4;
    else
        dec Test.2;
        let Test.6 : Str = "<bad>";
        ret Test.6;
