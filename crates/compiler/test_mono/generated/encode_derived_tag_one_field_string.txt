procedure #Derived.0 (#Derived.1):
    let #Derived_gen.1 : {Str} = Struct {#Derived.1};
    let #Derived_gen.0 : {Str} = CallByName Encode.22 #Derived_gen.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.4, #Derived.5, #Attr.12):
    let #Derived.1 : Str = StructAtIndex 0 #Attr.12;
    inc #Derived.1;
    dec #Attr.12;
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.4 #Derived_gen.4 #Derived.5;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : {Str} = CallByName Json.17 #Derived.1;
    let #Derived_gen.8 : List {Str} = Array [#Derived_gen.9];
    let #Derived_gen.6 : {Str, List {Str}} = CallByName Json.20 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.3 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.95 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.116 : List U8 = CallByName Json.65 Encode.94 Encode.96 Encode.102;
    ret Encode.116;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : {Str} = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.106 : {} = Struct {};
    ret Json.106;

procedure Json.17 (Json.64):
    let Json.111 : {Str} = Struct {Json.64};
    let Json.110 : {Str} = CallByName Encode.22 Json.111;
    ret Json.110;

procedure Json.20 (Json.93, Json.94):
    let Json.108 : {Str, List {Str}} = Struct {Json.93, Json.94};
    let Json.107 : {Str, List {Str}} = CallByName Encode.22 Json.108;
    ret Json.107;

procedure Json.65 (Json.66, Json.112, #Attr.12):
    let Json.64 : Str = StructAtIndex 0 #Attr.12;
    inc Json.64;
    dec #Attr.12;
    let Json.159 : I32 = 34i64;
    let Json.158 : U8 = CallByName Num.123 Json.159;
    let Json.156 : List U8 = CallByName List.4 Json.66 Json.158;
    let Json.157 : List U8 = CallByName Str.12 Json.64;
    let Json.153 : List U8 = CallByName List.8 Json.156 Json.157;
    let Json.155 : I32 = 34i64;
    let Json.154 : U8 = CallByName Num.123 Json.155;
    let Json.152 : List U8 = CallByName List.4 Json.153 Json.154;
    ret Json.152;

procedure Json.95 (Json.96, Json.109, #Attr.12):
    let Json.94 : List {Str} = StructAtIndex 1 #Attr.12;
    inc Json.94;
    let Json.93 : Str = StructAtIndex 0 #Attr.12;
    inc Json.93;
    dec #Attr.12;
    let Json.150 : I32 = 123i64;
    let Json.149 : U8 = CallByName Num.123 Json.150;
    let Json.146 : List U8 = CallByName List.4 Json.96 Json.149;
    let Json.148 : I32 = 34i64;
    let Json.147 : U8 = CallByName Num.123 Json.148;
    let Json.144 : List U8 = CallByName List.4 Json.146 Json.147;
    let Json.145 : List U8 = CallByName Str.12 Json.93;
    let Json.141 : List U8 = CallByName List.8 Json.144 Json.145;
    let Json.143 : I32 = 34i64;
    let Json.142 : U8 = CallByName Num.123 Json.143;
    let Json.138 : List U8 = CallByName List.4 Json.141 Json.142;
    let Json.140 : I32 = 58i64;
    let Json.139 : U8 = CallByName Num.123 Json.140;
    let Json.135 : List U8 = CallByName List.4 Json.138 Json.139;
    let Json.137 : I32 = 91i64;
    let Json.136 : U8 = CallByName Num.123 Json.137;
    let Json.98 : List U8 = CallByName List.4 Json.135 Json.136;
    let Json.134 : U64 = CallByName List.6 Json.94;
    let Json.122 : {List U8, U64} = Struct {Json.98, Json.134};
    let Json.123 : {} = Struct {};
    let Json.121 : {List U8, U64} = CallByName List.18 Json.94 Json.122 Json.123;
    dec Json.94;
    let Json.100 : List U8 = StructAtIndex 0 Json.121;
    inc Json.100;
    dec Json.121;
    let Json.120 : I32 = 93i64;
    let Json.119 : U8 = CallByName Num.123 Json.120;
    let Json.116 : List U8 = CallByName List.4 Json.100 Json.119;
    let Json.118 : I32 = 125i64;
    let Json.117 : U8 = CallByName Num.123 Json.118;
    let Json.115 : List U8 = CallByName List.4 Json.116 Json.117;
    ret Json.115;

procedure Json.97 (Json.114, Json.103):
    let Json.101 : List U8 = StructAtIndex 0 Json.114;
    inc Json.101;
    let Json.102 : U64 = StructAtIndex 1 Json.114;
    dec Json.114;
    let Json.133 : {} = Struct {};
    let Json.104 : List U8 = CallByName Encode.23 Json.101 Json.103 Json.133;
    joinpoint Json.128 Json.105:
        let Json.126 : U64 = 1i64;
        let Json.125 : U64 = CallByName Num.20 Json.102 Json.126;
        let Json.124 : {List U8, U64} = Struct {Json.105, Json.125};
        ret Json.124;
    in
    let Json.132 : U64 = 1i64;
    let Json.129 : Int1 = CallByName Num.24 Json.102 Json.132;
    if Json.129 then
        let Json.131 : I32 = 44i64;
        let Json.130 : U8 = CallByName Num.123 Json.131;
        let Json.127 : List U8 = CallByName List.4 Json.104 Json.130;
        jump Json.128 Json.127;
    else
        jump Json.128 Json.104;

procedure List.125 (List.126, List.127, #Attr.12):
    let List.124 : {} = StructAtIndex 0 #Attr.12;
    let List.379 : {List U8, U64} = CallByName Json.97 List.126 List.127;
    let List.378 : [C [], C {List U8, U64}] = TagId(1) List.379;
    ret List.378;

procedure List.18 (List.122, List.123, List.124):
    let List.355 : {{}} = Struct {List.124};
    let List.349 : [C [], C {List U8, U64}] = CallByName List.63 List.122 List.123 List.355;
    let List.352 : U8 = 1i64;
    let List.353 : U8 = GetTagId List.349;
    let List.354 : Int1 = lowlevel Eq List.352 List.353;
    if List.354 then
        let List.129 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.349;
        inc List.129;
        dec List.349;
        ret List.129;
    else
        let List.130 : [] = UnionAtIndex (Id 0) (Index 0) List.349;
        dec List.349;
        let List.351 : {List U8, U64} = CallByName List.64 List.130;
        ret List.351;

procedure List.4 (List.93, List.94):
    let List.348 : U64 = 1i64;
    let List.347 : List U8 = CallByName List.65 List.93 List.348;
    let List.346 : List U8 = CallByName List.66 List.347 List.94;
    ret List.346;

procedure List.6 (#Attr.2):
    let List.317 : U64 = lowlevel ListLen #Attr.2;
    ret List.317;

procedure List.6 (#Attr.2):
    let List.356 : U64 = lowlevel ListLen #Attr.2;
    ret List.356;

procedure List.60 (#Attr.2, #Attr.3):
    let List.377 : {Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.377;

procedure List.63 (List.305, List.306, List.307):
    let List.363 : U64 = 0i64;
    let List.364 : U64 = CallByName List.6 List.305;
    let List.362 : [C [], C {List U8, U64}] = CallByName List.80 List.305 List.306 List.307 List.363 List.364;
    ret List.362;

procedure List.64 (#Attr.2):
    let List.361 : {List U8, U64} = lowlevel Unreachable #Attr.2;
    ret List.361;

procedure List.65 (#Attr.2, #Attr.3):
    let List.360 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.360;

procedure List.66 (#Attr.2, #Attr.3):
    let List.359 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.359;

procedure List.8 (#Attr.2, #Attr.3):
    let List.358 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.358;

procedure List.80 (List.393, List.394, List.395, List.396, List.397):
    joinpoint List.365 List.308 List.309 List.310 List.311 List.312:
        let List.367 : Int1 = CallByName Num.22 List.311 List.312;
        if List.367 then
            let List.376 : {Str} = CallByName List.60 List.308 List.311;
            let List.368 : [C [], C {List U8, U64}] = CallByName List.125 List.309 List.376 List.310;
            let List.373 : U8 = 1i64;
            let List.374 : U8 = GetTagId List.368;
            let List.375 : Int1 = lowlevel Eq List.373 List.374;
            if List.375 then
                let List.313 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.368;
                inc List.313;
                dec List.368;
                let List.371 : U64 = 1i64;
                let List.370 : U64 = CallByName Num.19 List.311 List.371;
                jump List.365 List.308 List.313 List.310 List.370 List.312;
            else
                let List.314 : [] = UnionAtIndex (Id 0) (Index 0) List.368;
                dec List.368;
                let List.372 : [C [], C {List U8, U64}] = TagId(0) List.314;
                ret List.372;
        else
            let List.366 : [C [], C {List U8, U64}] = TagId(1) List.309;
            ret List.366;
    in
    jump List.365 List.393 List.394 List.395 List.396 List.397;

procedure Num.123 (#Attr.2):
    let Num.266 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.266;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.269 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.269;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.267 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.267;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.270 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.270;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.268 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.268;

procedure Str.12 (#Attr.2):
    let Str.210 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.210;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.204 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.204;

procedure Str.9 (Str.69):
    let Str.202 : U64 = 0i64;
    let Str.203 : U64 = CallByName List.6 Str.69;
    let Str.70 : {U64, Str, Int1, U8} = CallByName Str.48 Str.69 Str.202 Str.203;
    let Str.199 : Int1 = StructAtIndex 2 Str.70;
    if Str.199 then
        let Str.201 : Str = StructAtIndex 1 Str.70;
        inc Str.201;
        dec Str.70;
        let Str.200 : [C {U64, U8}, C Str] = TagId(1) Str.201;
        ret Str.200;
    else
        let Str.197 : U8 = StructAtIndex 3 Str.70;
        let Str.198 : U64 = StructAtIndex 0 Str.70;
        dec Str.70;
        let Str.196 : {U64, U8} = Struct {Str.198, Str.197};
        let Str.195 : [C {U64, U8}, C Str] = TagId(0) Str.196;
        ret Str.195;

procedure Test.0 ():
    let Test.12 : Str = "foo";
    let Test.11 : {} = CallByName Json.1;
    let Test.10 : List U8 = CallByName Encode.25 Test.12 Test.11;
    let Test.2 : [C {U64, U8}, C Str] = CallByName Str.9 Test.10;
    let Test.7 : U8 = 1i64;
    let Test.8 : U8 = GetTagId Test.2;
    let Test.9 : Int1 = lowlevel Eq Test.7 Test.8;
    if Test.9 then
        let Test.4 : Str = UnionAtIndex (Id 1) (Index 0) Test.2;
        inc Test.4;
        dec Test.2;
        ret Test.4;
    else
        dec Test.2;
        let Test.6 : Str = "<bad>";
        ret Test.6;
