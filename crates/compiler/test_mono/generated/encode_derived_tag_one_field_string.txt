procedure #Derived.0 (#Derived.1):
    let #Derived_gen.1 : {Str} = Struct {#Derived.1};
    let #Derived_gen.0 : {Str} = CallByName Encode.22 #Derived_gen.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.4, #Derived.5, #Attr.12):
    let #Derived.1 : Str = StructAtIndex 0 #Attr.12;
    inc #Derived.1;
    dec #Attr.12;
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.4 #Derived_gen.4 #Derived.5;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : {Str} = CallByName Json.17 #Derived.1;
    let #Derived_gen.8 : List {Str} = Array [#Derived_gen.9];
    let #Derived_gen.6 : {Str, List {Str}} = CallByName Json.20 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.3 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.91 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.116 : List U8 = CallByName Json.65 Encode.94 Encode.96 Encode.102;
    ret Encode.116;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : {Str} = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.102 : {} = Struct {};
    ret Json.102;

procedure Json.17 (Json.64):
    let Json.107 : {Str} = Struct {Json.64};
    let Json.106 : {Str} = CallByName Encode.22 Json.107;
    ret Json.106;

procedure Json.20 (Json.89, Json.90):
    let Json.104 : {Str, List {Str}} = Struct {Json.89, Json.90};
    let Json.103 : {Str, List {Str}} = CallByName Encode.22 Json.104;
    ret Json.103;

procedure Json.65 (Json.66, Json.108, #Attr.12):
    let Json.64 : Str = StructAtIndex 0 #Attr.12;
    inc Json.64;
    dec #Attr.12;
    let Json.155 : I32 = 34i64;
    let Json.154 : U8 = CallByName Num.123 Json.155;
    let Json.152 : List U8 = CallByName List.4 Json.66 Json.154;
    let Json.153 : List U8 = CallByName Str.12 Json.64;
    let Json.149 : List U8 = CallByName List.8 Json.152 Json.153;
    let Json.151 : I32 = 34i64;
    let Json.150 : U8 = CallByName Num.123 Json.151;
    let Json.148 : List U8 = CallByName List.4 Json.149 Json.150;
    ret Json.148;

procedure Json.91 (Json.92, Json.105, #Attr.12):
    let Json.90 : List {Str} = StructAtIndex 1 #Attr.12;
    inc Json.90;
    let Json.89 : Str = StructAtIndex 0 #Attr.12;
    inc Json.89;
    dec #Attr.12;
    let Json.146 : I32 = 123i64;
    let Json.145 : U8 = CallByName Num.123 Json.146;
    let Json.142 : List U8 = CallByName List.4 Json.92 Json.145;
    let Json.144 : I32 = 34i64;
    let Json.143 : U8 = CallByName Num.123 Json.144;
    let Json.140 : List U8 = CallByName List.4 Json.142 Json.143;
    let Json.141 : List U8 = CallByName Str.12 Json.89;
    let Json.137 : List U8 = CallByName List.8 Json.140 Json.141;
    let Json.139 : I32 = 34i64;
    let Json.138 : U8 = CallByName Num.123 Json.139;
    let Json.134 : List U8 = CallByName List.4 Json.137 Json.138;
    let Json.136 : I32 = 58i64;
    let Json.135 : U8 = CallByName Num.123 Json.136;
    let Json.131 : List U8 = CallByName List.4 Json.134 Json.135;
    let Json.133 : I32 = 91i64;
    let Json.132 : U8 = CallByName Num.123 Json.133;
    let Json.94 : List U8 = CallByName List.4 Json.131 Json.132;
    let Json.130 : U64 = CallByName List.6 Json.90;
    let Json.118 : {List U8, U64} = Struct {Json.94, Json.130};
    let Json.119 : {} = Struct {};
    let Json.117 : {List U8, U64} = CallByName List.18 Json.90 Json.118 Json.119;
    dec Json.90;
    let Json.96 : List U8 = StructAtIndex 0 Json.117;
    inc Json.96;
    dec Json.117;
    let Json.116 : I32 = 93i64;
    let Json.115 : U8 = CallByName Num.123 Json.116;
    let Json.112 : List U8 = CallByName List.4 Json.96 Json.115;
    let Json.114 : I32 = 125i64;
    let Json.113 : U8 = CallByName Num.123 Json.114;
    let Json.111 : List U8 = CallByName List.4 Json.112 Json.113;
    ret Json.111;

procedure Json.93 (Json.110, Json.99):
    let Json.97 : List U8 = StructAtIndex 0 Json.110;
    inc Json.97;
    let Json.98 : U64 = StructAtIndex 1 Json.110;
    dec Json.110;
    let Json.129 : {} = Struct {};
    let Json.100 : List U8 = CallByName Encode.23 Json.97 Json.99 Json.129;
    joinpoint Json.124 Json.101:
        let Json.122 : U64 = 1i64;
        let Json.121 : U64 = CallByName Num.20 Json.98 Json.122;
        let Json.120 : {List U8, U64} = Struct {Json.101, Json.121};
        ret Json.120;
    in
    let Json.128 : U64 = 0i64;
    let Json.125 : Int1 = CallByName Num.24 Json.98 Json.128;
    if Json.125 then
        let Json.127 : I32 = 44i64;
        let Json.126 : U8 = CallByName Num.123 Json.127;
        let Json.123 : List U8 = CallByName List.4 Json.100 Json.126;
        jump Json.124 Json.123;
    else
        jump Json.124 Json.100;

procedure List.122 (List.123, List.124, #Attr.12):
    let List.121 : {} = StructAtIndex 0 #Attr.12;
    let List.357 : {List U8, U64} = CallByName Json.93 List.123 List.124;
    let List.356 : [C [], C {List U8, U64}] = TagId(1) List.357;
    ret List.356;

procedure List.18 (List.119, List.120, List.121):
    let List.333 : {{}} = Struct {List.121};
    let List.327 : [C [], C {List U8, U64}] = CallByName List.63 List.119 List.120 List.333;
    let List.330 : U8 = 1i64;
    let List.331 : U8 = GetTagId List.327;
    let List.332 : Int1 = lowlevel Eq List.330 List.331;
    if List.332 then
        let List.126 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.327;
        inc List.126;
        dec List.327;
        ret List.126;
    else
        let List.127 : [] = UnionAtIndex (Id 0) (Index 0) List.327;
        dec List.327;
        let List.329 : {List U8, U64} = CallByName List.64 List.127;
        ret List.329;

procedure List.4 (List.90, List.91):
    let List.326 : U64 = 1i64;
    let List.325 : List U8 = CallByName List.65 List.90 List.326;
    let List.324 : List U8 = CallByName List.66 List.325 List.91;
    ret List.324;

procedure List.6 (#Attr.2):
    let List.295 : U64 = lowlevel ListLen #Attr.2;
    ret List.295;

procedure List.6 (#Attr.2):
    let List.334 : U64 = lowlevel ListLen #Attr.2;
    ret List.334;

procedure List.60 (#Attr.2, #Attr.3):
    let List.355 : {Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.355;

procedure List.63 (List.283, List.284, List.285):
    let List.341 : U64 = 0i64;
    let List.342 : U64 = CallByName List.6 List.283;
    let List.340 : [C [], C {List U8, U64}] = CallByName List.77 List.283 List.284 List.285 List.341 List.342;
    ret List.340;

procedure List.64 (#Attr.2):
    let List.339 : {List U8, U64} = lowlevel Unreachable #Attr.2;
    ret List.339;

procedure List.65 (#Attr.2, #Attr.3):
    let List.338 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.338;

procedure List.66 (#Attr.2, #Attr.3):
    let List.337 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.337;

procedure List.77 (List.374, List.375, List.376, List.377, List.378):
    joinpoint List.343 List.286 List.287 List.288 List.289 List.290:
        let List.345 : Int1 = CallByName Num.22 List.289 List.290;
        if List.345 then
            let List.354 : {Str} = CallByName List.60 List.286 List.289;
            let List.346 : [C [], C {List U8, U64}] = CallByName List.122 List.287 List.354 List.288;
            let List.351 : U8 = 1i64;
            let List.352 : U8 = GetTagId List.346;
            let List.353 : Int1 = lowlevel Eq List.351 List.352;
            if List.353 then
                let List.291 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.346;
                inc List.291;
                dec List.346;
                let List.349 : U64 = 1i64;
                let List.348 : U64 = CallByName Num.19 List.289 List.349;
                jump List.343 List.286 List.291 List.288 List.348 List.290;
            else
                let List.292 : [] = UnionAtIndex (Id 0) (Index 0) List.346;
                dec List.346;
                let List.350 : [C [], C {List U8, U64}] = TagId(0) List.292;
                ret List.350;
        else
            let List.344 : [C [], C {List U8, U64}] = TagId(1) List.287;
            ret List.344;
    in
    jump List.343 List.374 List.375 List.376 List.377 List.378;

procedure List.8 (#Attr.2, #Attr.3):
    let List.336 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.336;

procedure Num.123 (#Attr.2):
    let Num.266 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.266;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.269 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.269;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.267 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.267;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.270 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.270;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.268 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.268;

procedure Str.12 (#Attr.2):
    let Str.210 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.210;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.204 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.204;

procedure Str.9 (Str.69):
    let Str.202 : U64 = 0i64;
    let Str.203 : U64 = CallByName List.6 Str.69;
    let Str.70 : {U64, Str, Int1, U8} = CallByName Str.48 Str.69 Str.202 Str.203;
    let Str.199 : Int1 = StructAtIndex 2 Str.70;
    if Str.199 then
        let Str.201 : Str = StructAtIndex 1 Str.70;
        inc Str.201;
        dec Str.70;
        let Str.200 : [C {U64, U8}, C Str] = TagId(1) Str.201;
        ret Str.200;
    else
        let Str.197 : U8 = StructAtIndex 3 Str.70;
        let Str.198 : U64 = StructAtIndex 0 Str.70;
        dec Str.70;
        let Str.196 : {U64, U8} = Struct {Str.198, Str.197};
        let Str.195 : [C {U64, U8}, C Str] = TagId(0) Str.196;
        ret Str.195;

procedure Test.0 ():
    let Test.12 : Str = "foo";
    let Test.11 : {} = CallByName Json.1;
    let Test.10 : List U8 = CallByName Encode.25 Test.12 Test.11;
    let Test.2 : [C {U64, U8}, C Str] = CallByName Str.9 Test.10;
    let Test.7 : U8 = 1i64;
    let Test.8 : U8 = GetTagId Test.2;
    let Test.9 : Int1 = lowlevel Eq Test.7 Test.8;
    if Test.9 then
        let Test.4 : Str = UnionAtIndex (Id 1) (Index 0) Test.2;
        inc Test.4;
        dec Test.2;
        ret Test.4;
    else
        dec Test.2;
        let Test.6 : Str = "<bad>";
        ret Test.6;
