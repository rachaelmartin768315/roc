procedure List.2 (List.96, List.97):
    let List.516 : U64 = CallByName List.6 List.96;
    let List.513 : Int1 = CallByName Num.22 List.97 List.516;
    if List.513 then
        let List.515 : I64 = CallByName List.66 List.96 List.97;
        dec List.96;
        let List.514 : [C {}, C I64] = TagId(1) List.515;
        ret List.514;
    else
        dec List.96;
        let List.512 : {} = Struct {};
        let List.511 : [C {}, C I64] = TagId(0) List.512;
        ret List.511;

procedure List.3 (List.104, List.105, List.106):
    let List.503 : {List I64, I64} = CallByName List.64 List.104 List.105 List.106;
    let List.502 : List I64 = StructAtIndex 0 List.503;
    ret List.502;

procedure List.6 (#Attr.2):
    let List.501 : U64 = lowlevel ListLen #Attr.2;
    ret List.501;

procedure List.64 (List.101, List.102, List.103):
    let List.500 : U64 = CallByName List.6 List.101;
    let List.497 : Int1 = CallByName Num.22 List.102 List.500;
    if List.497 then
        let List.498 : {List I64, I64} = CallByName List.67 List.101 List.102 List.103;
        ret List.498;
    else
        let List.496 : {List I64, I64} = Struct {List.101, List.103};
        ret List.496;

procedure List.66 (#Attr.2, #Attr.3):
    let List.509 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.509;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.499 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.499;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.280 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.280;

procedure Test.1 (Test.2, Test.3, Test.4):
    inc Test.4;
    let Test.29 : [C {}, C I64] = CallByName List.2 Test.4 Test.3;
    inc Test.4;
    let Test.28 : [C {}, C I64] = CallByName List.2 Test.4 Test.2;
    let Test.13 : {[C {}, C I64], [C {}, C I64]} = Struct {Test.28, Test.29};
    joinpoint Test.25:
        let Test.16 : List I64 = Array [];
        ret Test.16;
    in
    let Test.22 : [C {}, C I64] = StructAtIndex 1 Test.13;
    let Test.23 : U8 = 1i64;
    let Test.24 : U8 = GetTagId Test.22;
    let Test.27 : Int1 = lowlevel Eq Test.23 Test.24;
    if Test.27 then
        let Test.19 : [C {}, C I64] = StructAtIndex 0 Test.13;
        let Test.20 : U8 = 1i64;
        let Test.21 : U8 = GetTagId Test.19;
        let Test.26 : Int1 = lowlevel Eq Test.20 Test.21;
        if Test.26 then
            let Test.18 : [C {}, C I64] = StructAtIndex 0 Test.13;
            let Test.6 : I64 = UnionAtIndex (Id 1) (Index 0) Test.18;
            let Test.17 : [C {}, C I64] = StructAtIndex 1 Test.13;
            let Test.7 : I64 = UnionAtIndex (Id 1) (Index 0) Test.17;
            let Test.15 : List I64 = CallByName List.3 Test.4 Test.2 Test.7;
            let Test.14 : List I64 = CallByName List.3 Test.15 Test.3 Test.6;
            ret Test.14;
        else
            dec Test.4;
            jump Test.25;
    else
        dec Test.4;
        jump Test.25;

procedure Test.0 ():
    let Test.10 : U64 = 0i64;
    let Test.11 : U64 = 0i64;
    let Test.12 : List I64 = Array [1i64];
    let Test.9 : List I64 = CallByName Test.1 Test.10 Test.11 Test.12;
    ret Test.9;
