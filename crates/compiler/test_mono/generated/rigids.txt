procedure List.2 (List.75, List.76):
    let List.299 : U64 = CallByName List.6 List.75;
    let List.295 : Int1 = CallByName Num.22 List.76 List.299;
    if List.295 then
        let List.297 : I64 = CallByName List.60 List.75 List.76;
        let List.296 : [C {}, C I64] = TagId(1) List.297;
        ret List.296;
    else
        let List.294 : {} = Struct {};
        let List.293 : [C {}, C I64] = TagId(0) List.294;
        ret List.293;

procedure List.3 (List.83, List.84, List.85):
    let List.283 : {List I64, I64} = CallByName List.57 List.83 List.84 List.85;
    let List.282 : List I64 = StructAtIndex 0 List.283;
    inc List.282;
    dec List.283;
    ret List.282;

procedure List.57 (List.80, List.81, List.82):
    let List.305 : U64 = CallByName List.6 List.80;
    let List.302 : Int1 = CallByName Num.22 List.81 List.305;
    if List.302 then
        let List.303 : {List I64, I64} = CallByName List.61 List.80 List.81 List.82;
        ret List.303;
    else
        let List.301 : {List I64, I64} = Struct {List.80, List.82};
        ret List.301;

procedure List.6 (#Attr.2):
    let List.306 : U64 = lowlevel ListLen #Attr.2;
    ret List.306;

procedure List.60 (#Attr.2, #Attr.3):
    let List.307 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.307;

procedure List.61 (#Attr.2, #Attr.3, #Attr.4):
    let List.304 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.304;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.190 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.190;

procedure Test.1 (Test.2, Test.3, Test.4):
    let Test.29 : [C {}, C I64] = CallByName List.2 Test.4 Test.3;
    let Test.28 : [C {}, C I64] = CallByName List.2 Test.4 Test.2;
    let Test.13 : {[C {}, C I64], [C {}, C I64]} = Struct {Test.28, Test.29};
    joinpoint Test.25:
        let Test.16 : List I64 = Array [];
        ret Test.16;
    in
    let Test.22 : [C {}, C I64] = StructAtIndex 1 Test.13;
    let Test.23 : U8 = 1i64;
    let Test.24 : U8 = GetTagId Test.22;
    let Test.27 : Int1 = lowlevel Eq Test.23 Test.24;
    if Test.27 then
        let Test.19 : [C {}, C I64] = StructAtIndex 0 Test.13;
        let Test.20 : U8 = 1i64;
        let Test.21 : U8 = GetTagId Test.19;
        let Test.26 : Int1 = lowlevel Eq Test.20 Test.21;
        if Test.26 then
            let Test.18 : [C {}, C I64] = StructAtIndex 0 Test.13;
            let Test.6 : I64 = UnionAtIndex (Id 1) (Index 0) Test.18;
            let Test.17 : [C {}, C I64] = StructAtIndex 1 Test.13;
            let Test.8 : I64 = UnionAtIndex (Id 1) (Index 0) Test.17;
            let Test.15 : List I64 = CallByName List.3 Test.4 Test.2 Test.8;
            let Test.14 : List I64 = CallByName List.3 Test.15 Test.3 Test.6;
            ret Test.14;
        else
            dec Test.4;
            jump Test.25;
    else
        dec Test.4;
        jump Test.25;

procedure Test.0 ():
    let Test.10 : U64 = 0i64;
    let Test.11 : U64 = 0i64;
    let Test.12 : List I64 = Array [1i64];
    let Test.9 : List I64 = CallByName Test.1 Test.10 Test.11 Test.12;
    ret Test.9;
