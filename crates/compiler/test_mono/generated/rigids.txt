procedure List.2 (List.97, List.98):
    let List.543 : U64 = CallByName List.6 List.97;
    let List.540 : Int1 = CallByName Num.22 List.98 List.543;
    if List.540 then
        let List.542 : I64 = CallByName List.66 List.97 List.98;
        dec List.97;
        let List.541 : [C {}, C I64] = TagId(1) List.542;
        ret List.541;
    else
        dec List.97;
        let List.539 : {} = Struct {};
        let List.538 : [C {}, C I64] = TagId(0) List.539;
        ret List.538;

procedure List.3 (List.105, List.106, List.107):
    let List.530 : {List I64, I64} = CallByName List.64 List.105 List.106 List.107;
    let List.529 : List I64 = StructAtIndex 0 List.530;
    ret List.529;

procedure List.6 (#Attr.2):
    let List.528 : U64 = lowlevel ListLen #Attr.2;
    ret List.528;

procedure List.64 (List.102, List.103, List.104):
    let List.527 : U64 = CallByName List.6 List.102;
    let List.524 : Int1 = CallByName Num.22 List.103 List.527;
    if List.524 then
        let List.525 : {List I64, I64} = CallByName List.67 List.102 List.103 List.104;
        ret List.525;
    else
        let List.523 : {List I64, I64} = Struct {List.102, List.104};
        ret List.523;

procedure List.66 (#Attr.2, #Attr.3):
    let List.536 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.536;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.526 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.526;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.294 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.294;

procedure Test.1 (Test.2, Test.3, Test.4):
    inc 2 Test.4;
    let Test.29 : [C {}, C I64] = CallByName List.2 Test.4 Test.3;
    let Test.28 : [C {}, C I64] = CallByName List.2 Test.4 Test.2;
    let Test.13 : {[C {}, C I64], [C {}, C I64]} = Struct {Test.28, Test.29};
    joinpoint Test.25:
        let Test.16 : List I64 = Array [];
        ret Test.16;
    in
    let Test.22 : [C {}, C I64] = StructAtIndex 1 Test.13;
    let Test.23 : U8 = 1i64;
    let Test.24 : U8 = GetTagId Test.22;
    let Test.27 : Int1 = lowlevel Eq Test.23 Test.24;
    if Test.27 then
        let Test.19 : [C {}, C I64] = StructAtIndex 0 Test.13;
        let Test.20 : U8 = 1i64;
        let Test.21 : U8 = GetTagId Test.19;
        let Test.26 : Int1 = lowlevel Eq Test.20 Test.21;
        if Test.26 then
            let Test.18 : [C {}, C I64] = StructAtIndex 0 Test.13;
            let Test.6 : I64 = UnionAtIndex (Id 1) (Index 0) Test.18;
            let Test.17 : [C {}, C I64] = StructAtIndex 1 Test.13;
            let Test.7 : I64 = UnionAtIndex (Id 1) (Index 0) Test.17;
            let Test.15 : List I64 = CallByName List.3 Test.4 Test.2 Test.7;
            let Test.14 : List I64 = CallByName List.3 Test.15 Test.3 Test.6;
            ret Test.14;
        else
            dec Test.4;
            jump Test.25;
    else
        dec Test.4;
        jump Test.25;

procedure Test.0 ():
    let Test.10 : U64 = 0i64;
    let Test.11 : U64 = 0i64;
    let Test.12 : List I64 = Array [1i64];
    let Test.9 : List I64 = CallByName Test.1 Test.10 Test.11 Test.12;
    ret Test.9;
