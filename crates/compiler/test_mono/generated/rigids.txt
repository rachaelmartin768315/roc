procedure List.2 (List.115, List.116):
    let List.648 : U64 = CallByName List.6 List.115;
    let List.645 : Int1 = CallByName Num.22 List.116 List.648;
    if List.645 then
        let List.647 : I64 = CallByName List.66 List.115 List.116;
        let List.646 : [C {}, C I64] = TagId(1) List.647;
        ret List.646;
    else
        let List.644 : {} = Struct {};
        let List.643 : [C {}, C I64] = TagId(0) List.644;
        ret List.643;

procedure List.3 (List.123, List.124, List.125):
    let List.635 : {List I64, I64} = CallByName List.64 List.123 List.124 List.125;
    let List.634 : List I64 = StructAtIndex 0 List.635;
    ret List.634;

procedure List.6 (#Attr.2):
    let List.633 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.633;

procedure List.64 (List.120, List.121, List.122):
    let List.632 : U64 = CallByName List.6 List.120;
    let List.629 : Int1 = CallByName Num.22 List.121 List.632;
    if List.629 then
        let List.630 : {List I64, I64} = CallByName List.67 List.120 List.121 List.122;
        ret List.630;
    else
        let List.628 : {List I64, I64} = Struct {List.120, List.122};
        ret List.628;

procedure List.66 (#Attr.2, #Attr.3):
    let List.641 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.641;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.631 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.631;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.283 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.283;

procedure Test.1 (Test.2, Test.3, Test.4):
    let Test.29 : [C {}, C I64] = CallByName List.2 Test.4 Test.3;
    let Test.28 : [C {}, C I64] = CallByName List.2 Test.4 Test.2;
    let Test.13 : {[C {}, C I64], [C {}, C I64]} = Struct {Test.28, Test.29};
    joinpoint Test.25:
        let Test.16 : List I64 = Array [];
        ret Test.16;
    in
    let Test.22 : [C {}, C I64] = StructAtIndex 1 Test.13;
    let Test.23 : U8 = 1i64;
    let Test.24 : U8 = GetTagId Test.22;
    let Test.27 : Int1 = lowlevel Eq Test.23 Test.24;
    if Test.27 then
        let Test.19 : [C {}, C I64] = StructAtIndex 0 Test.13;
        let Test.20 : U8 = 1i64;
        let Test.21 : U8 = GetTagId Test.19;
        let Test.26 : Int1 = lowlevel Eq Test.20 Test.21;
        if Test.26 then
            let Test.18 : [C {}, C I64] = StructAtIndex 0 Test.13;
            let Test.6 : I64 = UnionAtIndex (Id 1) (Index 0) Test.18;
            let Test.17 : [C {}, C I64] = StructAtIndex 1 Test.13;
            let Test.7 : I64 = UnionAtIndex (Id 1) (Index 0) Test.17;
            let Test.15 : List I64 = CallByName List.3 Test.4 Test.2 Test.7;
            let Test.14 : List I64 = CallByName List.3 Test.15 Test.3 Test.6;
            ret Test.14;
        else
            dec Test.4;
            jump Test.25;
    else
        dec Test.4;
        jump Test.25;

procedure Test.0 ():
    let Test.10 : U64 = 0i64;
    let Test.11 : U64 = 0i64;
    let Test.12 : List I64 = Array [1i64];
    let Test.9 : List I64 = CallByName Test.1 Test.10 Test.11 Test.12;
    ret Test.9;
