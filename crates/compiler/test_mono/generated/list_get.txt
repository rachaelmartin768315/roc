procedure List.2 (List.74, List.75):
    let List.267 : U64 = CallByName List.6 List.74;
    let List.263 : Int1 = CallByName Num.22 List.75 List.267;
    if List.263 then
        let List.265 : I64 = CallByName List.60 List.74 List.75;
        let List.264 : [C {}, C I64] = Ok List.265;
        ret List.264;
    else
        let List.262 : {} = Struct {};
        let List.261 : [C {}, C I64] = Err List.262;
        ret List.261;

procedure List.6 (#Attr.2):
    let List.270 : U64 = lowlevel ListLen #Attr.2;
    ret List.270;

procedure List.60 (#Attr.2, #Attr.3):
    let List.269 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.269;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.273 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.273;

procedure Test.1 (Test.2):
    let Test.6 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.7 : U64 = 0i64;
    let Test.5 : [C {}, C I64] = CallByName List.2 Test.6 Test.7;
    dec Test.6;
    ret Test.5;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.3 : [C {}, C I64] = CallByName Test.1 Test.4;
    ret Test.3;
