procedure List.2 (List.115, List.116):
    let List.632 : U64 = CallByName List.6 List.115;
    let List.628 : Int1 = CallByName Num.22 List.116 List.632;
    if List.628 then
        let List.630 : I64 = CallByName List.66 List.115 List.116;
        let List.629 : [C {}, C I64] = TagId(1) List.630;
        ret List.629;
    else
        let List.627 : {} = Struct {};
        let List.626 : [C {}, C I64] = TagId(0) List.627;
        ret List.626;

procedure List.6 (#Attr.2):
    let List.633 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.633;

procedure List.66 (#Attr.2, #Attr.3):
    let List.631 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.631;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.281 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.1 (Test.2):
    let Test.6 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.7 : U64 = 0i64;
    let Test.5 : [C {}, C I64] = CallByName List.2 Test.6 Test.7;
    dec Test.6;
    ret Test.5;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.3 : [C {}, C I64] = CallByName Test.1 Test.4;
    ret Test.3;
