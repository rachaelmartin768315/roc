procedure List.2 (List.72, List.73):
    let List.245 : U64 = CallByName List.6 List.72;
    let List.241 : Int1 = CallByName Num.22 List.73 List.245;
    if List.241 then
        let List.243 : I64 = CallByName List.60 List.72 List.73;
        let List.242 : [C {}, C I64] = Ok List.243;
        ret List.242;
    else
        let List.240 : {} = Struct {};
        let List.239 : [C {}, C I64] = Err List.240;
        ret List.239;

procedure List.6 (#Attr.2):
    let List.248 : U64 = lowlevel ListLen #Attr.2;
    ret List.248;

procedure List.60 (#Attr.2, #Attr.3):
    let List.247 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.247;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.273 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.273;

procedure Test.1 (Test.2):
    let Test.6 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.7 : U64 = 0i64;
    let Test.5 : [C {}, C I64] = CallByName List.2 Test.6 Test.7;
    dec Test.6;
    ret Test.5;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.3 : [C {}, C I64] = CallByName Test.1 Test.4;
    ret Test.3;
