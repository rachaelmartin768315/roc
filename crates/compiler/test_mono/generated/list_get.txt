procedure List.2 (List.82, List.83):
    let List.322 : U64 = CallByName List.6 List.82;
    let List.319 : Int1 = CallByName Num.22 List.83 List.322;
    if List.319 then
        let List.321 : I64 = CallByName List.60 List.82 List.83;
        let List.320 : [C {}, C I64] = TagId(1) List.321;
        ret List.320;
    else
        let List.318 : {} = Struct {};
        let List.317 : [C {}, C I64] = TagId(0) List.318;
        ret List.317;

procedure List.6 (#Attr.2):
    let List.324 : U64 = lowlevel ListLen #Attr.2;
    ret List.324;

procedure List.60 (#Attr.2, #Attr.3):
    let List.323 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.323;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.257 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.257;

procedure Test.1 (Test.2):
    let Test.6 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.7 : U64 = 0i64;
    let Test.5 : [C {}, C I64] = CallByName List.2 Test.6 Test.7;
    dec Test.6;
    ret Test.5;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.3 : [C {}, C I64] = CallByName Test.1 Test.4;
    ret Test.3;
