procedure List.2 (List.111, List.112):
    let List.583 : U64 = CallByName List.6 List.111;
    let List.579 : Int1 = CallByName Num.22 List.112 List.583;
    if List.579 then
        let List.581 : I64 = CallByName List.66 List.111 List.112;
        dec List.111;
        let List.580 : [C {}, C I64] = TagId(1) List.581;
        ret List.580;
    else
        dec List.111;
        let List.578 : {} = Struct {};
        let List.577 : [C {}, C I64] = TagId(0) List.578;
        ret List.577;

procedure List.6 (#Attr.2):
    let List.584 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.584;

procedure List.66 (#Attr.2, #Attr.3):
    let List.582 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.582;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.281 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.1 (Test.2):
    let Test.6 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.7 : U64 = 0i64;
    let Test.5 : [C {}, C I64] = CallByName List.2 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.3 : [C {}, C I64] = CallByName Test.1 Test.4;
    ret Test.3;
