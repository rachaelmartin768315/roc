procedure List.2 (List.97, List.98):
    let List.528 : U64 = CallByName List.6 List.97;
    let List.524 : Int1 = CallByName Num.22 List.98 List.528;
    if List.524 then
        let List.526 : I64 = CallByName List.66 List.97 List.98;
        dec List.97;
        let List.525 : [C {}, C I64] = TagId(1) List.526;
        ret List.525;
    else
        dec List.97;
        let List.523 : {} = Struct {};
        let List.522 : [C {}, C I64] = TagId(0) List.523;
        ret List.522;

procedure List.6 (#Attr.2):
    let List.529 : U64 = lowlevel ListLen #Attr.2;
    ret List.529;

procedure List.66 (#Attr.2, #Attr.3):
    let List.527 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.527;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.292 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.292;

procedure Test.1 (Test.2):
    let Test.6 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.7 : U64 = 0i64;
    let Test.5 : [C {}, C I64] = CallByName List.2 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.3 : [C {}, C I64] = CallByName Test.1 Test.4;
    ret Test.3;
