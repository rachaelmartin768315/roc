procedure List.3 (List.65, List.66, List.67):
    let List.155 : {List I64, I64} = CallByName List.57 List.65 List.66 List.67;
    let List.154 : List I64 = StructAtIndex 0 List.155;
    inc List.154;
    dec List.155;
    ret List.154;

procedure List.57 (#Attr.2, #Attr.3, #Attr.4):
    let List.160 : U64 = lowlevel ListLen #Attr.2;
    let List.158 : Int1 = lowlevel NumLt #Attr.3 List.160;
    if List.158 then
        let List.159 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
        ret List.159;
    else
        let List.157 : {List I64, I64} = Struct {#Attr.2, #Attr.4};
        ret List.157;

procedure List.6 (#Attr.2):
    let List.153 : U64 = lowlevel ListLen #Attr.2;
    ret List.153;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.273 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.273;

procedure Test.1 ():
    let Test.8 : List I64 = Array [1i64, 2i64, 3i64];
    ret Test.8;

procedure Test.2 (Test.3):
    let Test.12 : U64 = 0i64;
    let Test.13 : I64 = 0i64;
    let Test.11 : List I64 = CallByName List.3 Test.3 Test.12 Test.13;
    ret Test.11;

procedure Test.0 ():
    let Test.10 : List I64 = CallByName Test.1;
    let Test.9 : List I64 = CallByName Test.2 Test.10;
    let Test.5 : U64 = CallByName List.6 Test.9;
    dec Test.9;
    let Test.7 : List I64 = CallByName Test.1;
    let Test.6 : U64 = CallByName List.6 Test.7;
    dec Test.7;
    let Test.4 : U64 = CallByName Num.19 Test.5 Test.6;
    ret Test.4;
