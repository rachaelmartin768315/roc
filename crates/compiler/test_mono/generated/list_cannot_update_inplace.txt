procedure List.3 (List.123, List.124, List.125):
    let List.629 : {List I64, I64} = CallByName List.64 List.123 List.124 List.125;
    let List.628 : List I64 = StructAtIndex 0 List.629;
    ret List.628;

procedure List.6 (#Attr.2):
    let List.627 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.627;

procedure List.64 (List.120, List.121, List.122):
    let List.634 : U64 = CallByName List.6 List.120;
    let List.631 : Int1 = CallByName Num.22 List.121 List.634;
    if List.631 then
        let List.632 : {List I64, I64} = CallByName List.67 List.120 List.121 List.122;
        ret List.632;
    else
        let List.630 : {List I64, I64} = Struct {List.120, List.122};
        ret List.630;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.633 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.633;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.281;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Test.1 ():
    let Test.8 : List I64 = Array [1i64, 2i64, 3i64];
    ret Test.8;

procedure Test.2 (Test.3):
    let Test.12 : U64 = 0i64;
    let Test.13 : I64 = 0i64;
    let Test.11 : List I64 = CallByName List.3 Test.3 Test.12 Test.13;
    ret Test.11;

procedure Test.0 ():
    let Test.10 : List I64 = CallByName Test.1;
    let Test.9 : List I64 = CallByName Test.2 Test.10;
    let Test.5 : U64 = CallByName List.6 Test.9;
    dec Test.9;
    let Test.7 : List I64 = CallByName Test.1;
    let Test.6 : U64 = CallByName List.6 Test.7;
    dec Test.7;
    let Test.4 : U64 = CallByName Num.19 Test.5 Test.6;
    ret Test.4;
