procedure List.3 (List.86, List.87, List.88):
    let List.298 : {List I64, I64} = CallByName List.57 List.86 List.87 List.88;
    let List.297 : List I64 = StructAtIndex 0 List.298;
    inc List.297;
    dec List.298;
    ret List.297;

procedure List.57 (List.83, List.84, List.85):
    let List.303 : U64 = CallByName List.6 List.83;
    let List.300 : Int1 = CallByName Num.22 List.84 List.303;
    if List.300 then
        let List.301 : {List I64, I64} = CallByName List.61 List.83 List.84 List.85;
        ret List.301;
    else
        let List.299 : {List I64, I64} = Struct {List.83, List.85};
        ret List.299;

procedure List.6 (#Attr.2):
    let List.296 : U64 = lowlevel ListLen #Attr.2;
    ret List.296;

procedure List.61 (#Attr.2, #Attr.3, #Attr.4):
    let List.302 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.302;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.257 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.257;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.258 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.258;

procedure Test.1 ():
    let Test.8 : List I64 = Array [1i64, 2i64, 3i64];
    ret Test.8;

procedure Test.2 (Test.3):
    let Test.12 : U64 = 0i64;
    let Test.13 : I64 = 0i64;
    let Test.11 : List I64 = CallByName List.3 Test.3 Test.12 Test.13;
    ret Test.11;

procedure Test.0 ():
    let Test.10 : List I64 = CallByName Test.1;
    let Test.9 : List I64 = CallByName Test.2 Test.10;
    let Test.5 : U64 = CallByName List.6 Test.9;
    dec Test.9;
    let Test.7 : List I64 = CallByName Test.1;
    let Test.6 : U64 = CallByName List.6 Test.7;
    dec Test.7;
    let Test.4 : U64 = CallByName Num.19 Test.5 Test.6;
    ret Test.4;
