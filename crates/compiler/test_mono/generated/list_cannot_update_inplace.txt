procedure List.3 (List.104, List.105, List.106):
    let List.497 : {List I64, I64} = CallByName List.64 List.104 List.105 List.106;
    let List.496 : List I64 = StructAtIndex 0 List.497;
    inc List.496;
    dec List.497;
    ret List.496;

procedure List.6 (#Attr.2):
    let List.495 : U64 = lowlevel ListLen #Attr.2;
    dec #Attr.2;
    ret List.495;

procedure List.64 (List.101, List.102, List.103):
    let List.502 : U64 = lowlevel ListLen List.101;
    let List.499 : Int1 = lowlevel NumLt List.102 List.502;
    if List.499 then
        let List.500 : {List I64, I64} = lowlevel ListReplaceUnsafe List.101 List.102 List.103;
        ret List.500;
    else
        let List.498 : {List I64, I64} = Struct {List.101, List.103};
        ret List.498;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.501 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.501;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.275 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.275;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.276 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.276;

procedure Test.1 ():
    let Test.8 : List I64 = Array [1i64, 2i64, 3i64];
    ret Test.8;

procedure Test.2 (Test.3):
    let Test.12 : U64 = 0i64;
    let Test.13 : I64 = 0i64;
    let Test.11 : List I64 = CallByName List.3 Test.3 Test.12 Test.13;
    ret Test.11;

procedure Test.0 ():
    let Test.10 : List I64 = CallByName Test.1;
    let Test.9 : List I64 = CallByName Test.2 Test.10;
    let Test.5 : U64 = lowlevel ListLen Test.9;
    dec Test.9;
    let Test.7 : List I64 = CallByName Test.1;
    let Test.6 : U64 = lowlevel ListLen Test.7;
    dec Test.7;
    let Test.4 : U64 = lowlevel NumAdd Test.5 Test.6;
    ret Test.4;
