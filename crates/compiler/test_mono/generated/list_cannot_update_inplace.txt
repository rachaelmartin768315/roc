<<<<<<< HEAD
<<<<<<< HEAD
procedure List.3 (List.84, List.85, List.86):
    let List.287 : {List I64, I64} = CallByName List.57 List.84 List.85 List.86;
    let List.286 : List I64 = StructAtIndex 0 List.287;
    inc List.286;
    dec List.287;
    ret List.286;

procedure List.57 (List.81, List.82, List.83):
    let List.293 : U64 = CallByName List.6 List.81;
    let List.290 : Int1 = CallByName Num.22 List.82 List.293;
    if List.290 then
        let List.291 : {List I64, I64} = CallByName List.61 List.81 List.82 List.83;
        ret List.291;
=======
<<<<<<< HEAD:crates/compiler/test_mono/generated/list_cannot_update_inplace.txt
procedure List.3 (List.82, List.83, List.84):
    let List.262 : {List I64, I64} = CallByName List.57 List.82 List.83 List.84;
    let List.261 : List I64 = StructAtIndex 0 List.262;
    inc List.261;
    dec List.262;
    ret List.261;

procedure List.57 (List.79, List.80, List.81):
    let List.268 : U64 = CallByName List.6 List.79;
    let List.265 : Int1 = CallByName Num.22 List.80 List.268;
    if List.265 then
        let List.266 : {List I64, I64} = CallByName List.61 List.79 List.80 List.81;
        ret List.266;
>>>>>>> 25bb3751b (Rename multimorphic tests to capture niche)
    else
        let List.289 : {List I64, I64} = Struct {List.81, List.83};
        ret List.289;

procedure List.6 (#Attr.2):
    let List.285 : U64 = lowlevel ListLen #Attr.2;
    ret List.285;

procedure List.61 (#Attr.2, #Attr.3, #Attr.4):
<<<<<<< HEAD
    let List.292 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.292;
=======
    let List.267 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.267;
=======
procedure List.3 (List.79, List.80, List.81):
    let List.216 : {List I64, I64} = CallByName List.57 List.79 List.80 List.81;
    let List.215 : List I64 = StructAtIndex 0 List.216;
    inc List.215;
    dec List.216;
    ret List.215;

procedure List.57 (List.76, List.77, List.78):
    let List.222 : U64 = CallByName List.6 List.76;
    let List.219 : Int1 = CallByName Num.22 List.77 List.222;
    if List.219 then
        let List.220 : {List I64, I64} = CallByName List.61 List.76 List.77 List.78;
        ret List.220;
=======
procedure List.3 (List.80, List.81, List.82):
    let List.241 : {List I64, I64} = CallByName List.57 List.80 List.81 List.82;
    let List.240 : List I64 = StructAtIndex 0 List.241;
    inc List.240;
    dec List.241;
    ret List.240;

procedure List.57 (List.77, List.78, List.79):
    let List.247 : U64 = CallByName List.6 List.77;
    let List.244 : Int1 = CallByName Num.22 List.78 List.247;
    if List.244 then
        let List.245 : {List I64, I64} = CallByName List.61 List.77 List.78 List.79;
        ret List.245;
>>>>>>> 61fcac491 (Fix mono tests)
    else
        let List.243 : {List I64, I64} = Struct {List.77, List.79};
        ret List.243;

procedure List.6 (#Attr.2):
    let List.239 : U64 = lowlevel ListLen #Attr.2;
    ret List.239;

procedure List.61 (#Attr.2, #Attr.3, #Attr.4):
<<<<<<< HEAD
    let List.221 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.221;
>>>>>>> a5fc399f4 (Rename multimorphic tests to capture niche):compiler/test_mono/generated/list_cannot_update_inplace.txt
>>>>>>> 25bb3751b (Rename multimorphic tests to capture niche)
=======
    let List.246 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.246;
>>>>>>> 61fcac491 (Fix mono tests)

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.188 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.188;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.189 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.189;

procedure Test.1 ():
    let Test.8 : List I64 = Array [1i64, 2i64, 3i64];
    ret Test.8;

procedure Test.2 (Test.3):
    let Test.12 : U64 = 0i64;
    let Test.13 : I64 = 0i64;
    let Test.11 : List I64 = CallByName List.3 Test.3 Test.12 Test.13;
    ret Test.11;

procedure Test.0 ():
    let Test.10 : List I64 = CallByName Test.1;
    let Test.9 : List I64 = CallByName Test.2 Test.10;
    let Test.5 : U64 = CallByName List.6 Test.9;
    dec Test.9;
    let Test.7 : List I64 = CallByName Test.1;
    let Test.6 : U64 = CallByName List.6 Test.7;
    dec Test.7;
    let Test.4 : U64 = CallByName Num.19 Test.5 Test.6;
    ret Test.4;
