procedure #Multimorphic.0 (Test.28, #Attr.12):
    let Test.5 : U64 = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Test.30 : Str = "";
    ret Test.30;

procedure #Multimorphic.1 (Test.20, #Attr.12):
    let Test.5 : {} = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Test.22 : Str = "";
    ret Test.22;

procedure Test.1 (Test.5):
    let Test.19 : [C U64, C {}, C ] = ClosureTag(#Multimorphic.1) Test.5;
    ret Test.19;

procedure Test.1 (Test.5):
    let Test.27 : [C U64, C {}, C ] = ClosureTag(#Multimorphic.0) Test.5;
    ret Test.27;

procedure Test.2 (Test.8):
    let Test.24 : Str = "";
    ret Test.24;

procedure Test.0 ():
    let Test.3 : U8 = 0u8;
    joinpoint Test.16 Test.4:
        let Test.10 : {} = Struct {};
        let Test.11 : U8 = GetTagId Test.4;
        joinpoint Test.12 Test.9:
            ret Test.9;
        in
        switch Test.11:
            case 0:
                let Test.13 : Str = CallByName #Multimorphic.0 Test.10 Test.4;
                jump Test.12 Test.13;
        
            case 1:
                let Test.14 : Str = CallByName #Multimorphic.1 Test.10 Test.4;
                jump Test.12 Test.14;
        
            default:
                let Test.15 : Str = CallByName Test.2 Test.10;
                jump Test.12 Test.15;
        
    in
    switch Test.3:
        case 0:
            let Test.18 : {} = Struct {};
            let Test.17 : [C U64, C {}, C ] = CallByName Test.1 Test.18;
            jump Test.16 Test.17;
    
        case 1:
            let Test.2 : [C U64, C {}, C ] = ClosureTag(Test.2) ;
            jump Test.16 Test.2;
    
        default:
            let Test.26 : U64 = 1i64;
            let Test.25 : [C U64, C {}, C ] = CallByName Test.1 Test.26;
            jump Test.16 Test.25;
    
