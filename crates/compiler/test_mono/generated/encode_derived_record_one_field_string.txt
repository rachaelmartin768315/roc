procedure #Derived.0 (#Derived.1):
    let #Derived_gen.1 : {Str} = Struct {#Derived.1};
    let #Derived_gen.0 : {Str} = CallByName Encode.22 #Derived_gen.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Attr.12):
    let #Derived.1 : Str = StructAtIndex 0 #Attr.12;
    inc #Derived.1;
    dec #Attr.12;
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : {Str} = CallByName Json.17 #Derived.1;
    let #Derived_gen.6 : {Str, {Str}} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, {Str}} = Array [#Derived_gen.6];
    let #Derived_gen.4 : {List {Str, {Str}}} = CallByName Json.19 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.2 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.81 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.116 : List U8 = CallByName Json.65 Encode.94 Encode.96 Encode.102;
    ret Encode.116;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : {Str} = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.106 : {} = Struct {};
    ret Json.106;

procedure Json.17 (Json.64):
    let Json.111 : {Str} = Struct {Json.64};
    let Json.110 : {Str} = CallByName Encode.22 Json.111;
    ret Json.110;

procedure Json.19 (Json.80):
    let Json.108 : {List {Str, {Str}}} = Struct {Json.80};
    let Json.107 : {List {Str, {Str}}} = CallByName Encode.22 Json.108;
    ret Json.107;

procedure Json.65 (Json.66, Json.112, #Attr.12):
    let Json.64 : Str = StructAtIndex 0 #Attr.12;
    inc Json.64;
    dec #Attr.12;
    let Json.154 : I32 = 34i64;
    let Json.153 : U8 = CallByName Num.123 Json.154;
    let Json.151 : List U8 = CallByName List.4 Json.66 Json.153;
    let Json.152 : List U8 = CallByName Str.12 Json.64;
    let Json.148 : List U8 = CallByName List.8 Json.151 Json.152;
    let Json.150 : I32 = 34i64;
    let Json.149 : U8 = CallByName Num.123 Json.150;
    let Json.147 : List U8 = CallByName List.4 Json.148 Json.149;
    ret Json.147;

procedure Json.81 (Json.82, Json.109, #Attr.12):
    let Json.80 : List {Str, {Str}} = StructAtIndex 0 #Attr.12;
    inc Json.80;
    dec #Attr.12;
    let Json.145 : I32 = 123i64;
    let Json.144 : U8 = CallByName Num.123 Json.145;
    let Json.84 : List U8 = CallByName List.4 Json.82 Json.144;
    let Json.143 : U64 = CallByName List.6 Json.80;
    let Json.120 : {List U8, U64} = Struct {Json.84, Json.143};
    let Json.121 : {} = Struct {};
    let Json.119 : {List U8, U64} = CallByName List.18 Json.80 Json.120 Json.121;
    dec Json.80;
    let Json.86 : List U8 = StructAtIndex 0 Json.119;
    inc Json.86;
    dec Json.119;
    let Json.118 : I32 = 125i64;
    let Json.117 : U8 = CallByName Num.123 Json.118;
    let Json.116 : List U8 = CallByName List.4 Json.86 Json.117;
    ret Json.116;

procedure Json.83 (Json.114, Json.115):
    let Json.89 : Str = StructAtIndex 0 Json.115;
    inc Json.89;
    let Json.90 : {Str} = StructAtIndex 1 Json.115;
    inc Json.90;
    dec Json.115;
    let Json.87 : List U8 = StructAtIndex 0 Json.114;
    inc Json.87;
    let Json.88 : U64 = StructAtIndex 1 Json.114;
    dec Json.114;
    let Json.142 : I32 = 34i64;
    let Json.141 : U8 = CallByName Num.123 Json.142;
    let Json.139 : List U8 = CallByName List.4 Json.87 Json.141;
    let Json.140 : List U8 = CallByName Str.12 Json.89;
    let Json.136 : List U8 = CallByName List.8 Json.139 Json.140;
    let Json.138 : I32 = 34i64;
    let Json.137 : U8 = CallByName Num.123 Json.138;
    let Json.133 : List U8 = CallByName List.4 Json.136 Json.137;
    let Json.135 : I32 = 58i64;
    let Json.134 : U8 = CallByName Num.123 Json.135;
    let Json.131 : List U8 = CallByName List.4 Json.133 Json.134;
    let Json.132 : {} = Struct {};
    let Json.91 : List U8 = CallByName Encode.23 Json.131 Json.90 Json.132;
    joinpoint Json.126 Json.92:
        let Json.124 : U64 = 1i64;
        let Json.123 : U64 = CallByName Num.20 Json.88 Json.124;
        let Json.122 : {List U8, U64} = Struct {Json.92, Json.123};
        ret Json.122;
    in
    let Json.130 : U64 = 1i64;
    let Json.127 : Int1 = CallByName Num.24 Json.88 Json.130;
    if Json.127 then
        let Json.129 : I32 = 44i64;
        let Json.128 : U8 = CallByName Num.123 Json.129;
        let Json.125 : List U8 = CallByName List.4 Json.91 Json.128;
        jump Json.126 Json.125;
    else
        jump Json.126 Json.91;

procedure List.133 (List.134, List.135, #Attr.12):
    let List.132 : {} = StructAtIndex 0 #Attr.12;
    let List.441 : {List U8, U64} = CallByName Json.83 List.134 List.135;
    let List.440 : [C [], C {List U8, U64}] = TagId(1) List.441;
    ret List.440;

procedure List.18 (List.130, List.131, List.132):
    let List.417 : {{}} = Struct {List.132};
    let List.411 : [C [], C {List U8, U64}] = CallByName List.75 List.130 List.131 List.417;
    let List.414 : U8 = 1i64;
    let List.415 : U8 = GetTagId List.411;
    let List.416 : Int1 = lowlevel Eq List.414 List.415;
    if List.416 then
        let List.137 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.411;
        inc List.137;
        dec List.411;
        ret List.137;
    else
        let List.138 : [] = UnionAtIndex (Id 0) (Index 0) List.411;
        dec List.411;
        let List.413 : {List U8, U64} = CallByName List.69 List.138;
        ret List.413;

procedure List.4 (List.101, List.102):
    let List.410 : U64 = 1i64;
    let List.409 : List U8 = CallByName List.70 List.101 List.410;
    let List.408 : List U8 = CallByName List.71 List.409 List.102;
    ret List.408;

procedure List.6 (#Attr.2):
    let List.385 : U64 = lowlevel ListLen #Attr.2;
    ret List.385;

procedure List.6 (#Attr.2):
    let List.420 : U64 = lowlevel ListLen #Attr.2;
    ret List.420;

procedure List.66 (#Attr.2, #Attr.3):
    let List.439 : {Str, {Str}} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.439;

procedure List.69 (#Attr.2):
    let List.423 : {List U8, U64} = lowlevel Unreachable #Attr.2;
    ret List.423;

procedure List.70 (#Attr.2, #Attr.3):
    let List.422 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.422;

procedure List.71 (#Attr.2, #Attr.3):
    let List.421 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.421;

procedure List.75 (List.361, List.362, List.363):
    let List.425 : U64 = 0i64;
    let List.426 : U64 = CallByName List.6 List.361;
    let List.424 : [C [], C {List U8, U64}] = CallByName List.86 List.361 List.362 List.363 List.425 List.426;
    ret List.424;

procedure List.8 (#Attr.2, #Attr.3):
    let List.419 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.419;

procedure List.86 (List.455, List.456, List.457, List.458, List.459):
    joinpoint List.427 List.364 List.365 List.366 List.367 List.368:
        let List.429 : Int1 = CallByName Num.22 List.367 List.368;
        if List.429 then
            let List.438 : {Str, {Str}} = CallByName List.66 List.364 List.367;
            let List.430 : [C [], C {List U8, U64}] = CallByName List.133 List.365 List.438 List.366;
            let List.435 : U8 = 1i64;
            let List.436 : U8 = GetTagId List.430;
            let List.437 : Int1 = lowlevel Eq List.435 List.436;
            if List.437 then
                let List.369 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.430;
                inc List.369;
                dec List.430;
                let List.433 : U64 = 1i64;
                let List.432 : U64 = CallByName Num.19 List.367 List.433;
                jump List.427 List.364 List.369 List.366 List.432 List.368;
            else
                let List.370 : [] = UnionAtIndex (Id 0) (Index 0) List.430;
                dec List.430;
                let List.434 : [C [], C {List U8, U64}] = TagId(0) List.370;
                ret List.434;
        else
            let List.428 : [C [], C {List U8, U64}] = TagId(1) List.365;
            ret List.428;
    in
    jump List.427 List.455 List.456 List.457 List.458 List.459;

procedure Num.123 (#Attr.2):
    let Num.264 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.264;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.267 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.267;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.265 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.265;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.268 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.268;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.266 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.266;

procedure Str.12 (#Attr.2):
    let Str.210 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.210;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.204 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.204;

procedure Str.9 (Str.69):
    let Str.202 : U64 = 0i64;
    let Str.203 : U64 = CallByName List.6 Str.69;
    let Str.70 : {U64, Str, Int1, U8} = CallByName Str.48 Str.69 Str.202 Str.203;
    let Str.199 : Int1 = StructAtIndex 2 Str.70;
    if Str.199 then
        let Str.201 : Str = StructAtIndex 1 Str.70;
        inc Str.201;
        dec Str.70;
        let Str.200 : [C {U64, U8}, C Str] = TagId(1) Str.201;
        ret Str.200;
    else
        let Str.197 : U8 = StructAtIndex 3 Str.70;
        let Str.198 : U64 = StructAtIndex 0 Str.70;
        dec Str.70;
        let Str.196 : {U64, U8} = Struct {Str.198, Str.197};
        let Str.195 : [C {U64, U8}, C Str] = TagId(0) Str.196;
        ret Str.195;

procedure Test.0 ():
    let Test.11 : Str = "foo";
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.25 Test.11 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
