procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.22 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName Json.18 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Json.20 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.2 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.112 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.116 : List U8 = CallByName Json.96 Encode.94 Encode.96 Encode.102;
    ret Encode.116;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : Str = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.396 : {} = Struct {};
    ret Json.396;

procedure Json.112 (Json.113, Json.399, Json.111):
    let Json.432 : I64 = 123i64;
    let Json.431 : U8 = CallByName Num.125 Json.432;
    let Json.115 : List U8 = CallByName List.4 Json.113 Json.431;
    let Json.430 : U64 = CallByName List.6 Json.111;
    let Json.407 : {List U8, U64} = Struct {Json.115, Json.430};
    let Json.408 : {} = Struct {};
    let Json.406 : {List U8, U64} = CallByName List.18 Json.111 Json.407 Json.408;
    dec Json.111;
    let Json.117 : List U8 = StructAtIndex 0 Json.406;
    inc Json.117;
    dec Json.406;
    let Json.405 : I64 = 125i64;
    let Json.404 : U8 = CallByName Num.125 Json.405;
    let Json.403 : List U8 = CallByName List.4 Json.117 Json.404;
    ret Json.403;

procedure Json.114 (Json.401, Json.402):
    let Json.120 : Str = StructAtIndex 0 Json.402;
    inc Json.120;
    let Json.121 : Str = StructAtIndex 1 Json.402;
    inc Json.121;
    dec Json.402;
    let Json.118 : List U8 = StructAtIndex 0 Json.401;
    inc Json.118;
    let Json.119 : U64 = StructAtIndex 1 Json.401;
    dec Json.401;
    let Json.429 : I64 = 34i64;
    let Json.428 : U8 = CallByName Num.125 Json.429;
    let Json.426 : List U8 = CallByName List.4 Json.118 Json.428;
    let Json.427 : List U8 = CallByName Str.12 Json.120;
    let Json.423 : List U8 = CallByName List.8 Json.426 Json.427;
    let Json.425 : I64 = 34i64;
    let Json.424 : U8 = CallByName Num.125 Json.425;
    let Json.420 : List U8 = CallByName List.4 Json.423 Json.424;
    let Json.422 : I64 = 58i64;
    let Json.421 : U8 = CallByName Num.125 Json.422;
    let Json.418 : List U8 = CallByName List.4 Json.420 Json.421;
    let Json.419 : {} = Struct {};
    let Json.122 : List U8 = CallByName Encode.23 Json.418 Json.121 Json.419;
    joinpoint Json.413 Json.123:
        let Json.411 : U64 = 1i64;
        let Json.410 : U64 = CallByName Num.20 Json.119 Json.411;
        let Json.409 : {List U8, U64} = Struct {Json.123, Json.410};
        ret Json.409;
    in
    let Json.417 : U64 = 1i64;
    let Json.414 : Int1 = CallByName Num.24 Json.119 Json.417;
    if Json.414 then
        let Json.416 : I64 = 44i64;
        let Json.415 : U8 = CallByName Num.125 Json.416;
        let Json.412 : List U8 = CallByName List.4 Json.122 Json.415;
        jump Json.413 Json.412;
    else
        jump Json.413 Json.122;

procedure Json.18 (Json.95):
    let Json.433 : Str = CallByName Encode.22 Json.95;
    ret Json.433;

procedure Json.20 (Json.111):
    let Json.397 : List {Str, Str} = CallByName Encode.22 Json.111;
    ret Json.397;

procedure Json.96 (Json.97, Json.435, Json.95):
    let Json.444 : I64 = 34i64;
    let Json.443 : U8 = CallByName Num.125 Json.444;
    let Json.441 : List U8 = CallByName List.4 Json.97 Json.443;
    let Json.442 : List U8 = CallByName Str.12 Json.95;
    let Json.438 : List U8 = CallByName List.8 Json.441 Json.442;
    let Json.440 : I64 = 34i64;
    let Json.439 : U8 = CallByName Num.125 Json.440;
    let Json.437 : List U8 = CallByName List.4 Json.438 Json.439;
    ret Json.437;

procedure List.138 (List.139, List.140, List.137):
    let List.525 : {List U8, U64} = CallByName Json.114 List.139 List.140;
    ret List.525;

procedure List.18 (List.135, List.136, List.137):
    let List.506 : {List U8, U64} = CallByName List.90 List.135 List.136 List.137;
    ret List.506;

procedure List.4 (List.106, List.107):
    let List.505 : U64 = 1i64;
    let List.504 : List U8 = CallByName List.70 List.106 List.505;
    let List.503 : List U8 = CallByName List.71 List.504 List.107;
    ret List.503;

procedure List.6 (#Attr.2):
    let List.478 : U64 = lowlevel ListLen #Attr.2;
    ret List.478;

procedure List.6 (#Attr.2):
    let List.528 : U64 = lowlevel ListLen #Attr.2;
    ret List.528;

procedure List.66 (#Attr.2, #Attr.3):
    let List.522 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.522;

procedure List.70 (#Attr.2, #Attr.3):
    let List.484 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.484;

procedure List.71 (#Attr.2, #Attr.3):
    let List.482 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.482;

procedure List.8 (#Attr.2, #Attr.3):
    let List.527 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.527;

procedure List.90 (List.426, List.427, List.428):
    let List.510 : U64 = 0i64;
    let List.511 : U64 = CallByName List.6 List.426;
    let List.509 : {List U8, U64} = CallByName List.91 List.426 List.427 List.428 List.510 List.511;
    ret List.509;

procedure List.91 (List.538, List.539, List.540, List.541, List.542):
    joinpoint List.512 List.429 List.430 List.431 List.432 List.433:
        let List.514 : Int1 = CallByName Num.22 List.432 List.433;
        if List.514 then
            let List.521 : {Str, Str} = CallByName List.66 List.429 List.432;
            let List.515 : {List U8, U64} = CallByName List.138 List.430 List.521 List.431;
            let List.518 : U64 = 1i64;
            let List.517 : U64 = CallByName Num.19 List.432 List.518;
            jump List.512 List.429 List.515 List.431 List.517 List.433;
        else
            ret List.430;
    in
    jump List.512 List.538 List.539 List.540 List.541 List.542;

procedure Num.125 (#Attr.2):
    let Num.263 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.263;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.266 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.266;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.264 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.264;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.267 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.267;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.265 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.265;

procedure Str.12 (#Attr.2):
    let Str.280 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.280;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.274 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.274;

procedure Str.9 (Str.76):
    let Str.272 : U64 = 0i64;
    let Str.273 : U64 = CallByName List.6 Str.76;
    let Str.77 : {U64, Str, Int1, U8} = CallByName Str.48 Str.76 Str.272 Str.273;
    let Str.269 : Int1 = StructAtIndex 2 Str.77;
    if Str.269 then
        let Str.271 : Str = StructAtIndex 1 Str.77;
        inc Str.271;
        dec Str.77;
        let Str.270 : [C {U64, U8}, C Str] = TagId(1) Str.271;
        ret Str.270;
    else
        let Str.267 : U8 = StructAtIndex 3 Str.77;
        let Str.268 : U64 = StructAtIndex 0 Str.77;
        dec Str.77;
        let Str.266 : {U64, U8} = Struct {Str.268, Str.267};
        let Str.265 : [C {U64, U8}, C Str] = TagId(0) Str.266;
        ret Str.265;

procedure Test.0 ():
    let Test.11 : Str = "foo";
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.25 Test.11 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
