procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.22 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName Json.18 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Json.20 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.2 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.114 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.116 : List U8 = CallByName Json.98 Encode.94 Encode.96 Encode.102;
    ret Encode.116;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : Str = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.425 : {} = Struct {};
    ret Json.425;

procedure Json.114 (Json.115, Json.428, Json.113):
    let Json.461 : I64 = 123i64;
    let Json.460 : U8 = CallByName Num.127 Json.461;
    let Json.117 : List U8 = CallByName List.4 Json.115 Json.460;
    let Json.459 : U64 = CallByName List.6 Json.113;
    let Json.436 : {List U8, U64} = Struct {Json.117, Json.459};
    let Json.437 : {} = Struct {};
    let Json.435 : {List U8, U64} = CallByName List.18 Json.113 Json.436 Json.437;
    dec Json.113;
    let Json.119 : List U8 = StructAtIndex 0 Json.435;
    inc Json.119;
    dec Json.435;
    let Json.434 : I64 = 125i64;
    let Json.433 : U8 = CallByName Num.127 Json.434;
    let Json.432 : List U8 = CallByName List.4 Json.119 Json.433;
    ret Json.432;

procedure Json.116 (Json.430, Json.431):
    let Json.122 : Str = StructAtIndex 0 Json.431;
    inc Json.122;
    let Json.123 : Str = StructAtIndex 1 Json.431;
    inc Json.123;
    dec Json.431;
    let Json.120 : List U8 = StructAtIndex 0 Json.430;
    inc Json.120;
    let Json.121 : U64 = StructAtIndex 1 Json.430;
    dec Json.430;
    let Json.458 : I64 = 34i64;
    let Json.457 : U8 = CallByName Num.127 Json.458;
    let Json.455 : List U8 = CallByName List.4 Json.120 Json.457;
    let Json.456 : List U8 = CallByName Str.12 Json.122;
    let Json.452 : List U8 = CallByName List.8 Json.455 Json.456;
    let Json.454 : I64 = 34i64;
    let Json.453 : U8 = CallByName Num.127 Json.454;
    let Json.449 : List U8 = CallByName List.4 Json.452 Json.453;
    let Json.451 : I64 = 58i64;
    let Json.450 : U8 = CallByName Num.127 Json.451;
    let Json.447 : List U8 = CallByName List.4 Json.449 Json.450;
    let Json.448 : {} = Struct {};
    let Json.124 : List U8 = CallByName Encode.23 Json.447 Json.123 Json.448;
    joinpoint Json.442 Json.125:
        let Json.440 : U64 = 1i64;
        let Json.439 : U64 = CallByName Num.20 Json.121 Json.440;
        let Json.438 : {List U8, U64} = Struct {Json.125, Json.439};
        ret Json.438;
    in
    let Json.446 : U64 = 1i64;
    let Json.443 : Int1 = CallByName Num.24 Json.121 Json.446;
    if Json.443 then
        let Json.445 : I64 = 44i64;
        let Json.444 : U8 = CallByName Num.127 Json.445;
        let Json.441 : List U8 = CallByName List.4 Json.124 Json.444;
        jump Json.442 Json.441;
    else
        jump Json.442 Json.124;

procedure Json.18 (Json.97):
    let Json.462 : Str = CallByName Encode.22 Json.97;
    ret Json.462;

procedure Json.20 (Json.113):
    let Json.426 : List {Str, Str} = CallByName Encode.22 Json.113;
    ret Json.426;

procedure Json.98 (Json.99, Json.464, Json.97):
    let Json.473 : I64 = 34i64;
    let Json.472 : U8 = CallByName Num.127 Json.473;
    let Json.470 : List U8 = CallByName List.4 Json.99 Json.472;
    let Json.471 : List U8 = CallByName Str.12 Json.97;
    let Json.467 : List U8 = CallByName List.8 Json.470 Json.471;
    let Json.469 : I64 = 34i64;
    let Json.468 : U8 = CallByName Num.127 Json.469;
    let Json.466 : List U8 = CallByName List.4 Json.467 Json.468;
    ret Json.466;

procedure List.139 (List.140, List.141, List.138):
    let List.541 : {List U8, U64} = CallByName Json.116 List.140 List.141;
    ret List.541;

procedure List.18 (List.136, List.137, List.138):
    let List.522 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.522;

procedure List.4 (List.107, List.108):
    let List.521 : U64 = 1i64;
    let List.520 : List U8 = CallByName List.70 List.107 List.521;
    let List.519 : List U8 = CallByName List.71 List.520 List.108;
    ret List.519;

procedure List.6 (#Attr.2):
    let List.494 : U64 = lowlevel ListLen #Attr.2;
    ret List.494;

procedure List.6 (#Attr.2):
    let List.544 : U64 = lowlevel ListLen #Attr.2;
    ret List.544;

procedure List.66 (#Attr.2, #Attr.3):
    let List.538 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.538;

procedure List.70 (#Attr.2, #Attr.3):
    let List.500 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.500;

procedure List.71 (#Attr.2, #Attr.3):
    let List.498 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.498;

procedure List.8 (#Attr.2, #Attr.3):
    let List.543 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.543;

procedure List.80 (List.554, List.555, List.556, List.557, List.558):
    joinpoint List.528 List.433 List.434 List.435 List.436 List.437:
        let List.530 : Int1 = CallByName Num.22 List.436 List.437;
        if List.530 then
            let List.537 : {Str, Str} = CallByName List.66 List.433 List.436;
            let List.531 : {List U8, U64} = CallByName List.139 List.434 List.537 List.435;
            let List.534 : U64 = 1i64;
            let List.533 : U64 = CallByName Num.19 List.436 List.534;
            jump List.528 List.433 List.531 List.435 List.533 List.437;
        else
            ret List.434;
    in
    jump List.528 List.554 List.555 List.556 List.557 List.558;

procedure List.92 (List.430, List.431, List.432):
    let List.526 : U64 = 0i64;
    let List.527 : U64 = CallByName List.6 List.430;
    let List.525 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.526 List.527;
    ret List.525;

procedure Num.127 (#Attr.2):
    let Num.282 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.282;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.284;

procedure Str.12 (#Attr.2):
    let Str.281 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.281;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.275 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.275;

procedure Str.9 (Str.77):
    let Str.273 : U64 = 0i64;
    let Str.274 : U64 = CallByName List.6 Str.77;
    let Str.78 : {U64, Str, Int1, U8} = CallByName Str.48 Str.77 Str.273 Str.274;
    let Str.270 : Int1 = StructAtIndex 2 Str.78;
    if Str.270 then
        let Str.272 : Str = StructAtIndex 1 Str.78;
        inc Str.272;
        dec Str.78;
        let Str.271 : [C {U64, U8}, C Str] = TagId(1) Str.272;
        ret Str.271;
    else
        let Str.268 : U8 = StructAtIndex 3 Str.78;
        let Str.269 : U64 = StructAtIndex 0 Str.78;
        dec Str.78;
        let Str.267 : {U64, U8} = Struct {Str.269, Str.268};
        let Str.266 : [C {U64, U8}, C Str] = TagId(0) Str.267;
        ret Str.266;

procedure Test.0 ():
    let Test.11 : Str = "foo";
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.25 Test.11 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
