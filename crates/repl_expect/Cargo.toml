[package]
name = "roc_repl_expect"
description = "Supports evaluating expect and printing contextual information when they fail."

version.workspace = true
edition.workspace = true
authors.workspace = true
license.workspace = true

[dependencies]
roc_builtins = {path = "../compiler/builtins"}
roc_can = {path = "../compiler/can"}
roc_collections = {path = "../compiler/collections"}
roc_load = {path = "../compiler/load"}
roc_mono = {path = "../compiler/mono"}
roc_parse = {path = "../compiler/parse"}
roc_module = {path = "../compiler/module"}
roc_repl_eval = {path = "../repl_eval"}
roc_packaging = {path = "../packaging"}
roc_reporting = {path = "../reporting"}
roc_std = {path = "../roc_std"}
roc_target = {path = "../compiler/roc_target"}
roc_types = {path = "../compiler/types"}
roc_gen_llvm = {path = "../compiler/gen_llvm"}
roc_region = { path = "../compiler/region" }
roc_build = { path = "../compiler/build" }
roc_error_macros = { path = "../error_macros" }

bumpalo.workspace = true
target-lexicon.workspace = true
libloading.workspace = true
signal-hook.workspace = true
libc.workspace = true
inkwell.workspace = true

[dev-dependencies]
roc_build = { path = "../compiler/build", features = ["target-aarch64", "target-x86_64"]  }

tempfile.workspace = true
indoc.workspace = true
pretty_assertions.workspace = true
strip-ansi-escapes.workspace = true


[lib]
name = "roc_repl_expect"
path = "src/lib.rs"
