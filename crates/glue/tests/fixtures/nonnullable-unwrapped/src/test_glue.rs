// ⚠️ GENERATED CODE ⚠️ - this entire file was generated by the `roc glue` CLI command

#![allow(unused_unsafe)]
#![allow(unused_variables)]
#![allow(dead_code)]
#![allow(unused_mut)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(clippy::undocumented_unsafe_blocks)]
#![allow(clippy::redundant_static_lifetimes)]
#![allow(clippy::unused_unit)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::let_and_return)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::redundant_static_lifetimes)]
#![allow(clippy::needless_borrow)]
#![allow(clippy::clone_on_copy)]

type Op_StderrWrite = roc_std::RocStr;
type Op_StdoutWrite = roc_std::RocStr;
type TODO_roc_function_69 = roc_std::RocStr;
type TODO_roc_function_70 = roc_std::RocStr;

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[repr(transparent)]
pub struct StrRoseTree {
    pointer: *mut union_StrRoseTree,
}


#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[repr(C)]
union union_StrRoseTree {
    Tree: core::mem::ManuallyDrop<StrRoseTree_Tree>,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[repr(C)]
struct StrRoseTree_Tree {
    pub f0: roc_std::RocStr,
    pub f1: roc_std::RocList<StrRoseTree>,
}

impl StrRoseTree {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn storage(&self) -> Option<&core::cell::Cell<roc_std::Storage>> {
        let untagged = self.pointer as *const core::cell::Cell<roc_std::Storage>;

        unsafe {
            Some(&*untagged.sub(1))
        }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// This is a single-tag union, so it has no alternatives
    /// to discriminate between. This method is only included for completeness.
    pub fn discriminant(&self) -> () {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Tree`, with the appropriate payload
    pub fn Tree(arg0: roc_std::RocStr, arg1: roc_std::RocList<StrRoseTree>) -> Self {
            let size = core::mem::size_of::<union_StrRoseTree>();
            let align = core::mem::align_of::<union_StrRoseTree>() as u32;

            unsafe {
                let ptr = roc_std::roc_alloc_refcounted::<union_StrRoseTree>();

                *ptr = union_StrRoseTree {
                    Tree: core::mem::ManuallyDrop::new(StrRoseTree_Tree {
                    f0: arg0,
                    f1: arg1,
                })
                };

                Self {
                    pointer: ptr,
                }
            }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// Since `StrRoseTree` only has one tag (namely, `Tree`),
    /// convert it to `Tree`'s payload.
    pub fn into_Tree(mut self) -> (roc_std::RocStr, roc_std::RocList<StrRoseTree>) {
        let payload = {
            let ptr = (self.pointer as usize & !0b11) as *mut union_StrRoseTree;
            let mut uninitialized = core::mem::MaybeUninit::uninit();
            let swapped = unsafe {
                core::mem::replace(
                    &mut (*ptr).Tree,
                    core::mem::ManuallyDrop::new(uninitialized.assume_init()),
                )
            };

            core::mem::forget(self);

            core::mem::ManuallyDrop::into_inner(swapped)
        };

        (
            payload.f0, 
            payload.f1
        )
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// Since `StrRoseTree` only has one tag (namely, `Tree`),
    /// convert it to `Tree`'s payload.
    pub fn as_Tree(&self) -> (&roc_std::RocStr, &roc_std::RocList<StrRoseTree>) {
        let payload = {
            let ptr = (self.pointer as usize & !0b11) as *mut union_StrRoseTree;

            unsafe { &(*ptr).Tree }
        };

        (
            &payload.f0, 
            &payload.f1
        )
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// Since `StrRoseTree` only has one tag (namely, `Tree`),
    /// convert it to `Tree`'s payload.
    pub fn into_Tree(mut self) -> (roc_std::RocStr, roc_std::RocList<StrRoseTree>) {
        let payload = {
            let ptr = (self.pointer as usize & !0b111) as *mut union_StrRoseTree;
            let mut uninitialized = core::mem::MaybeUninit::uninit();
            let swapped = unsafe {
                core::mem::replace(
                    &mut (*ptr).Tree,
                    core::mem::ManuallyDrop::new(uninitialized.assume_init()),
                )
            };

            core::mem::forget(self);

            core::mem::ManuallyDrop::into_inner(swapped)
        };

        (
            payload.f0, 
            payload.f1
        )
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// Since `StrRoseTree` only has one tag (namely, `Tree`),
    /// convert it to `Tree`'s payload.
    pub fn as_Tree(&self) -> (&roc_std::RocStr, &roc_std::RocList<StrRoseTree>) {
        let payload = {
            let ptr = (self.pointer as usize & !0b111) as *mut union_StrRoseTree;

            unsafe { &(*ptr).Tree }
        };

        (
            &payload.f0, 
            &payload.f1
        )
    }
}

impl Drop for StrRoseTree {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn drop(&mut self) {
        // We only need to do any work if there's actually a heap-allocated payload.
        if let Some(storage) = self.storage() {
            let mut new_storage = storage.get();

            // Decrement the refcount
            let needs_dealloc = !new_storage.is_readonly() && new_storage.decrease();

            if needs_dealloc {
                // Drop the payload first.
                unsafe { core::mem::ManuallyDrop::drop(&mut core::ptr::read(self.pointer).Tree); }

                // Dealloc the pointer
                let alignment = core::mem::align_of::<Self>().max(core::mem::align_of::<roc_std::Storage>());

                unsafe { crate::roc_dealloc(storage.as_ptr().cast(), alignment as u32); }
            } else {
                // Write the storage back.
                storage.set(new_storage);
            }
        }
    }
}

impl Eq for StrRoseTree {}

impl PartialEq for StrRoseTree {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn eq(&self, other: &Self) -> bool {
            if self.discriminant() != other.discriminant() {
                return false;
            }

            unsafe {
                (*self.pointer).Tree == (*other.pointer).Tree
            }
    }
}

impl PartialOrd for StrRoseTree {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
        unsafe {
            (&*self.pointer).Tree.partial_cmp(&(*other.pointer).Tree)
        }
    }

}

impl Ord for StrRoseTree {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn cmp(&self, other: &Self) -> core::cmp::Ordering {
        unsafe {
            (&*self.pointer).Tree.cmp(&(*other.pointer).Tree)
        }
    }

}

impl Clone for StrRoseTree {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn clone(&self) -> Self {
        if let Some(storage) = self.storage() {
            let mut new_storage = storage.get();
            if !new_storage.is_readonly() {
                new_storage.increment_reference_count();
                storage.set(new_storage);
            }
        }

        Self {
            pointer: self.pointer
        }
    }
}

impl core::hash::Hash for StrRoseTree {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {
        unsafe {
            (*self.pointer).Tree.hash(state)
        }    }
}

impl core::fmt::Debug for StrRoseTree {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str("StrRoseTree::")?;

        unsafe {
f.debug_tuple("Tree")
        .field(&(*self.pointer).Tree)
        .finish()        }
    }
}
