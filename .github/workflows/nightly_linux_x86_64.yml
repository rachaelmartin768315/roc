on: [pull_request]
#  schedule:
#    - cron:  '0 9 * * *'

name: Nightly Release Linux x86_64
    
jobs:
  build:
    name: Rust tests, build and package nightly release
    runs-on: [self-hosted, i7-6700K]
    timeout-minutes: 90
    env:
      FORCE_COLOR: 1 # for earthly logging
    steps:
      - uses: actions/checkout@v3

      - name: create version.txt
        run: ./ci/write_version.sh
        
      - name: print PATH
        run: echo $PATH

      - name: build release
        run: RUSTFLAGS="-C target-cpu=x86-64" cargo build --features with_sound --release --locked
        # target-cpu=x86-64 -> For maximal compatibility for all CPU's. Note that this setting will likely make the compiler slower.

      - name: get commit SHA
        run:  echo "SHA=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
        
      - name: get date
        run: echo 'DATE=date "+%Y-%m-%d"' >> $GITHUB_ENV
        
      - name: build file name
        run: echo "RELEASE_TAR_FILENAME=roc_nightly-linux_x86_64-$DATE-$SHA.tar.gz" >> $GITHUB_ENV
       
      - name: Make nightly release tar archive
        run: ./ci/package_release.sh $RELEASE_TAR_FILENAME

      - name: Upload roc nightly tar. Actually uploading to github releases has to be done manually.
        uses: actions/upload-artifact@v3
        with:
           name: $RELEASE_TAR_FILENAME
           path: $RELEASE_TAR_FILENAME
           retention-days: 4

      - name: build wasm repl
        run: ./ci/www-repl.sh

      - name: Upload wasm repl tar. Actually uploading to github releases has to be done manually.
        uses: actions/upload-artifact@v3
        with:
           name: roc_repl_wasm.tar.gz
           path: roc_repl_wasm.tar.gz
           retention-days: 4
