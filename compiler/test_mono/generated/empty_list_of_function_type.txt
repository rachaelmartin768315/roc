procedure List.2 (#Attr.2, #Attr.3):
    let List.157 : U64 = lowlevel ListLen #Attr.2;
    let List.154 : Int1 = lowlevel NumLt #Attr.3 List.157;
    if List.154 then
        let List.156 : {} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
        let List.155 : [C {}, C {}] = Ok List.156;
        ret List.155;
    else
        let List.153 : {} = Struct {};
        let List.152 : [C {}, C {}] = Err List.153;
        ret List.152;

procedure Test.2 (Test.6):
    let Test.18 : Str = "bar";
    ret Test.18;

procedure Test.0 ():
    let Test.1 : List {} = Array [];
    joinpoint Test.16 Test.3:
        let Test.14 : U64 = 0i64;
        let Test.7 : [C {}, C {}] = CallByName List.2 Test.3 Test.14;
        dec Test.3;
        let Test.11 : U8 = 1i64;
        let Test.12 : U8 = GetTagId Test.7;
        let Test.13 : Int1 = lowlevel Eq Test.11 Test.12;
        if Test.13 then
            let Test.5 : {} = UnionAtIndex (Id 1) (Index 0) Test.7;
            let Test.9 : Str = "foo";
            let Test.8 : Str = CallByName Test.2 Test.9;
            dec Test.9;
            ret Test.8;
        else
            let Test.10 : Str = "bad!";
            ret Test.10;
    in
    let Test.19 : Int1 = false;
    if Test.19 then
        jump Test.16 Test.1;
    else
        dec Test.1;
        let Test.17 : {} = Struct {};
        let Test.15 : List {} = Array [Test.17];
        jump Test.16 Test.15;
