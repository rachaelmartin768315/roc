procedure List.3 (#Attr.2, #Attr.3):
    let Test.42 : U64 = lowlevel ListLen #Attr.2;
    let Test.39 : Int1 = lowlevel NumLt #Attr.3 Test.42;
    if Test.39 then
        let Test.41 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
        let Test.40 : [C {}, C I64] = Ok Test.41;
        ret Test.40;
    else
        let Test.38 : {} = Struct {};
        let Test.37 : [C {}, C I64] = Err Test.38;
        ret Test.37;

procedure List.4 (#Attr.2, #Attr.3, #Attr.4):
    let Test.20 : U64 = lowlevel ListLen #Attr.2;
    let Test.13 : Int1 = lowlevel NumLt #Attr.3 Test.20;
    if Test.13 then
        let Test.15 : {List I64, I64} = CallByName List.58 #Attr.2 #Attr.3 #Attr.4;
        let Test.14 : List I64 = StructAtIndex 0 Test.15;
        inc Test.14;
        dec Test.15;
        ret Test.14;
    else
        ret #Attr.2;

procedure List.58 (#Attr.2, #Attr.3, #Attr.4):
    let Test.19 : U64 = lowlevel ListLen #Attr.2;
    let Test.17 : Int1 = lowlevel NumLt #Attr.3 Test.19;
    if Test.17 then
        let Test.18 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
        ret Test.18;
    else
        let Test.16 : {List I64, I64} = Struct {#Attr.2, #Attr.4};
        ret Test.16;

procedure Test.1 (Test.2):
    let Test.43 : U64 = 0i64;
    let Test.35 : [C {}, C I64] = CallByName List.3 Test.2 Test.43;
    let Test.36 : U64 = 0i64;
    let Test.34 : [C {}, C I64] = CallByName List.3 Test.2 Test.36;
    let Test.8 : {[C {}, C I64], [C {}, C I64]} = Struct {Test.34, Test.35};
    joinpoint Test.31:
        let Test.22 : List I64 = Array [];
        ret Test.22;
    in
    let Test.28 : [C {}, C I64] = StructAtIndex 1 Test.8;
    let Test.29 : U8 = 1i64;
    let Test.30 : U8 = GetTagId Test.28;
    let Test.33 : Int1 = lowlevel Eq Test.29 Test.30;
    if Test.33 then
        let Test.25 : [C {}, C I64] = StructAtIndex 0 Test.8;
        let Test.26 : U8 = 1i64;
        let Test.27 : U8 = GetTagId Test.25;
        let Test.32 : Int1 = lowlevel Eq Test.26 Test.27;
        if Test.32 then
            let Test.24 : [C {}, C I64] = StructAtIndex 0 Test.8;
            let Test.4 : I64 = UnionAtIndex (Id 1) (Index 0) Test.24;
            let Test.23 : [C {}, C I64] = StructAtIndex 1 Test.8;
            let Test.5 : I64 = UnionAtIndex (Id 1) (Index 0) Test.23;
            let Test.21 : U64 = 0i64;
            let Test.10 : List I64 = CallByName List.4 Test.2 Test.21 Test.5;
            let Test.11 : U64 = 0i64;
            let Test.9 : List I64 = CallByName List.4 Test.10 Test.11 Test.4;
            ret Test.9;
        else
            dec Test.2;
            jump Test.31;
    else
        dec Test.2;
        jump Test.31;

procedure Test.0 ():
    let Test.7 : List I64 = Array [1i64, 2i64];
    let Test.6 : List I64 = CallByName Test.1 Test.7;
    ret Test.6;
