procedure List.3 (List.81, List.82, List.83):
    let List.242 : {List I64, I64} = CallByName List.57 List.81 List.82 List.83;
    let List.241 : List I64 = StructAtIndex 0 List.242;
    inc List.241;
    dec List.242;
    ret List.241;

procedure List.57 (List.78, List.79, List.80):
    let List.248 : U64 = CallByName List.6 List.78;
    let List.245 : Int1 = CallByName Num.22 List.79 List.248;
    if List.245 then
        let List.246 : {List I64, I64} = CallByName List.61 List.78 List.79 List.80;
        ret List.246;
    else
        let List.244 : {List I64, I64} = Struct {List.78, List.80};
        ret List.244;

procedure List.6 (#Attr.2):
    let List.240 : U64 = lowlevel ListLen #Attr.2;
    ret List.240;

procedure List.61 (#Attr.2, #Attr.3, #Attr.4):
    let List.247 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.247;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.273 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.273;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.274 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.274;

procedure Test.1 ():
    let Test.8 : List I64 = Array [1i64, 2i64, 3i64];
    ret Test.8;

procedure Test.2 (Test.3):
    let Test.12 : U64 = 0i64;
    let Test.13 : I64 = 0i64;
    let Test.11 : List I64 = CallByName List.3 Test.3 Test.12 Test.13;
    ret Test.11;

procedure Test.0 ():
    let Test.10 : List I64 = CallByName Test.1;
    let Test.9 : List I64 = CallByName Test.2 Test.10;
    let Test.5 : U64 = CallByName List.6 Test.9;
    dec Test.9;
    let Test.7 : List I64 = CallByName Test.1;
    let Test.6 : U64 = CallByName List.6 Test.7;
    dec Test.7;
    let Test.4 : U64 = CallByName Num.19 Test.5 Test.6;
    ret Test.4;
