procedure List.4 (#Attr.2, #Attr.3, #Attr.4):
    let Test.19 : Builtin(Int(U64)) = lowlevel ListLen #Attr.2;
    let Test.17 : Builtin(Bool) = lowlevel NumLt #Attr.3 Test.19;
    if Test.17 then
        let Test.18 : Builtin(List(Builtin(Int(I64)))) = lowlevel ListSet #Attr.2 #Attr.3 #Attr.4;
        ret Test.18;
    else
        ret #Attr.2;

procedure List.7 (#Attr.2):
    let Test.9 : Builtin(Int(U64)) = lowlevel ListLen #Attr.2;
    ret Test.9;

procedure Num.22 (#Attr.2, #Attr.3):
    let Test.7 : Builtin(Int(U64)) = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Test.7;

procedure Test.1 ():
    let Test.10 : Builtin(List(Builtin(Int(I64)))) = Array [1i64, 2i64, 3i64];
    ret Test.10;

procedure Test.2 (Test.3):
    let Test.14 : Builtin(Int(U64)) = 0i64;
    let Test.15 : Builtin(Int(I64)) = 0i64;
    let Test.13 : Builtin(List(Builtin(Int(I64)))) = CallByName List.4 Test.3 Test.14 Test.15;
    ret Test.13;

procedure Test.0 ():
    let Test.12 : Builtin(List(Builtin(Int(I64)))) = CallByName Test.1;
    let Test.11 : Builtin(List(Builtin(Int(I64)))) = CallByName Test.2 Test.12;
    let Test.5 : Builtin(Int(U64)) = CallByName List.7 Test.11;
    dec Test.11;
    let Test.8 : Builtin(List(Builtin(Int(I64)))) = CallByName Test.1;
    let Test.6 : Builtin(Int(U64)) = CallByName List.7 Test.8;
    dec Test.8;
    let Test.4 : Builtin(Int(U64)) = CallByName Num.22 Test.5 Test.6;
    ret Test.4;
