procedure List.2 (List.67, List.68):
    let List.170 : U64 = CallByName List.6 List.67;
    let List.166 : Int1 = CallByName Num.22 List.68 List.170;
    if List.166 then
        let List.168 : I64 = CallByName List.60 List.67 List.68;
        let List.167 : [C {}, C I64] = Ok List.168;
        ret List.167;
    else
        let List.165 : {} = Struct {};
        let List.164 : [C {}, C I64] = Err List.165;
        ret List.164;

procedure List.6 (#Attr.2):
    let List.173 : U64 = lowlevel ListLen #Attr.2;
    ret List.173;

procedure List.60 (#Attr.2, #Attr.3):
    let List.172 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.172;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.273 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.273;

procedure Test.1 (Test.2):
    let Test.6 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.7 : U64 = 0i64;
    let Test.5 : [C {}, C I64] = CallByName List.2 Test.6 Test.7;
    dec Test.6;
    ret Test.5;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.3 : [C {}, C I64] = CallByName Test.1 Test.4;
    ret Test.3;
