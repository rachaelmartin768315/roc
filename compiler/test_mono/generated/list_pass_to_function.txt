procedure List.4 (#Attr.2, #Attr.3, #Attr.4):
    let Test.16 : U64 = lowlevel ListLen #Attr.2;
    let Test.9 : Int1 = lowlevel NumLt #Attr.3 Test.16;
    if Test.9 then
        let Test.11 : {List I64, I64} = CallByName List.58 #Attr.2 #Attr.3 #Attr.4;
        let Test.10 : List I64 = StructAtIndex 0 Test.11;
        inc Test.10;
        dec Test.11;
        ret Test.10;
    else
        ret #Attr.2;

procedure List.58 (#Attr.2, #Attr.3, #Attr.4):
    let Test.15 : U64 = lowlevel ListLen #Attr.2;
    let Test.13 : Int1 = lowlevel NumLt #Attr.3 Test.15;
    if Test.13 then
        let Test.14 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
        ret Test.14;
    else
        let Test.12 : {List I64, I64} = Struct {#Attr.2, #Attr.4};
        ret Test.12;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.4 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
