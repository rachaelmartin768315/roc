procedure List.3 (List.76, List.77, List.78):
    let List.165 : {List I64, I64} = CallByName List.57 List.76 List.77 List.78;
    let List.164 : List I64 = StructAtIndex 0 List.165;
    inc List.164;
    dec List.165;
    ret List.164;

procedure List.57 (List.73, List.74, List.75):
    let List.171 : U64 = CallByName List.6 List.73;
    let List.168 : Int1 = CallByName Num.22 List.74 List.171;
    if List.168 then
        let List.169 : {List I64, I64} = CallByName List.61 List.73 List.74 List.75;
        ret List.169;
    else
        let List.167 : {List I64, I64} = Struct {List.73, List.75};
        ret List.167;

procedure List.6 (#Attr.2):
    let List.172 : U64 = lowlevel ListLen #Attr.2;
    ret List.172;

procedure List.61 (#Attr.2, #Attr.3, #Attr.4):
    let List.170 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.170;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.273 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.273;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
