procedure List.3 (#Attr.2, #Attr.3):
    let Test.44 : U64 = lowlevel ListLen #Attr.2;
    let Test.41 : Int1 = lowlevel NumLt #Attr.3 Test.44;
    if Test.41 then
        let Test.43 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
        let Test.42 : [C {}, C I64] = Ok Test.43;
        ret Test.42;
    else
        let Test.40 : {} = Struct {};
        let Test.39 : [C {}, C I64] = Err Test.40;
        ret Test.39;

procedure List.4 (#Attr.2, #Attr.3, #Attr.4):
    let Test.24 : U64 = lowlevel ListLen #Attr.2;
    let Test.17 : Int1 = lowlevel NumLt #Attr.3 Test.24;
    if Test.17 then
        let Test.19 : {List I64, I64} = CallByName List.58 #Attr.2 #Attr.3 #Attr.4;
        let Test.18 : List I64 = StructAtIndex 0 Test.19;
        inc Test.18;
        dec Test.19;
        ret Test.18;
    else
        ret #Attr.2;

procedure List.58 (#Attr.2, #Attr.3, #Attr.4):
    let Test.23 : U64 = lowlevel ListLen #Attr.2;
    let Test.21 : Int1 = lowlevel NumLt #Attr.3 Test.23;
    if Test.21 then
        let Test.22 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
        ret Test.22;
    else
        let Test.20 : {List I64, I64} = Struct {#Attr.2, #Attr.4};
        ret Test.20;

procedure Test.1 (Test.2, Test.3, Test.4):
    let Test.38 : [C {}, C I64] = CallByName List.3 Test.4 Test.3;
    let Test.37 : [C {}, C I64] = CallByName List.3 Test.4 Test.2;
    let Test.13 : {[C {}, C I64], [C {}, C I64]} = Struct {Test.37, Test.38};
    joinpoint Test.34:
        let Test.25 : List I64 = Array [];
        ret Test.25;
    in
    let Test.31 : [C {}, C I64] = StructAtIndex 1 Test.13;
    let Test.32 : U8 = 1i64;
    let Test.33 : U8 = GetTagId Test.31;
    let Test.36 : Int1 = lowlevel Eq Test.32 Test.33;
    if Test.36 then
        let Test.28 : [C {}, C I64] = StructAtIndex 0 Test.13;
        let Test.29 : U8 = 1i64;
        let Test.30 : U8 = GetTagId Test.28;
        let Test.35 : Int1 = lowlevel Eq Test.29 Test.30;
        if Test.35 then
            let Test.27 : [C {}, C I64] = StructAtIndex 0 Test.13;
            let Test.6 : I64 = UnionAtIndex (Id 1) (Index 0) Test.27;
            let Test.26 : [C {}, C I64] = StructAtIndex 1 Test.13;
            let Test.7 : I64 = UnionAtIndex (Id 1) (Index 0) Test.26;
            let Test.15 : List I64 = CallByName List.4 Test.4 Test.2 Test.7;
            let Test.14 : List I64 = CallByName List.4 Test.15 Test.3 Test.6;
            ret Test.14;
        else
            dec Test.4;
            jump Test.34;
    else
        dec Test.4;
        jump Test.34;

procedure Test.0 ():
    let Test.10 : U64 = 0i64;
    let Test.11 : U64 = 0i64;
    let Test.12 : List I64 = Array [1i64];
    let Test.9 : List I64 = CallByName Test.1 Test.10 Test.11 Test.12;
    ret Test.9;
