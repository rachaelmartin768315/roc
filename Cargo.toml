[workspace]
members = [
    "crates/compiler/*",
    "crates/vendor/*",
    "crates/glue",
    "crates/editor",
    "crates/ast",
    "crates/cli",
    "crates/code_markup",
    "crates/highlight",
    "crates/error_macros",
    "crates/reporting",
    "crates/repl_cli",
    "crates/repl_eval",
    "crates/repl_test",
    "crates/repl_wasm",
    "crates/repl_expect",
    "crates/test_utils",
    "crates/tracing",
    "crates/utils",
    "crates/docs",
    "crates/docs_cli",
    "crates/linker",
    "crates/wasi-libc-sys",
]
exclude = [
    "ci/benchmarks/bench-runner",
    # Examples sometimes have Rust hosts in their platforms. The compiler should ignore those.
    "crates/cli_testing_examples",
    "examples",
    # Ignore building these normally. They are only imported by tests.
    # The tests will still correctly build them.
    "crates/cli_utils",
    "crates/compiler/test_mono_macros",
    "crates/compiler/str",
    # `cargo build` would cause roc_std to be built with default features which errors on windows
    "crates/roc_std",
]
# Needed to be able to run `cargo run -p roc_cli --no-default-features` -
# see www/build.sh for more.
#
# Without the `-p` flag, cargo ignores `--no-default-features` when you have a
# workspace, and without `resolver = "2"` here, you can't use `-p` like this.
resolver = "2"

# Optimizations based on https://deterministic.space/high-performance-rust.html
[profile.release]
lto = "thin"
codegen-units = 1

# debug = true # enable when profiling
[profile.bench]
lto = "thin"
codegen-units = 1
