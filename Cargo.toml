[workspace]
members = [
    "crates/compiler/*",
    "crates/vendor/*",
    "crates/glue",
    "crates/editor",
    "crates/ast",
    "crates/cli",
    "crates/code_markup",
    "crates/highlight",
    "crates/error_macros",
    "crates/reporting",
    "crates/repl_cli",
    "crates/repl_eval",
    "crates/repl_test",
    "crates/repl_wasm",
    "crates/repl_expect",
    "crates/test_utils",
    "crates/tracing",
    "crates/utils",
    "crates/docs",
    "crates/docs_cli",
    "crates/linker",
    "crates/wasi-libc-sys",
]
exclude = [
    "ci/benchmarks/bench-runner",
    # Examples sometimes have Rust hosts in their platforms. The compiler should ignore those.
    "crates/cli_testing_examples",
    "examples",
    # Ignore building these normally. They are only imported by tests.
    # The tests will still correctly build them.
    "crates/cli_utils",
    "crates/compiler/test_mono_macros",
    "crates/compiler/str",
    # `cargo build` would cause roc_std to be built with default features which errors on windows
    "crates/roc_std",
]
# Needed to be able to run `cargo run -p roc_cli --no-default-features` -
# see www/build.sh for more.
#
# Without the `-p` flag, cargo ignores `--no-default-features` when you have a
# workspace, and without `resolver = "2"` here, you can't use `-p` like this.
resolver = "2"

[workspace.dependencies]
# NOTE: roc-lang/inkwell is a fork of TheDan64/inkwell which does not change anything.
#
# The reason for this fork is that the way Inkwell is designed, you have to use
# a particular branch (e.g. "llvm8-0") in Cargo.toml. That would be fine, except that
# breaking changes get pushed directly to that branch, which breaks our build
# without warning.
#
# We tried referencing a specific rev on TheDan64/inkwell directly (instead of branch),
# but although that worked locally, it did not work on GitHub Actions. (After a few
# hours of investigation, gave up trying to figure out why.) So this is the workaround:
# having an immutable tag on the roc-lang/inkwell fork which points to
# a particular "release" of Inkwell.
#
# When we want to update Inkwell, we can sync up roc-lang/inkwell to the latest
# commit of TheDan64/inkwell, push a new tag which points to the latest commit,
# change the tag value in this Cargo.toml to point to that tag, and `cargo update`.
# This way, GitHub Actions works and nobody's builds get broken.
inkwell = { git = "https://github.com/roc-lang/inkwell", branch = "master", features = [ "llvm13-0" ] }

# Optimizations based on https://deterministic.space/high-performance-rust.html
[profile.release]
lto = "thin"
codegen-units = 1

# debug = true # enable when profiling
[profile.bench]
lto = "thin"
codegen-units = 1
