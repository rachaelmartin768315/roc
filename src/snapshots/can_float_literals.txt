~~~META
description=Float literals with different precision requirements
type=file
~~~SOURCE
app [main] {
    pf: platform "../basic-cli/platform.roc"
}

main =
    # Values that fit in all three types (f32, f64, dec)
    zero = 0.0
    one = 1.0
    simple = 42.5

    # Values that fit in f64 and dec, but not f32 (precision loss)
    pi = 3.14159265358979323846
    precise = 1.23456789012345

    # Values that fit only in f64 (exceed dec range)
    huge = 1e21
    hugeNeg = -1e21

    # Values that fit in f64 and dec, but not f32 (out of f32 range)
    bigFloat = 1e39
    tinyFloat = 1e-40

    # Values that fit in dec (exact decimal representation)
    tenth = 0.1
    third = 0.333
    money = 19.99

    # Value at dec boundary (18 decimal places)
    decBoundary = 0.000000000000000001

    { zero, one, simple, pi, precise, huge, hugeNeg, bigFloat, tinyFloat, tenth, third, money, decBoundary }
~~~PROBLEMS
PARSER: expr_unexpected_token
UNDEFINED VARIABLE
Nothing is named `zero` in this scope.
Is there an import or exposing missing up-top?
INVALID STATEMENT
The statement expr is not allowed at the top level.
Only definitions, type annotations, and imports are allowed at the top level.
INVALID STATEMENT
The statement expr is not allowed at the top level.
Only definitions, type annotations, and imports are allowed at the top level.
INVALID STATEMENT
The statement expr is not allowed at the top level.
Only definitions, type annotations, and imports are allowed at the top level.
~~~TOKENS
KwApp(1:1-1:4),OpenSquare(1:5-1:6),LowerIdent(1:6-1:10),CloseSquare(1:10-1:11),OpenCurly(1:12-1:13),Newline(1:1-1:1),
LowerIdent(2:5-2:7),OpColon(2:7-2:8),KwPlatform(2:9-2:17),StringStart(2:18-2:19),StringPart(2:19-2:44),StringEnd(2:44-2:45),Newline(1:1-1:1),
CloseCurly(3:1-3:2),Newline(1:1-1:1),
Newline(1:1-1:1),
LowerIdent(5:1-5:5),OpAssign(5:6-5:7),Newline(1:1-1:1),
Newline(6:6-6:57),
LowerIdent(7:5-7:9),OpAssign(7:10-7:11),Float(7:12-7:15),Newline(1:1-1:1),
LowerIdent(8:5-8:8),OpAssign(8:9-8:10),Float(8:11-8:14),Newline(1:1-1:1),
LowerIdent(9:5-9:11),OpAssign(9:12-9:13),Float(9:14-9:18),Newline(1:1-1:1),
Newline(1:1-1:1),
Newline(11:6-11:67),
LowerIdent(12:5-12:7),OpAssign(12:8-12:9),Float(12:10-12:32),Newline(1:1-1:1),
LowerIdent(13:5-13:12),OpAssign(13:13-13:14),Float(13:15-13:31),Newline(1:1-1:1),
Newline(1:1-1:1),
Newline(15:6-15:53),
LowerIdent(16:5-16:9),OpAssign(16:10-16:11),Float(16:12-16:16),Newline(1:1-1:1),
LowerIdent(17:5-17:12),OpAssign(17:13-17:14),Float(17:15-17:20),Newline(1:1-1:1),
Newline(1:1-1:1),
Newline(19:6-19:69),
LowerIdent(20:5-20:13),OpAssign(20:14-20:15),Float(20:16-20:20),Newline(1:1-1:1),
LowerIdent(21:5-21:14),OpAssign(21:15-21:16),Float(21:17-21:22),Newline(1:1-1:1),
Newline(1:1-1:1),
Newline(23:6-23:60),
LowerIdent(24:5-24:10),OpAssign(24:11-24:12),Float(24:13-24:16),Newline(1:1-1:1),
LowerIdent(25:5-25:10),OpAssign(25:11-25:12),Float(25:13-25:18),Newline(1:1-1:1),
LowerIdent(26:5-26:10),OpAssign(26:11-26:12),Float(26:13-26:18),Newline(1:1-1:1),
Newline(1:1-1:1),
Newline(28:6-28:48),
LowerIdent(29:5-29:16),OpAssign(29:17-29:18),Float(29:19-29:39),Newline(1:1-1:1),
Newline(1:1-1:1),
OpenCurly(31:5-31:6),LowerIdent(31:7-31:11),Comma(31:11-31:12),LowerIdent(31:13-31:16),Comma(31:16-31:17),LowerIdent(31:18-31:24),Comma(31:24-31:25),LowerIdent(31:26-31:28),Comma(31:28-31:29),LowerIdent(31:30-31:37),Comma(31:37-31:38),LowerIdent(31:39-31:43),Comma(31:43-31:44),LowerIdent(31:45-31:52),Comma(31:52-31:53),LowerIdent(31:54-31:62),Comma(31:62-31:63),LowerIdent(31:64-31:73),Comma(31:73-31:74),LowerIdent(31:75-31:80),Comma(31:80-31:81),LowerIdent(31:82-31:87),Comma(31:87-31:88),LowerIdent(31:89-31:94),Comma(31:94-31:95),LowerIdent(31:96-31:107),CloseCurly(31:108-31:109),EndOfFile(31:109-31:109),
~~~PARSE
(file (1:1-31:109)
	(app (1:1-3:2)
		(provides (1:6-1:11) (exposed_item (lower_ident "main")))
		(record_field (1:1-1:1)
			"pf"
			(string (2:18-2:45) (string_part (2:19-2:44) "../basic-cli/platform.roc")))
		(packages (1:12-3:2)
			(record_field (1:1-1:1)
				"pf"
				(string (2:18-2:45) (string_part (2:19-2:44) "../basic-cli/platform.roc")))))
	(statements
		(decl (5:1-7:9)
			(ident (5:1-5:5) "main")
			(ident (7:5-7:9) "" "zero"))
		(malformed_expr (7:10-7:11) "expr_unexpected_token")
		(frac (7:12-7:15) "0.0")
		(decl (8:5-8:14)
			(ident (8:5-8:8) "one")
			(frac (8:11-8:14) "1.0"))
		(decl (9:5-9:18)
			(ident (9:5-9:11) "simple")
			(frac (9:14-9:18) "42.5"))
		(decl (12:5-12:32)
			(ident (12:5-12:7) "pi")
			(frac (12:10-12:32) "3.14159265358979323846"))
		(decl (13:5-13:31)
			(ident (13:5-13:12) "precise")
			(frac (13:15-13:31) "1.23456789012345"))
		(decl (16:5-16:16)
			(ident (16:5-16:9) "huge")
			(frac (16:12-16:16) "1e21"))
		(decl (17:5-17:20)
			(ident (17:5-17:12) "hugeNeg")
			(frac (17:15-17:20) "-1e21"))
		(decl (20:5-20:20)
			(ident (20:5-20:13) "bigFloat")
			(frac (20:16-20:20) "1e39"))
		(decl (21:5-21:22)
			(ident (21:5-21:14) "tinyFloat")
			(frac (21:17-21:22) "1e-40"))
		(decl (24:5-24:16)
			(ident (24:5-24:10) "tenth")
			(frac (24:13-24:16) "0.1"))
		(decl (25:5-25:18)
			(ident (25:5-25:10) "third")
			(frac (25:13-25:18) "0.333"))
		(decl (26:5-26:18)
			(ident (26:5-26:10) "money")
			(frac (26:13-26:18) "19.99"))
		(decl (29:5-29:39)
			(ident (29:5-29:16) "decBoundary")
			(frac (29:19-29:39) "0.000000000000000001"))
		(record (31:5-31:109)
			(field "zero")
			(field "one")
			(field "simple")
			(field "pi")
			(field "precise")
			(field "huge")
			(field "hugeNeg")
			(field "bigFloat")
			(field "tinyFloat")
			(field "tenth")
			(field "third")
			(field "money")
			(field "decBoundary"))))
~~~FORMATTED
app [main] {
	pf: platform "../basic-cli/platform.roc",
}

main = 
# Values that fit in all three types (f32, f64, dec)
	zero0.0
one = 1.0
simple = 42.5

# Values that fit in f64 and dec, but not f32 (precision loss)
pi = 3.14159265358979323846
precise = 1.23456789012345

# Values that fit only in f64 (exceed dec range)
huge = 1e21
hugeNeg = -1e21

# Values that fit in f64 and dec, but not f32 (out of f32 range)
bigFloat = 1e39
tinyFloat = 1e-40

# Values that fit in dec (exact decimal representation)
tenth = 0.1
third = 0.333
money = 19.99

# Value at dec boundary (18 decimal places)
decBoundary = 0.000000000000000001

{ zero, one, simple, pi, precise, huge, hugeNeg, bigFloat, tinyFloat, tenth, third, money, decBoundary }
~~~CANONICALIZE
(can_ir
	(d_let
		(def_pattern
			(p_assign (5:1-5:5)
				(pid 12)
				(ident "main")))
		(def_expr (e_runtime_error (7:5-7:9) "ident_not_in_scope")))
	(d_let
		(def_pattern
			(p_assign (8:5-8:8)
				(pid 18)
				(ident "one")))
		(def_expr
			(e_frac (8:11-8:14)
				(frac_var "#3")
				(requirements
					(fits_in_f32 "true")
					(fits_in_f64 "true")
					(fits_in_dec "true"))
				(literal "1.0")
				(value "0"))))
	(d_let
		(def_pattern
			(p_assign (9:5-9:11)
				(pid 22)
				(ident "simple")))
		(def_expr
			(e_frac (9:14-9:18)
				(frac_var "#6")
				(requirements
					(fits_in_f32 "true")
					(fits_in_f64 "true")
					(fits_in_dec "true"))
				(literal "42.5")
				(value "0"))))
	(d_let
		(def_pattern
			(p_assign (12:5-12:7)
				(pid 26)
				(ident "pi")))
		(def_expr
			(e_frac (12:10-12:32)
				(frac_var "#9")
				(requirements
					(fits_in_f32 "false")
					(fits_in_f64 "true")
					(fits_in_dec "false"))
				(literal "3.14159265358979323846")
				(value "0"))))
	(d_let
		(def_pattern
			(p_assign (13:5-13:12)
				(pid 30)
				(ident "precise")))
		(def_expr
			(e_frac (13:15-13:31)
				(frac_var "#12")
				(requirements
					(fits_in_f32 "false")
					(fits_in_f64 "true")
					(fits_in_dec "true"))
				(literal "1.23456789012345")
				(value "0"))))
	(d_let
		(def_pattern
			(p_assign (16:5-16:9)
				(pid 34)
				(ident "huge")))
		(def_expr
			(e_frac (16:12-16:16)
				(frac_var "#15")
				(requirements
					(fits_in_f32 "false")
					(fits_in_f64 "true")
					(fits_in_dec "false"))
				(literal "1e21")
				(value "0"))))
	(d_let
		(def_pattern
			(p_assign (17:5-17:12)
				(pid 38)
				(ident "hugeNeg")))
		(def_expr
			(e_frac (17:15-17:20)
				(frac_var "#18")
				(requirements
					(fits_in_f32 "false")
					(fits_in_f64 "true")
					(fits_in_dec "false"))
				(literal "-1e21")
				(value "0"))))
	(d_let
		(def_pattern
			(p_assign (20:5-20:13)
				(pid 42)
				(ident "bigFloat")))
		(def_expr
			(e_frac (20:16-20:20)
				(frac_var "#21")
				(requirements
					(fits_in_f32 "false")
					(fits_in_f64 "true")
					(fits_in_dec "false"))
				(literal "1e39")
				(value "0"))))
	(d_let
		(def_pattern
			(p_assign (21:5-21:14)
				(pid 46)
				(ident "tinyFloat")))
		(def_expr
			(e_frac (21:17-21:22)
				(frac_var "#24")
				(requirements
					(fits_in_f32 "false")
					(fits_in_f64 "true")
					(fits_in_dec "false"))
				(literal "1e-40")
				(value "0"))))
	(d_let
		(def_pattern
			(p_assign (24:5-24:10)
				(pid 50)
				(ident "tenth")))
		(def_expr
			(e_frac (24:13-24:16)
				(frac_var "#27")
				(requirements
					(fits_in_f32 "false")
					(fits_in_f64 "true")
					(fits_in_dec "true"))
				(literal "0.1")
				(value "0"))))
	(d_let
		(def_pattern
			(p_assign (25:5-25:10)
				(pid 54)
				(ident "third")))
		(def_expr
			(e_frac (25:13-25:18)
				(frac_var "#30")
				(requirements
					(fits_in_f32 "false")
					(fits_in_f64 "true")
					(fits_in_dec "true"))
				(literal "0.333")
				(value "0"))))
	(d_let
		(def_pattern
			(p_assign (26:5-26:10)
				(pid 58)
				(ident "money")))
		(def_expr
			(e_frac (26:13-26:18)
				(frac_var "#33")
				(requirements
					(fits_in_f32 "false")
					(fits_in_f64 "true")
					(fits_in_dec "true"))
				(literal "19.99")
				(value "0"))))
	(d_let
		(def_pattern
			(p_assign (29:5-29:16)
				(pid 62)
				(ident "decBoundary")))
		(def_expr
			(e_frac (29:19-29:39)
				(frac_var "#36")
				(requirements
					(fits_in_f32 "false")
					(fits_in_f64 "true")
					(fits_in_dec "true"))
				(literal "0.000000000000000001")
				(value "0")))))
~~~END