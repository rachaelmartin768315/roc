//! Diagnostics related to parsing

const std = @import("std");
const base = @import("../../base.zig");
const reporting = @import("../../reporting.zig");
const AST = @import("AST.zig");

const Region = base.Region;

tag: Tag,
region: AST.TokenizedRegion,

/// different types of diagnostic errors
pub const Tag = enum {
    bad_indent,
    multiple_platforms,
    no_platform,
    missing_header,
    list_not_closed,
    missing_arrow,
    expected_exposes,
    expected_exposes_close_square,
    expected_exposes_open_square,
    expected_imports,
    expected_imports_close_curly,
    expected_imports_open_curly,
    expected_package_or_platform_name,
    expected_package_or_platform_colon,
    expected_package_or_platform_string,
    expected_package_platform_close_curly,
    expected_package_platform_open_curly,
    expected_packages,
    expected_packages_close_curly,
    expected_packages_open_curly,
    expected_platform_name_end,
    expected_platform_name_start,
    expected_platform_name_string,
    expected_platform_string,
    expected_provides,
    expected_provides_close_square,
    expected_provides_open_square,
    expected_requires,
    expected_requires_rigids_close_curly,
    expected_requires_rigids_open_curly,
    expected_requires_signatures_close_curly,
    expected_requires_signatures_open_curly,
    expect_closing_paren,
    header_expected_open_square,
    header_expected_close_square,
    header_unexpected_token,
    pattern_unexpected_token,
    pattern_unexpected_eof,
    ty_anno_unexpected_token,
    statement_unexpected_eof,
    statement_unexpected_token,
    string_unexpected_token,
    string_expected_close_interpolation,
    expr_if_missing_else,
    expr_no_space_dot_int,
    import_exposing_no_open,
    import_exposing_no_close,
    no_else,
    expected_type_field_name,
    expected_colon_after_type_field_name,
    expected_arrow,
    expected_ty_close_curly_or_comma,
    expected_ty_close_square_or_comma,
    expected_lower_name_after_exposed_item_as,
    expected_upper_name_after_exposed_item_as,
    exposed_item_unexpected_token,
    expected_upper_name_after_import_as,
    expected_colon_after_type_annotation,
    expected_lower_ident_pat_field_name,
    expected_colon_after_pat_field_name,
    expected_expr_bar,
    expected_expr_close_curly_or_comma,
    expected_expr_close_round_or_comma,
    expected_expr_close_square_or_comma,
    expected_close_curly_at_end_of_match,
    expected_open_curly_after_match,
    expr_unexpected_token,
    expected_expr_record_field_name,
    expected_ty_apply_close_round,
    expected_ty_anno_end_of_function,
    expected_ty_anno_end,
    expected_expr_apply_close_round,
    where_expected_where,
    where_expected_mod_open,
    where_expected_var,
    where_expected_mod_close,
    where_expected_arg_open,
    where_expected_arg_close,
    where_expected_method_arrow,
    where_expected_method_or_alias_name,
    where_expected_var_or_module,
    import_must_be_top_level,
    invalid_type_arg,
    expr_arrow_expects_ident,
    var_only_allowed_in_a_body,
    var_must_have_ident,
    var_expected_equals,
    for_expected_in,
};
